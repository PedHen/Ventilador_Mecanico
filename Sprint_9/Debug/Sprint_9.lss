
Sprint_9.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000013e  00800100  00002c6a  00002cfe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002c6a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000024c  0080023e  0080023e  00002e3c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002e3c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002e6c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00002eac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001279  00000000  00000000  00002fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000919  00000000  00000000  00004235  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001bc5  00000000  00000000  00004b4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000578  00000000  00000000  00006714  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00008ec5  00000000  00000000  00006c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c14  00000000  00000000  0000fb51  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00010765  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003212  00000000  00000000  00010855  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 24 01 	jmp	0x248	; 0x248 <__ctors_end>
       4:	0c 94 43 01 	jmp	0x286	; 0x286 <__vector_1>
       8:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__vector_2>
       c:	0c 94 ed 03 	jmp	0x7da	; 0x7da <__vector_3>
      10:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      14:	0c 94 3c 03 	jmp	0x678	; 0x678 <__vector_5>
      18:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      1c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      20:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      24:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      28:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      2c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      30:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      34:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      38:	0c 94 93 02 	jmp	0x526	; 0x526 <__vector_14>
      3c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      40:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      44:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      48:	0c 94 52 04 	jmp	0x8a4	; 0x8a4 <__vector_18>
      4c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      50:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      54:	0c 94 2e 04 	jmp	0x85c	; 0x85c <__vector_21>
      58:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      5c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      60:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
      64:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>

00000068 <CHARSET>:
      68:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
      78:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
      88:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      98:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
      a8:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
      b8:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
      c8:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
      d8:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
      e8:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
      f8:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     108:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     118:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     128:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     138:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     148:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     158:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     168:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     178:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     188:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
     198:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
     1a8:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     1b8:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     1c8:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     1d8:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     1e8:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     1f8:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     208:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     218:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     228:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     238:	00 00 41 36 08 00 10 08 08 10 08 00 00 00 00 00     ..A6............

00000248 <__ctors_end>:
     248:	11 24       	eor	r1, r1
     24a:	1f be       	out	0x3f, r1	; 63
     24c:	cf ef       	ldi	r28, 0xFF	; 255
     24e:	d8 e0       	ldi	r29, 0x08	; 8
     250:	de bf       	out	0x3e, r29	; 62
     252:	cd bf       	out	0x3d, r28	; 61

00000254 <__do_copy_data>:
     254:	12 e0       	ldi	r17, 0x02	; 2
     256:	a0 e0       	ldi	r26, 0x00	; 0
     258:	b1 e0       	ldi	r27, 0x01	; 1
     25a:	ea e6       	ldi	r30, 0x6A	; 106
     25c:	fc e2       	ldi	r31, 0x2C	; 44
     25e:	02 c0       	rjmp	.+4      	; 0x264 <__do_copy_data+0x10>
     260:	05 90       	lpm	r0, Z+
     262:	0d 92       	st	X+, r0
     264:	ae 33       	cpi	r26, 0x3E	; 62
     266:	b1 07       	cpc	r27, r17
     268:	d9 f7       	brne	.-10     	; 0x260 <__do_copy_data+0xc>

0000026a <__do_clear_bss>:
     26a:	24 e0       	ldi	r18, 0x04	; 4
     26c:	ae e3       	ldi	r26, 0x3E	; 62
     26e:	b2 e0       	ldi	r27, 0x02	; 2
     270:	01 c0       	rjmp	.+2      	; 0x274 <.do_clear_bss_start>

00000272 <.do_clear_bss_loop>:
     272:	1d 92       	st	X+, r1

00000274 <.do_clear_bss_start>:
     274:	aa 38       	cpi	r26, 0x8A	; 138
     276:	b2 07       	cpc	r27, r18
     278:	e1 f7       	brne	.-8      	; 0x272 <.do_clear_bss_loop>
     27a:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <main>
     27e:	0c 94 33 16 	jmp	0x2c66	; 0x2c66 <_exit>

00000282 <__bad_interrupt>:
     282:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000286 <__vector_1>:
static uint8_t L3 = 0b0111;
static uint8_t ult = 0b1000;
static uint8_t ponto_ponto = 0b1001;
static uint8_t erro = 0b1010;

ISR(INT0_vect){//Interrupção externa INT0; -D2
     286:	1f 92       	push	r1
     288:	0f 92       	push	r0
     28a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     28e:	0f 92       	push	r0
     290:	11 24       	eor	r1, r1
     292:	2f 93       	push	r18
     294:	3f 93       	push	r19
     296:	4f 93       	push	r20
     298:	5f 93       	push	r21
     29a:	6f 93       	push	r22
     29c:	7f 93       	push	r23
     29e:	8f 93       	push	r24
     2a0:	9f 93       	push	r25
     2a2:	af 93       	push	r26
     2a4:	bf 93       	push	r27
     2a6:	ef 93       	push	r30
     2a8:	ff 93       	push	r31
     2aa:	cf 93       	push	r28
     2ac:	df 93       	push	r29
     2ae:	cd b7       	in	r28, 0x3d	; 61
     2b0:	de b7       	in	r29, 0x3e	; 62
	if((flag_t == 0) || (flag_t == 1)){
     2b2:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <flag_t>
     2b6:	88 23       	and	r24, r24
     2b8:	21 f0       	breq	.+8      	; 0x2c2 <__vector_1+0x3c>
     2ba:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <flag_t>
     2be:	81 30       	cpi	r24, 0x01	; 1
     2c0:	31 f4       	brne	.+12     	; 0x2ce <__vector_1+0x48>
		FreqRespiracao++;
     2c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     2c6:	8f 5f       	subi	r24, 0xFF	; 255
     2c8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     2cc:	6d c0       	rjmp	.+218    	; 0x3a8 <__vector_1+0x122>
	}else if(flag_t == 2){
     2ce:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <flag_t>
     2d2:	82 30       	cpi	r24, 0x02	; 2
     2d4:	89 f4       	brne	.+34     	; 0x2f8 <__vector_1+0x72>
		taxa_oxig = taxa_oxig + 10;
     2d6:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <__data_end>
     2da:	86 5f       	subi	r24, 0xF6	; 246
     2dc:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <__data_end>
		taxa_oxig = (taxa_oxig > 100) ? 100 : taxa_oxig;
     2e0:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <__data_end>
     2e4:	85 36       	cpi	r24, 0x65	; 101
     2e6:	08 f0       	brcs	.+2      	; 0x2ea <__vector_1+0x64>
     2e8:	84 e6       	ldi	r24, 0x64	; 100
     2ea:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <__data_end>
		animar_oxig(taxa_oxig);
     2ee:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <__data_end>
     2f2:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <animar_oxig>
		bpm_min++;
	}else if(flag_t == 7){
		sat_min++;
	}
	
}
     2f6:	58 c0       	rjmp	.+176    	; 0x3a8 <__vector_1+0x122>
		FreqRespiracao++;
	}else if(flag_t == 2){
		taxa_oxig = taxa_oxig + 10;
		taxa_oxig = (taxa_oxig > 100) ? 100 : taxa_oxig;
		animar_oxig(taxa_oxig);
	}else if(flag_t == 3){
     2f8:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <flag_t>
     2fc:	83 30       	cpi	r24, 0x03	; 3
     2fe:	31 f4       	brne	.+12     	; 0x30c <__vector_1+0x86>
		peep ++;
     300:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <peep>
     304:	8f 5f       	subi	r24, 0xFF	; 255
     306:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <peep>
		bpm_min++;
	}else if(flag_t == 7){
		sat_min++;
	}
	
}
     30a:	4e c0       	rjmp	.+156    	; 0x3a8 <__vector_1+0x122>
		taxa_oxig = taxa_oxig + 10;
		taxa_oxig = (taxa_oxig > 100) ? 100 : taxa_oxig;
		animar_oxig(taxa_oxig);
	}else if(flag_t == 3){
		peep ++;
	}else if((flag_t == 4) && (flag_confvcv == 1)){
     30c:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <flag_t>
     310:	84 30       	cpi	r24, 0x04	; 4
     312:	89 f4       	brne	.+34     	; 0x336 <__vector_1+0xb0>
     314:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <flag_confvcv>
     318:	81 30       	cpi	r24, 0x01	; 1
     31a:	69 f4       	brne	.+26     	; 0x336 <__vector_1+0xb0>
		volume_ar++;
     31c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <volume_ar>
     320:	8f 5f       	subi	r24, 0xFF	; 255
     322:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <volume_ar>
		volume_ar = (volume_ar > 8) ? 8 : volume_ar;
     326:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <volume_ar>
     32a:	89 30       	cpi	r24, 0x09	; 9
     32c:	08 f0       	brcs	.+2      	; 0x330 <__vector_1+0xaa>
     32e:	88 e0       	ldi	r24, 0x08	; 8
     330:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <volume_ar>
     334:	39 c0       	rjmp	.+114    	; 0x3a8 <__vector_1+0x122>
	}else if((flag_t == 4) && (flag_confpcv == 1)){
     336:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <flag_t>
     33a:	84 30       	cpi	r24, 0x04	; 4
     33c:	b9 f4       	brne	.+46     	; 0x36c <__vector_1+0xe6>
     33e:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <flag_confpcv>
     342:	81 30       	cpi	r24, 0x01	; 1
     344:	99 f4       	brne	.+38     	; 0x36c <__vector_1+0xe6>
		dpressao++;
     346:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <dpressao>
     34a:	8f 5f       	subi	r24, 0xFF	; 255
     34c:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <dpressao>
		if(volume_ar > 1){
     350:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <volume_ar>
     354:	82 30       	cpi	r24, 0x02	; 2
     356:	30 f0       	brcs	.+12     	; 0x364 <__vector_1+0xde>
			volume_ar--;
     358:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <volume_ar>
     35c:	81 50       	subi	r24, 0x01	; 1
     35e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <volume_ar>
	}else if((flag_t == 4) && (flag_confvcv == 1)){
		volume_ar++;
		volume_ar = (volume_ar > 8) ? 8 : volume_ar;
	}else if((flag_t == 4) && (flag_confpcv == 1)){
		dpressao++;
		if(volume_ar > 1){
     362:	22 c0       	rjmp	.+68     	; 0x3a8 <__vector_1+0x122>
			volume_ar--;
		}else{
			volume_ar = 1;
     364:	81 e0       	ldi	r24, 0x01	; 1
     366:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <volume_ar>
	}else if((flag_t == 4) && (flag_confvcv == 1)){
		volume_ar++;
		volume_ar = (volume_ar > 8) ? 8 : volume_ar;
	}else if((flag_t == 4) && (flag_confpcv == 1)){
		dpressao++;
		if(volume_ar > 1){
     36a:	1e c0       	rjmp	.+60     	; 0x3a8 <__vector_1+0x122>
			volume_ar--;
		}else{
			volume_ar = 1;
		}
	}else if(flag_t == 5){
     36c:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <flag_t>
     370:	85 30       	cpi	r24, 0x05	; 5
     372:	31 f4       	brne	.+12     	; 0x380 <__vector_1+0xfa>
		bpm_max++;
     374:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <bpm_max>
     378:	8f 5f       	subi	r24, 0xFF	; 255
     37a:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <bpm_max>
		bpm_min++;
	}else if(flag_t == 7){
		sat_min++;
	}
	
}
     37e:	14 c0       	rjmp	.+40     	; 0x3a8 <__vector_1+0x122>
		}else{
			volume_ar = 1;
		}
	}else if(flag_t == 5){
		bpm_max++;
	}else if(flag_t == 6){
     380:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <flag_t>
     384:	86 30       	cpi	r24, 0x06	; 6
     386:	31 f4       	brne	.+12     	; 0x394 <__vector_1+0x10e>
		bpm_min++;
     388:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <bpm_min>
     38c:	8f 5f       	subi	r24, 0xFF	; 255
     38e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <bpm_min>
	}else if(flag_t == 7){
		sat_min++;
	}
	
}
     392:	0a c0       	rjmp	.+20     	; 0x3a8 <__vector_1+0x122>
		}
	}else if(flag_t == 5){
		bpm_max++;
	}else if(flag_t == 6){
		bpm_min++;
	}else if(flag_t == 7){
     394:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <flag_t>
     398:	87 30       	cpi	r24, 0x07	; 7
     39a:	31 f4       	brne	.+12     	; 0x3a8 <__vector_1+0x122>
		sat_min++;
     39c:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sat_min>
     3a0:	8f 5f       	subi	r24, 0xFF	; 255
     3a2:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sat_min>
	}
	
}
     3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <__vector_1+0x122>
     3a8:	00 00       	nop
     3aa:	df 91       	pop	r29
     3ac:	cf 91       	pop	r28
     3ae:	ff 91       	pop	r31
     3b0:	ef 91       	pop	r30
     3b2:	bf 91       	pop	r27
     3b4:	af 91       	pop	r26
     3b6:	9f 91       	pop	r25
     3b8:	8f 91       	pop	r24
     3ba:	7f 91       	pop	r23
     3bc:	6f 91       	pop	r22
     3be:	5f 91       	pop	r21
     3c0:	4f 91       	pop	r20
     3c2:	3f 91       	pop	r19
     3c4:	2f 91       	pop	r18
     3c6:	0f 90       	pop	r0
     3c8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     3cc:	0f 90       	pop	r0
     3ce:	1f 90       	pop	r1
     3d0:	18 95       	reti

000003d2 <__vector_2>:
ISR(INT1_vect){//Interrupção externa INT1; -D3
     3d2:	1f 92       	push	r1
     3d4:	0f 92       	push	r0
     3d6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     3da:	0f 92       	push	r0
     3dc:	11 24       	eor	r1, r1
     3de:	2f 93       	push	r18
     3e0:	3f 93       	push	r19
     3e2:	4f 93       	push	r20
     3e4:	5f 93       	push	r21
     3e6:	6f 93       	push	r22
     3e8:	7f 93       	push	r23
     3ea:	8f 93       	push	r24
     3ec:	9f 93       	push	r25
     3ee:	af 93       	push	r26
     3f0:	bf 93       	push	r27
     3f2:	ef 93       	push	r30
     3f4:	ff 93       	push	r31
     3f6:	cf 93       	push	r28
     3f8:	df 93       	push	r29
     3fa:	cd b7       	in	r28, 0x3d	; 61
     3fc:	de b7       	in	r29, 0x3e	; 62
	if((flag_t == 0) || (flag_t == 1)){
     3fe:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <flag_t>
     402:	88 23       	and	r24, r24
     404:	21 f0       	breq	.+8      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
     406:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <flag_t>
     40a:	81 30       	cpi	r24, 0x01	; 1
     40c:	31 f4       	brne	.+12     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
		FreqRespiracao--;
     40e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     412:	81 50       	subi	r24, 0x01	; 1
     414:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     418:	71 c0       	rjmp	.+226    	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
	}else if(flag_t == 2){
     41a:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <flag_t>
     41e:	82 30       	cpi	r24, 0x02	; 2
     420:	a9 f4       	brne	.+42     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
		if(taxa_oxig != 0){
     422:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <__data_end>
     426:	88 23       	and	r24, r24
     428:	51 f0       	breq	.+20     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
			taxa_oxig = taxa_oxig - 10;
     42a:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <__data_end>
     42e:	8a 50       	subi	r24, 0x0A	; 10
     430:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <__data_end>
			animar_oxig(taxa_oxig);
     434:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <__data_end>
     438:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <animar_oxig>
	}else if(flag_t == 6){
		bpm_min--;
	}else if(flag_t == 7){
		sat_min--;
	}	
}
     43c:	5f c0       	rjmp	.+190    	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
	}else if(flag_t == 2){
		if(taxa_oxig != 0){
			taxa_oxig = taxa_oxig - 10;
			animar_oxig(taxa_oxig);
		}else{
			taxa_oxig = 0;
     43e:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <__data_end>
			animar_oxig(taxa_oxig);
     442:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <__data_end>
     446:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <animar_oxig>
	}else if(flag_t == 6){
		bpm_min--;
	}else if(flag_t == 7){
		sat_min--;
	}	
}
     44a:	58 c0       	rjmp	.+176    	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
			animar_oxig(taxa_oxig);
		}else{
			taxa_oxig = 0;
			animar_oxig(taxa_oxig);
		}
	}else if(flag_t == 3){
     44c:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <flag_t>
     450:	83 30       	cpi	r24, 0x03	; 3
     452:	31 f4       	brne	.+12     	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
		peep --;
     454:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <peep>
     458:	81 50       	subi	r24, 0x01	; 1
     45a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <peep>
	}else if(flag_t == 6){
		bpm_min--;
	}else if(flag_t == 7){
		sat_min--;
	}	
}
     45e:	4e c0       	rjmp	.+156    	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
			taxa_oxig = 0;
			animar_oxig(taxa_oxig);
		}
	}else if(flag_t == 3){
		peep --;
	}else if((flag_t == 4) && (flag_confvcv == 1)){
     460:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <flag_t>
     464:	84 30       	cpi	r24, 0x04	; 4
     466:	91 f4       	brne	.+36     	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
     468:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <flag_confvcv>
     46c:	81 30       	cpi	r24, 0x01	; 1
     46e:	71 f4       	brne	.+28     	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
		if(volume_ar > 1){
     470:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <volume_ar>
     474:	82 30       	cpi	r24, 0x02	; 2
     476:	30 f0       	brcs	.+12     	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
			volume_ar--;
     478:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <volume_ar>
     47c:	81 50       	subi	r24, 0x01	; 1
     47e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <volume_ar>
			animar_oxig(taxa_oxig);
		}
	}else if(flag_t == 3){
		peep --;
	}else if((flag_t == 4) && (flag_confvcv == 1)){
		if(volume_ar > 1){
     482:	3c c0       	rjmp	.+120    	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
			volume_ar--;
		}else{
			volume_ar = 1;
     484:	81 e0       	ldi	r24, 0x01	; 1
     486:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <volume_ar>
			animar_oxig(taxa_oxig);
		}
	}else if(flag_t == 3){
		peep --;
	}else if((flag_t == 4) && (flag_confvcv == 1)){
		if(volume_ar > 1){
     48a:	38 c0       	rjmp	.+112    	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
			volume_ar--;
		}else{
			volume_ar = 1;
		}
	}else if((flag_t == 4) && (flag_confpcv == 1)){
     48c:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <flag_t>
     490:	84 30       	cpi	r24, 0x04	; 4
     492:	b1 f4       	brne	.+44     	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
     494:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <flag_confpcv>
     498:	81 30       	cpi	r24, 0x01	; 1
     49a:	91 f4       	brne	.+36     	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
		dpressao--;
     49c:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <dpressao>
     4a0:	81 50       	subi	r24, 0x01	; 1
     4a2:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <dpressao>
		volume_ar++;
     4a6:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <volume_ar>
     4aa:	8f 5f       	subi	r24, 0xFF	; 255
     4ac:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <volume_ar>
		volume_ar = (volume_ar > 8) ? 8 : volume_ar;
     4b0:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <volume_ar>
     4b4:	89 30       	cpi	r24, 0x09	; 9
     4b6:	08 f0       	brcs	.+2      	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
     4b8:	88 e0       	ldi	r24, 0x08	; 8
     4ba:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <volume_ar>
     4be:	1e c0       	rjmp	.+60     	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
	}else if(flag_t == 5){
     4c0:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <flag_t>
     4c4:	85 30       	cpi	r24, 0x05	; 5
     4c6:	31 f4       	brne	.+12     	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
		bpm_max--;
     4c8:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <bpm_max>
     4cc:	81 50       	subi	r24, 0x01	; 1
     4ce:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <bpm_max>
	}else if(flag_t == 6){
		bpm_min--;
	}else if(flag_t == 7){
		sat_min--;
	}	
}
     4d2:	14 c0       	rjmp	.+40     	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
		dpressao--;
		volume_ar++;
		volume_ar = (volume_ar > 8) ? 8 : volume_ar;
	}else if(flag_t == 5){
		bpm_max--;
	}else if(flag_t == 6){
     4d4:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <flag_t>
     4d8:	86 30       	cpi	r24, 0x06	; 6
     4da:	31 f4       	brne	.+12     	; 0x4e8 <__EEPROM_REGION_LENGTH__+0xe8>
		bpm_min--;
     4dc:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <bpm_min>
     4e0:	81 50       	subi	r24, 0x01	; 1
     4e2:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <bpm_min>
	}else if(flag_t == 7){
		sat_min--;
	}	
}
     4e6:	0a c0       	rjmp	.+20     	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
		volume_ar = (volume_ar > 8) ? 8 : volume_ar;
	}else if(flag_t == 5){
		bpm_max--;
	}else if(flag_t == 6){
		bpm_min--;
	}else if(flag_t == 7){
     4e8:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <flag_t>
     4ec:	87 30       	cpi	r24, 0x07	; 7
     4ee:	31 f4       	brne	.+12     	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
		sat_min--;
     4f0:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sat_min>
     4f4:	81 50       	subi	r24, 0x01	; 1
     4f6:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sat_min>
	}	
}
     4fa:	00 c0       	rjmp	.+0      	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
     4fc:	00 00       	nop
     4fe:	df 91       	pop	r29
     500:	cf 91       	pop	r28
     502:	ff 91       	pop	r31
     504:	ef 91       	pop	r30
     506:	bf 91       	pop	r27
     508:	af 91       	pop	r26
     50a:	9f 91       	pop	r25
     50c:	8f 91       	pop	r24
     50e:	7f 91       	pop	r23
     510:	6f 91       	pop	r22
     512:	5f 91       	pop	r21
     514:	4f 91       	pop	r20
     516:	3f 91       	pop	r19
     518:	2f 91       	pop	r18
     51a:	0f 90       	pop	r0
     51c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     520:	0f 90       	pop	r0
     522:	1f 90       	pop	r1
     524:	18 95       	reti

00000526 <__vector_14>:

ISR(TIMER0_COMPA_vect){//interrupção do TC0 a cada 1ms
     526:	1f 92       	push	r1
     528:	0f 92       	push	r0
     52a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     52e:	0f 92       	push	r0
     530:	11 24       	eor	r1, r1
     532:	2f 93       	push	r18
     534:	3f 93       	push	r19
     536:	4f 93       	push	r20
     538:	5f 93       	push	r21
     53a:	6f 93       	push	r22
     53c:	7f 93       	push	r23
     53e:	8f 93       	push	r24
     540:	9f 93       	push	r25
     542:	af 93       	push	r26
     544:	bf 93       	push	r27
     546:	ef 93       	push	r30
     548:	ff 93       	push	r31
     54a:	cf 93       	push	r28
     54c:	df 93       	push	r29
     54e:	cd b7       	in	r28, 0x3d	; 61
     550:	de b7       	in	r29, 0x3e	; 62
	Tempo_ms++;
     552:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <Tempo_ms>
     556:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <Tempo_ms+0x1>
     55a:	a0 91 42 02 	lds	r26, 0x0242	; 0x800242 <Tempo_ms+0x2>
     55e:	b0 91 43 02 	lds	r27, 0x0243	; 0x800243 <Tempo_ms+0x3>
     562:	01 96       	adiw	r24, 0x01	; 1
     564:	a1 1d       	adc	r26, r1
     566:	b1 1d       	adc	r27, r1
     568:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <Tempo_ms>
     56c:	90 93 41 02 	sts	0x0241, r25	; 0x800241 <Tempo_ms+0x1>
     570:	a0 93 42 02 	sts	0x0242, r26	; 0x800242 <Tempo_ms+0x2>
     574:	b0 93 43 02 	sts	0x0243, r27	; 0x800243 <Tempo_ms+0x3>
	Tempo_refer = 60000/(FreqRespiracao*16);
     578:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     57c:	88 2f       	mov	r24, r24
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	82 95       	swap	r24
     582:	92 95       	swap	r25
     584:	90 7f       	andi	r25, 0xF0	; 240
     586:	98 27       	eor	r25, r24
     588:	80 7f       	andi	r24, 0xF0	; 240
     58a:	98 27       	eor	r25, r24
     58c:	9c 01       	movw	r18, r24
     58e:	99 0f       	add	r25, r25
     590:	44 0b       	sbc	r20, r20
     592:	55 0b       	sbc	r21, r21
     594:	80 e6       	ldi	r24, 0x60	; 96
     596:	9a ee       	ldi	r25, 0xEA	; 234
     598:	a0 e0       	ldi	r26, 0x00	; 0
     59a:	b0 e0       	ldi	r27, 0x00	; 0
     59c:	bc 01       	movw	r22, r24
     59e:	cd 01       	movw	r24, r26
     5a0:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <__divmodsi4>
     5a4:	da 01       	movw	r26, r20
     5a6:	c9 01       	movw	r24, r18
     5a8:	90 93 51 02 	sts	0x0251, r25	; 0x800251 <Tempo_refer+0x1>
     5ac:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <Tempo_refer>
	if(Tempo_ms % Tempo_refer == 0){        
     5b0:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <Tempo_ms>
     5b4:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <Tempo_ms+0x1>
     5b8:	a0 91 42 02 	lds	r26, 0x0242	; 0x800242 <Tempo_ms+0x2>
     5bc:	b0 91 43 02 	lds	r27, 0x0243	; 0x800243 <Tempo_ms+0x3>
     5c0:	20 91 50 02 	lds	r18, 0x0250	; 0x800250 <Tempo_refer>
     5c4:	30 91 51 02 	lds	r19, 0x0251	; 0x800251 <Tempo_refer+0x1>
     5c8:	99 01       	movw	r18, r18
     5ca:	40 e0       	ldi	r20, 0x00	; 0
     5cc:	50 e0       	ldi	r21, 0x00	; 0
     5ce:	bc 01       	movw	r22, r24
     5d0:	cd 01       	movw	r24, r26
     5d2:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__udivmodsi4>
     5d6:	dc 01       	movw	r26, r24
     5d8:	cb 01       	movw	r24, r22
     5da:	89 2b       	or	r24, r25
     5dc:	8a 2b       	or	r24, r26
     5de:	8b 2b       	or	r24, r27
     5e0:	21 f4       	brne	.+8      	; 0x5ea <__vector_14+0xc4>
		animar_motor(FreqRespiracao);
     5e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     5e6:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <animar_motor>
	}
	if(!(Tempo_ms % 150)){
     5ea:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <Tempo_ms>
     5ee:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <Tempo_ms+0x1>
     5f2:	a0 91 42 02 	lds	r26, 0x0242	; 0x800242 <Tempo_ms+0x2>
     5f6:	b0 91 43 02 	lds	r27, 0x0243	; 0x800243 <Tempo_ms+0x3>
     5fa:	26 e9       	ldi	r18, 0x96	; 150
     5fc:	30 e0       	ldi	r19, 0x00	; 0
     5fe:	40 e0       	ldi	r20, 0x00	; 0
     600:	50 e0       	ldi	r21, 0x00	; 0
     602:	bc 01       	movw	r22, r24
     604:	cd 01       	movw	r24, r26
     606:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__udivmodsi4>
     60a:	dc 01       	movw	r26, r24
     60c:	cb 01       	movw	r24, r22
     60e:	89 2b       	or	r24, r25
     610:	8a 2b       	or	r24, r26
     612:	8b 2b       	or	r24, r27
     614:	19 f4       	brne	.+6      	; 0x61c <__vector_14+0xf6>
		flags_150ms = 1;
     616:	81 e0       	ldi	r24, 0x01	; 1
     618:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <flags_150ms>
	}
	if(!(Tempo_ms % 200)){
     61c:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <Tempo_ms>
     620:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <Tempo_ms+0x1>
     624:	a0 91 42 02 	lds	r26, 0x0242	; 0x800242 <Tempo_ms+0x2>
     628:	b0 91 43 02 	lds	r27, 0x0243	; 0x800243 <Tempo_ms+0x3>
     62c:	28 ec       	ldi	r18, 0xC8	; 200
     62e:	30 e0       	ldi	r19, 0x00	; 0
     630:	40 e0       	ldi	r20, 0x00	; 0
     632:	50 e0       	ldi	r21, 0x00	; 0
     634:	bc 01       	movw	r22, r24
     636:	cd 01       	movw	r24, r26
     638:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__udivmodsi4>
     63c:	dc 01       	movw	r26, r24
     63e:	cb 01       	movw	r24, r22
     640:	89 2b       	or	r24, r25
     642:	8a 2b       	or	r24, r26
     644:	8b 2b       	or	r24, r27
     646:	19 f4       	brne	.+6      	; 0x64e <__vector_14+0x128>
		flags_200ms = 1;
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <flags_200ms>
	}
}
     64e:	00 00       	nop
     650:	df 91       	pop	r29
     652:	cf 91       	pop	r28
     654:	ff 91       	pop	r31
     656:	ef 91       	pop	r30
     658:	bf 91       	pop	r27
     65a:	af 91       	pop	r26
     65c:	9f 91       	pop	r25
     65e:	8f 91       	pop	r24
     660:	7f 91       	pop	r23
     662:	6f 91       	pop	r22
     664:	5f 91       	pop	r21
     666:	4f 91       	pop	r20
     668:	3f 91       	pop	r19
     66a:	2f 91       	pop	r18
     66c:	0f 90       	pop	r0
     66e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     672:	0f 90       	pop	r0
     674:	1f 90       	pop	r1
     676:	18 95       	reti

00000678 <__vector_5>:

ISR(PCINT2_vect){
     678:	1f 92       	push	r1
     67a:	0f 92       	push	r0
     67c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     680:	0f 92       	push	r0
     682:	11 24       	eor	r1, r1
     684:	2f 93       	push	r18
     686:	3f 93       	push	r19
     688:	4f 93       	push	r20
     68a:	5f 93       	push	r21
     68c:	6f 93       	push	r22
     68e:	7f 93       	push	r23
     690:	8f 93       	push	r24
     692:	9f 93       	push	r25
     694:	af 93       	push	r26
     696:	bf 93       	push	r27
     698:	ef 93       	push	r30
     69a:	ff 93       	push	r31
     69c:	cf 93       	push	r28
     69e:	df 93       	push	r29
     6a0:	cd b7       	in	r28, 0x3d	; 61
     6a2:	de b7       	in	r29, 0x3e	; 62
	if((PIND & 0b01000000) == 0){
     6a4:	89 e2       	ldi	r24, 0x29	; 41
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	fc 01       	movw	r30, r24
     6aa:	80 81       	ld	r24, Z
     6ac:	88 2f       	mov	r24, r24
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	80 74       	andi	r24, 0x40	; 64
     6b2:	99 27       	eor	r25, r25
     6b4:	89 2b       	or	r24, r25
     6b6:	a9 f4       	brne	.+42     	; 0x6e2 <__vector_5+0x6a>
		if(flag_t == 0){
     6b8:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <flag_t>
     6bc:	88 23       	and	r24, r24
     6be:	31 f4       	brne	.+12     	; 0x6cc <__vector_5+0x54>
			flag_confpcv = 1;
     6c0:	81 e0       	ldi	r24, 0x01	; 1
     6c2:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <flag_confpcv>
			flag_confvcv = 0;
     6c6:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <flag_confvcv>
	}else if((PIND & 0b00010000) == 0){
			f_tempo = Tempo_ms;
			FreqCard = (60000/(f_tempo - i_tempo));//Frequência em bpm
			tempo = 0;
	}
}
     6ca:	72 c0       	rjmp	.+228    	; 0x7b0 <__vector_5+0x138>
ISR(PCINT2_vect){
	if((PIND & 0b01000000) == 0){
		if(flag_t == 0){
			flag_confpcv = 1;
			flag_confvcv = 0;
		}else if(flag_t == 1){
     6cc:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <flag_t>
     6d0:	81 30       	cpi	r24, 0x01	; 1
     6d2:	09 f0       	breq	.+2      	; 0x6d6 <__vector_5+0x5e>
     6d4:	6d c0       	rjmp	.+218    	; 0x7b0 <__vector_5+0x138>
			flag_confpcv = 0;
     6d6:	10 92 87 02 	sts	0x0287, r1	; 0x800287 <flag_confpcv>
			flag_confvcv = 1;
     6da:	81 e0       	ldi	r24, 0x01	; 1
     6dc:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <flag_confvcv>
	}else if((PIND & 0b00010000) == 0){
			f_tempo = Tempo_ms;
			FreqCard = (60000/(f_tempo - i_tempo));//Frequência em bpm
			tempo = 0;
	}
}
     6e0:	67 c0       	rjmp	.+206    	; 0x7b0 <__vector_5+0x138>
			flag_confvcv = 0;
		}else if(flag_t == 1){
			flag_confpcv = 0;
			flag_confvcv = 1;
		}
	}else if(tempo == 0){
     6e2:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <tempo>
     6e6:	88 23       	and	r24, r24
     6e8:	09 f5       	brne	.+66     	; 0x72c <__vector_5+0xb4>
		if((PIND & 0b00010000) == 0){
     6ea:	89 e2       	ldi	r24, 0x29	; 41
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	fc 01       	movw	r30, r24
     6f0:	80 81       	ld	r24, Z
     6f2:	88 2f       	mov	r24, r24
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	80 71       	andi	r24, 0x10	; 16
     6f8:	99 27       	eor	r25, r25
     6fa:	89 2b       	or	r24, r25
     6fc:	09 f0       	breq	.+2      	; 0x700 <__vector_5+0x88>
     6fe:	58 c0       	rjmp	.+176    	; 0x7b0 <__vector_5+0x138>
			i_tempo = Tempo_ms;
     700:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <Tempo_ms>
     704:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <Tempo_ms+0x1>
     708:	a0 91 42 02 	lds	r26, 0x0242	; 0x800242 <Tempo_ms+0x2>
     70c:	b0 91 43 02 	lds	r27, 0x0243	; 0x800243 <Tempo_ms+0x3>
     710:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <i_tempo>
     714:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <i_tempo+0x1>
     718:	a0 93 4a 02 	sts	0x024A, r26	; 0x80024a <i_tempo+0x2>
     71c:	b0 93 4b 02 	sts	0x024B, r27	; 0x80024b <i_tempo+0x3>
			tempo++;
     720:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <tempo>
     724:	8f 5f       	subi	r24, 0xFF	; 255
     726:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <tempo>
	}else if((PIND & 0b00010000) == 0){
			f_tempo = Tempo_ms;
			FreqCard = (60000/(f_tempo - i_tempo));//Frequência em bpm
			tempo = 0;
	}
}
     72a:	42 c0       	rjmp	.+132    	; 0x7b0 <__vector_5+0x138>
	}else if(tempo == 0){
		if((PIND & 0b00010000) == 0){
			i_tempo = Tempo_ms;
			tempo++;
		}
	}else if((PIND & 0b00010000) == 0){
     72c:	89 e2       	ldi	r24, 0x29	; 41
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	fc 01       	movw	r30, r24
     732:	80 81       	ld	r24, Z
     734:	88 2f       	mov	r24, r24
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	80 71       	andi	r24, 0x10	; 16
     73a:	99 27       	eor	r25, r25
     73c:	89 2b       	or	r24, r25
     73e:	c1 f5       	brne	.+112    	; 0x7b0 <__vector_5+0x138>
			f_tempo = Tempo_ms;
     740:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <Tempo_ms>
     744:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <Tempo_ms+0x1>
     748:	a0 91 42 02 	lds	r26, 0x0242	; 0x800242 <Tempo_ms+0x2>
     74c:	b0 91 43 02 	lds	r27, 0x0243	; 0x800243 <Tempo_ms+0x3>
     750:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <f_tempo>
     754:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <f_tempo+0x1>
     758:	a0 93 4e 02 	sts	0x024E, r26	; 0x80024e <f_tempo+0x2>
     75c:	b0 93 4f 02 	sts	0x024F, r27	; 0x80024f <f_tempo+0x3>
			FreqCard = (60000/(f_tempo - i_tempo));//Frequência em bpm
     760:	20 91 4c 02 	lds	r18, 0x024C	; 0x80024c <f_tempo>
     764:	30 91 4d 02 	lds	r19, 0x024D	; 0x80024d <f_tempo+0x1>
     768:	40 91 4e 02 	lds	r20, 0x024E	; 0x80024e <f_tempo+0x2>
     76c:	50 91 4f 02 	lds	r21, 0x024F	; 0x80024f <f_tempo+0x3>
     770:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <i_tempo>
     774:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <i_tempo+0x1>
     778:	a0 91 4a 02 	lds	r26, 0x024A	; 0x80024a <i_tempo+0x2>
     77c:	b0 91 4b 02 	lds	r27, 0x024B	; 0x80024b <i_tempo+0x3>
     780:	28 1b       	sub	r18, r24
     782:	39 0b       	sbc	r19, r25
     784:	4a 0b       	sbc	r20, r26
     786:	5b 0b       	sbc	r21, r27
     788:	80 e6       	ldi	r24, 0x60	; 96
     78a:	9a ee       	ldi	r25, 0xEA	; 234
     78c:	a0 e0       	ldi	r26, 0x00	; 0
     78e:	b0 e0       	ldi	r27, 0x00	; 0
     790:	bc 01       	movw	r22, r24
     792:	cd 01       	movw	r24, r26
     794:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__udivmodsi4>
     798:	da 01       	movw	r26, r20
     79a:	c9 01       	movw	r24, r18
     79c:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <FreqCard>
     7a0:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <FreqCard+0x1>
     7a4:	a0 93 46 02 	sts	0x0246, r26	; 0x800246 <FreqCard+0x2>
     7a8:	b0 93 47 02 	sts	0x0247, r27	; 0x800247 <FreqCard+0x3>
			tempo = 0;
     7ac:	10 92 3f 02 	sts	0x023F, r1	; 0x80023f <tempo>
	}
}
     7b0:	00 00       	nop
     7b2:	df 91       	pop	r29
     7b4:	cf 91       	pop	r28
     7b6:	ff 91       	pop	r31
     7b8:	ef 91       	pop	r30
     7ba:	bf 91       	pop	r27
     7bc:	af 91       	pop	r26
     7be:	9f 91       	pop	r25
     7c0:	8f 91       	pop	r24
     7c2:	7f 91       	pop	r23
     7c4:	6f 91       	pop	r22
     7c6:	5f 91       	pop	r21
     7c8:	4f 91       	pop	r20
     7ca:	3f 91       	pop	r19
     7cc:	2f 91       	pop	r18
     7ce:	0f 90       	pop	r0
     7d0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     7d4:	0f 90       	pop	r0
     7d6:	1f 90       	pop	r1
     7d8:	18 95       	reti

000007da <__vector_3>:

ISR(PCINT0_vect){
     7da:	1f 92       	push	r1
     7dc:	0f 92       	push	r0
     7de:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     7e2:	0f 92       	push	r0
     7e4:	11 24       	eor	r1, r1
     7e6:	8f 93       	push	r24
     7e8:	9f 93       	push	r25
     7ea:	ef 93       	push	r30
     7ec:	ff 93       	push	r31
     7ee:	cf 93       	push	r28
     7f0:	df 93       	push	r29
     7f2:	cd b7       	in	r28, 0x3d	; 61
     7f4:	de b7       	in	r29, 0x3e	; 62
	
	static uint8_t sel = 0;
	if((PINB & 0b01000000) == 0){
     7f6:	83 e2       	ldi	r24, 0x23	; 35
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	fc 01       	movw	r30, r24
     7fc:	80 81       	ld	r24, Z
     7fe:	88 2f       	mov	r24, r24
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	80 74       	andi	r24, 0x40	; 64
     804:	99 27       	eor	r25, r25
     806:	89 2b       	or	r24, r25
     808:	29 f4       	brne	.+10     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
		sel++;
     80a:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <sel.2356>
     80e:	8f 5f       	subi	r24, 0xFF	; 255
     810:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <sel.2356>
	} 
	if(sel > 8){
     814:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <sel.2356>
     818:	89 30       	cpi	r24, 0x09	; 9
     81a:	78 f0       	brcs	.+30     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
		sel = 0;
     81c:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <sel.2356>
		flag_t = sel;
     820:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <sel.2356>
     824:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <flag_t>
		flag_confpcv = sel;
     828:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <sel.2356>
     82c:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <flag_confpcv>
		flag_confvcv = sel;
     830:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <sel.2356>
     834:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <flag_confvcv>
	}else{
		flag_t = sel;
	}
	
}
     838:	04 c0       	rjmp	.+8      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
		sel = 0;
		flag_t = sel;
		flag_confpcv = sel;
		flag_confvcv = sel;
	}else{
		flag_t = sel;
     83a:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <sel.2356>
     83e:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <flag_t>
	}
	
}
     842:	00 00       	nop
     844:	df 91       	pop	r29
     846:	cf 91       	pop	r28
     848:	ff 91       	pop	r31
     84a:	ef 91       	pop	r30
     84c:	9f 91       	pop	r25
     84e:	8f 91       	pop	r24
     850:	0f 90       	pop	r0
     852:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     856:	0f 90       	pop	r0
     858:	1f 90       	pop	r1
     85a:	18 95       	reti

0000085c <__vector_21>:

ISR(ADC_vect){//Quando uma conversão é finalizada, é disparado uma interrupção.
     85c:	1f 92       	push	r1
     85e:	0f 92       	push	r0
     860:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     864:	0f 92       	push	r0
     866:	11 24       	eor	r1, r1
     868:	8f 93       	push	r24
     86a:	9f 93       	push	r25
     86c:	ef 93       	push	r30
     86e:	ff 93       	push	r31
     870:	cf 93       	push	r28
     872:	df 93       	push	r29
     874:	cd b7       	in	r28, 0x3d	; 61
     876:	de b7       	in	r29, 0x3e	; 62
	leitura_ADC = ADC;//Cópia do registrador para a variável
     878:	88 e7       	ldi	r24, 0x78	; 120
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	fc 01       	movw	r30, r24
     87e:	80 81       	ld	r24, Z
     880:	91 81       	ldd	r25, Z+1	; 0x01
     882:	90 93 84 02 	sts	0x0284, r25	; 0x800284 <leitura_ADC+0x1>
     886:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <leitura_ADC>
}
     88a:	00 00       	nop
     88c:	df 91       	pop	r29
     88e:	cf 91       	pop	r28
     890:	ff 91       	pop	r31
     892:	ef 91       	pop	r30
     894:	9f 91       	pop	r25
     896:	8f 91       	pop	r24
     898:	0f 90       	pop	r0
     89a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     89e:	0f 90       	pop	r0
     8a0:	1f 90       	pop	r1
     8a2:	18 95       	reti

000008a4 <__vector_18>:

ISR(USART_RX_vect){
     8a4:	1f 92       	push	r1
     8a6:	0f 92       	push	r0
     8a8:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     8ac:	0f 92       	push	r0
     8ae:	11 24       	eor	r1, r1
     8b0:	2f 93       	push	r18
     8b2:	3f 93       	push	r19
     8b4:	4f 93       	push	r20
     8b6:	5f 93       	push	r21
     8b8:	6f 93       	push	r22
     8ba:	7f 93       	push	r23
     8bc:	8f 93       	push	r24
     8be:	9f 93       	push	r25
     8c0:	af 93       	push	r26
     8c2:	bf 93       	push	r27
     8c4:	ef 93       	push	r30
     8c6:	ff 93       	push	r31
     8c8:	cf 93       	push	r28
     8ca:	df 93       	push	r29
     8cc:	cd b7       	in	r28, 0x3d	; 61
     8ce:	de b7       	in	r29, 0x3e	; 62
	static char comunica[8] = "        ";
	static char eficienciar = ' ';
	recebido = UDR0;
     8d0:	86 ec       	ldi	r24, 0xC6	; 198
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	fc 01       	movw	r30, r24
     8d6:	80 81       	ld	r24, Z
     8d8:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <recebido>
	static uint8_t estado;
	estado = verifica(comunica,recebido);
     8dc:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <recebido>
     8e0:	68 2f       	mov	r22, r24
     8e2:	82 e2       	ldi	r24, 0x22	; 34
     8e4:	91 e0       	ldi	r25, 0x01	; 1
     8e6:	0e 94 92 04 	call	0x924	; 0x924 <verifica>
     8ea:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <estado.2369>
	analise_estado(estado, comunica);
     8ee:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <estado.2369>
     8f2:	62 e2       	ldi	r22, 0x22	; 34
     8f4:	71 e0       	ldi	r23, 0x01	; 1
     8f6:	0e 94 ad 06 	call	0xd5a	; 0xd5a <analise_estado>
}
     8fa:	00 00       	nop
     8fc:	df 91       	pop	r29
     8fe:	cf 91       	pop	r28
     900:	ff 91       	pop	r31
     902:	ef 91       	pop	r30
     904:	bf 91       	pop	r27
     906:	af 91       	pop	r26
     908:	9f 91       	pop	r25
     90a:	8f 91       	pop	r24
     90c:	7f 91       	pop	r23
     90e:	6f 91       	pop	r22
     910:	5f 91       	pop	r21
     912:	4f 91       	pop	r20
     914:	3f 91       	pop	r19
     916:	2f 91       	pop	r18
     918:	0f 90       	pop	r0
     91a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     91e:	0f 90       	pop	r0
     920:	1f 90       	pop	r1
     922:	18 95       	reti

00000924 <verifica>:

uint8_t verifica(char *comunicar, char recebido){
     924:	cf 93       	push	r28
     926:	df 93       	push	r29
     928:	cd b7       	in	r28, 0x3d	; 61
     92a:	de b7       	in	r29, 0x3e	; 62
     92c:	6a 97       	sbiw	r28, 0x1a	; 26
     92e:	0f b6       	in	r0, 0x3f	; 63
     930:	f8 94       	cli
     932:	de bf       	out	0x3e, r29	; 62
     934:	0f be       	out	0x3f, r0	; 63
     936:	cd bf       	out	0x3d, r28	; 61
     938:	99 8f       	std	Y+25, r25	; 0x19
     93a:	88 8f       	std	Y+24, r24	; 0x18
     93c:	6a 8f       	std	Y+26, r22	; 0x1a
	static uint8_t estado_atual = 0;
	static uint8_t proximo_estado = 0;
	static uint8_t i;
	char numero[11] = "0123456789";
     93e:	8b e0       	ldi	r24, 0x0B	; 11
     940:	ea e2       	ldi	r30, 0x2A	; 42
     942:	f1 e0       	ldi	r31, 0x01	; 1
     944:	de 01       	movw	r26, r28
     946:	1d 96       	adiw	r26, 0x0d	; 13
     948:	01 90       	ld	r0, Z+
     94a:	0d 92       	st	X+, r0
     94c:	8a 95       	dec	r24
     94e:	e1 f7       	brne	.-8      	; 0x948 <verifica+0x24>
	estado_atual = proximo_estado;
     950:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <proximo_estado.2375>
     954:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <estado_atual.2374>
	
	if(estado_atual == inicial){
     958:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <estado_atual.2374>
     95c:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <inicial>
     960:	98 17       	cp	r25, r24
     962:	79 f4       	brne	.+30     	; 0x982 <verifica+0x5e>
		if(recebido == ';'){
     964:	8a 8d       	ldd	r24, Y+26	; 0x1a
     966:	8b 33       	cpi	r24, 0x3B	; 59
     968:	29 f4       	brne	.+10     	; 0x974 <verifica+0x50>
			proximo_estado = H1;
     96a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <H1>
     96e:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <proximo_estado.2375>
     972:	04 c0       	rjmp	.+8      	; 0x97c <verifica+0x58>
		}else{
			proximo_estado = erro;
     974:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <erro>
     978:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <proximo_estado.2375>
		}
		i = 0;
     97c:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <i.2376>
     980:	e1 c1       	rjmp	.+962    	; 0xd44 <verifica+0x420>
	}else if(estado_atual == H1){
     982:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <estado_atual.2374>
     986:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <H1>
     98a:	98 17       	cp	r25, r24
     98c:	89 f5       	brne	.+98     	; 0x9f0 <verifica+0xcc>
		
		proximo_estado = erro;
     98e:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <erro>
     992:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <proximo_estado.2375>
		for(int j = 0;j < 10;j++){
     996:	1a 82       	std	Y+2, r1	; 0x02
     998:	19 82       	std	Y+1, r1	; 0x01
     99a:	15 c0       	rjmp	.+42     	; 0x9c6 <verifica+0xa2>
			if(recebido == numero[j]){
     99c:	9e 01       	movw	r18, r28
     99e:	23 5f       	subi	r18, 0xF3	; 243
     9a0:	3f 4f       	sbci	r19, 0xFF	; 255
     9a2:	89 81       	ldd	r24, Y+1	; 0x01
     9a4:	9a 81       	ldd	r25, Y+2	; 0x02
     9a6:	82 0f       	add	r24, r18
     9a8:	93 1f       	adc	r25, r19
     9aa:	fc 01       	movw	r30, r24
     9ac:	90 81       	ld	r25, Z
     9ae:	8a 8d       	ldd	r24, Y+26	; 0x1a
     9b0:	98 17       	cp	r25, r24
     9b2:	21 f4       	brne	.+8      	; 0x9bc <verifica+0x98>
				proximo_estado = H2;
     9b4:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <H2>
     9b8:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <proximo_estado.2375>
		}
		i = 0;
	}else if(estado_atual == H1){
		
		proximo_estado = erro;
		for(int j = 0;j < 10;j++){
     9bc:	89 81       	ldd	r24, Y+1	; 0x01
     9be:	9a 81       	ldd	r25, Y+2	; 0x02
     9c0:	01 96       	adiw	r24, 0x01	; 1
     9c2:	9a 83       	std	Y+2, r25	; 0x02
     9c4:	89 83       	std	Y+1, r24	; 0x01
     9c6:	89 81       	ldd	r24, Y+1	; 0x01
     9c8:	9a 81       	ldd	r25, Y+2	; 0x02
     9ca:	0a 97       	sbiw	r24, 0x0a	; 10
     9cc:	3c f3       	brlt	.-50     	; 0x99c <verifica+0x78>
			if(recebido == numero[j]){
				proximo_estado = H2;
			}
		}

		comunicar[i] = recebido;
     9ce:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <i.2376>
     9d2:	88 2f       	mov	r24, r24
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	28 8d       	ldd	r18, Y+24	; 0x18
     9d8:	39 8d       	ldd	r19, Y+25	; 0x19
     9da:	82 0f       	add	r24, r18
     9dc:	93 1f       	adc	r25, r19
     9de:	2a 8d       	ldd	r18, Y+26	; 0x1a
     9e0:	fc 01       	movw	r30, r24
     9e2:	20 83       	st	Z, r18
		i++;
     9e4:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <i.2376>
     9e8:	8f 5f       	subi	r24, 0xFF	; 255
     9ea:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <i.2376>
     9ee:	aa c1       	rjmp	.+852    	; 0xd44 <verifica+0x420>
	}else if(estado_atual == H2){
     9f0:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <estado_atual.2374>
     9f4:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <H2>
     9f8:	98 17       	cp	r25, r24
     9fa:	c9 f5       	brne	.+114    	; 0xa6e <verifica+0x14a>
		
		if(recebido == 'x'){
     9fc:	8a 8d       	ldd	r24, Y+26	; 0x1a
     9fe:	88 37       	cpi	r24, 0x78	; 120
     a00:	29 f4       	brne	.+10     	; 0xa0c <verifica+0xe8>
			proximo_estado = L1;
     a02:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <L1>
     a06:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <proximo_estado.2375>
     a0a:	04 c0       	rjmp	.+8      	; 0xa14 <verifica+0xf0>
		}else{
			proximo_estado = erro;
     a0c:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <erro>
     a10:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <proximo_estado.2375>
		}

		for(int j = 0;j < 10;j++){
     a14:	1c 82       	std	Y+4, r1	; 0x04
     a16:	1b 82       	std	Y+3, r1	; 0x03
     a18:	15 c0       	rjmp	.+42     	; 0xa44 <verifica+0x120>
			if(recebido == numero[j]){
     a1a:	9e 01       	movw	r18, r28
     a1c:	23 5f       	subi	r18, 0xF3	; 243
     a1e:	3f 4f       	sbci	r19, 0xFF	; 255
     a20:	8b 81       	ldd	r24, Y+3	; 0x03
     a22:	9c 81       	ldd	r25, Y+4	; 0x04
     a24:	82 0f       	add	r24, r18
     a26:	93 1f       	adc	r25, r19
     a28:	fc 01       	movw	r30, r24
     a2a:	90 81       	ld	r25, Z
     a2c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     a2e:	98 17       	cp	r25, r24
     a30:	21 f4       	brne	.+8      	; 0xa3a <verifica+0x116>
				proximo_estado = H3;
     a32:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <H3>
     a36:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <proximo_estado.2375>
			proximo_estado = L1;
		}else{
			proximo_estado = erro;
		}

		for(int j = 0;j < 10;j++){
     a3a:	8b 81       	ldd	r24, Y+3	; 0x03
     a3c:	9c 81       	ldd	r25, Y+4	; 0x04
     a3e:	01 96       	adiw	r24, 0x01	; 1
     a40:	9c 83       	std	Y+4, r25	; 0x04
     a42:	8b 83       	std	Y+3, r24	; 0x03
     a44:	8b 81       	ldd	r24, Y+3	; 0x03
     a46:	9c 81       	ldd	r25, Y+4	; 0x04
     a48:	0a 97       	sbiw	r24, 0x0a	; 10
     a4a:	3c f3       	brlt	.-50     	; 0xa1a <verifica+0xf6>
			if(recebido == numero[j]){
				proximo_estado = H3;
			}
		}

		comunicar[i] = recebido;
     a4c:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <i.2376>
     a50:	88 2f       	mov	r24, r24
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	28 8d       	ldd	r18, Y+24	; 0x18
     a56:	39 8d       	ldd	r19, Y+25	; 0x19
     a58:	82 0f       	add	r24, r18
     a5a:	93 1f       	adc	r25, r19
     a5c:	2a 8d       	ldd	r18, Y+26	; 0x1a
     a5e:	fc 01       	movw	r30, r24
     a60:	20 83       	st	Z, r18
		i++;
     a62:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <i.2376>
     a66:	8f 5f       	subi	r24, 0xFF	; 255
     a68:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <i.2376>
     a6c:	6b c1       	rjmp	.+726    	; 0xd44 <verifica+0x420>
	}else if(estado_atual == H3){
     a6e:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <estado_atual.2374>
     a72:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <H3>
     a76:	98 17       	cp	r25, r24
     a78:	c9 f5       	brne	.+114    	; 0xaec <verifica+0x1c8>
		
		if(recebido == 'x'){
     a7a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     a7c:	88 37       	cpi	r24, 0x78	; 120
     a7e:	29 f4       	brne	.+10     	; 0xa8a <verifica+0x166>
			proximo_estado = L1;
     a80:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <L1>
     a84:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <proximo_estado.2375>
     a88:	04 c0       	rjmp	.+8      	; 0xa92 <verifica+0x16e>
		}else{
			proximo_estado = erro;
     a8a:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <erro>
     a8e:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <proximo_estado.2375>
		}
		
		for(int j = 0;j < 10;j++){
     a92:	1e 82       	std	Y+6, r1	; 0x06
     a94:	1d 82       	std	Y+5, r1	; 0x05
     a96:	15 c0       	rjmp	.+42     	; 0xac2 <verifica+0x19e>
			if(recebido == numero[j]){
     a98:	9e 01       	movw	r18, r28
     a9a:	23 5f       	subi	r18, 0xF3	; 243
     a9c:	3f 4f       	sbci	r19, 0xFF	; 255
     a9e:	8d 81       	ldd	r24, Y+5	; 0x05
     aa0:	9e 81       	ldd	r25, Y+6	; 0x06
     aa2:	82 0f       	add	r24, r18
     aa4:	93 1f       	adc	r25, r19
     aa6:	fc 01       	movw	r30, r24
     aa8:	90 81       	ld	r25, Z
     aaa:	8a 8d       	ldd	r24, Y+26	; 0x1a
     aac:	98 17       	cp	r25, r24
     aae:	21 f4       	brne	.+8      	; 0xab8 <verifica+0x194>
				proximo_estado = X;
     ab0:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <X>
     ab4:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <proximo_estado.2375>
			proximo_estado = L1;
		}else{
			proximo_estado = erro;
		}
		
		for(int j = 0;j < 10;j++){
     ab8:	8d 81       	ldd	r24, Y+5	; 0x05
     aba:	9e 81       	ldd	r25, Y+6	; 0x06
     abc:	01 96       	adiw	r24, 0x01	; 1
     abe:	9e 83       	std	Y+6, r25	; 0x06
     ac0:	8d 83       	std	Y+5, r24	; 0x05
     ac2:	8d 81       	ldd	r24, Y+5	; 0x05
     ac4:	9e 81       	ldd	r25, Y+6	; 0x06
     ac6:	0a 97       	sbiw	r24, 0x0a	; 10
     ac8:	3c f3       	brlt	.-50     	; 0xa98 <verifica+0x174>
			if(recebido == numero[j]){
				proximo_estado = X;
			}
		}
		comunicar[i] = recebido;
     aca:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <i.2376>
     ace:	88 2f       	mov	r24, r24
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	28 8d       	ldd	r18, Y+24	; 0x18
     ad4:	39 8d       	ldd	r19, Y+25	; 0x19
     ad6:	82 0f       	add	r24, r18
     ad8:	93 1f       	adc	r25, r19
     ada:	2a 8d       	ldd	r18, Y+26	; 0x1a
     adc:	fc 01       	movw	r30, r24
     ade:	20 83       	st	Z, r18
		i++;
     ae0:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <i.2376>
     ae4:	8f 5f       	subi	r24, 0xFF	; 255
     ae6:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <i.2376>
     aea:	2c c1       	rjmp	.+600    	; 0xd44 <verifica+0x420>
	}else if(estado_atual == X){
     aec:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <estado_atual.2374>
     af0:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <X>
     af4:	98 17       	cp	r25, r24
     af6:	e9 f4       	brne	.+58     	; 0xb32 <verifica+0x20e>
		if(recebido == 'x'){
     af8:	8a 8d       	ldd	r24, Y+26	; 0x1a
     afa:	88 37       	cpi	r24, 0x78	; 120
     afc:	29 f4       	brne	.+10     	; 0xb08 <verifica+0x1e4>
			proximo_estado = L1;
     afe:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <L1>
     b02:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <proximo_estado.2375>
     b06:	04 c0       	rjmp	.+8      	; 0xb10 <verifica+0x1ec>
		}else{
			proximo_estado = erro;
     b08:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <erro>
     b0c:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <proximo_estado.2375>
		}
		comunicar[i] = recebido;
     b10:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <i.2376>
     b14:	88 2f       	mov	r24, r24
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	28 8d       	ldd	r18, Y+24	; 0x18
     b1a:	39 8d       	ldd	r19, Y+25	; 0x19
     b1c:	82 0f       	add	r24, r18
     b1e:	93 1f       	adc	r25, r19
     b20:	2a 8d       	ldd	r18, Y+26	; 0x1a
     b22:	fc 01       	movw	r30, r24
     b24:	20 83       	st	Z, r18
		i++;
     b26:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <i.2376>
     b2a:	8f 5f       	subi	r24, 0xFF	; 255
     b2c:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <i.2376>
     b30:	09 c1       	rjmp	.+530    	; 0xd44 <verifica+0x420>
	}else if(estado_atual == L1){
     b32:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <estado_atual.2374>
     b36:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <L1>
     b3a:	98 17       	cp	r25, r24
     b3c:	89 f5       	brne	.+98     	; 0xba0 <verifica+0x27c>
		proximo_estado = erro;
     b3e:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <erro>
     b42:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <proximo_estado.2375>
		
		for(int j = 0;j < 10;j++){
     b46:	18 86       	std	Y+8, r1	; 0x08
     b48:	1f 82       	std	Y+7, r1	; 0x07
     b4a:	15 c0       	rjmp	.+42     	; 0xb76 <verifica+0x252>
			if(recebido == numero[j]){
     b4c:	9e 01       	movw	r18, r28
     b4e:	23 5f       	subi	r18, 0xF3	; 243
     b50:	3f 4f       	sbci	r19, 0xFF	; 255
     b52:	8f 81       	ldd	r24, Y+7	; 0x07
     b54:	98 85       	ldd	r25, Y+8	; 0x08
     b56:	82 0f       	add	r24, r18
     b58:	93 1f       	adc	r25, r19
     b5a:	fc 01       	movw	r30, r24
     b5c:	90 81       	ld	r25, Z
     b5e:	8a 8d       	ldd	r24, Y+26	; 0x1a
     b60:	98 17       	cp	r25, r24
     b62:	21 f4       	brne	.+8      	; 0xb6c <verifica+0x248>
				proximo_estado = L2;
     b64:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <L2>
     b68:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <proximo_estado.2375>
		comunicar[i] = recebido;
		i++;
	}else if(estado_atual == L1){
		proximo_estado = erro;
		
		for(int j = 0;j < 10;j++){
     b6c:	8f 81       	ldd	r24, Y+7	; 0x07
     b6e:	98 85       	ldd	r25, Y+8	; 0x08
     b70:	01 96       	adiw	r24, 0x01	; 1
     b72:	98 87       	std	Y+8, r25	; 0x08
     b74:	8f 83       	std	Y+7, r24	; 0x07
     b76:	8f 81       	ldd	r24, Y+7	; 0x07
     b78:	98 85       	ldd	r25, Y+8	; 0x08
     b7a:	0a 97       	sbiw	r24, 0x0a	; 10
     b7c:	3c f3       	brlt	.-50     	; 0xb4c <verifica+0x228>
			if(recebido == numero[j]){
				proximo_estado = L2;
			}
		}
		comunicar[i] = recebido;
     b7e:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <i.2376>
     b82:	88 2f       	mov	r24, r24
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	28 8d       	ldd	r18, Y+24	; 0x18
     b88:	39 8d       	ldd	r19, Y+25	; 0x19
     b8a:	82 0f       	add	r24, r18
     b8c:	93 1f       	adc	r25, r19
     b8e:	2a 8d       	ldd	r18, Y+26	; 0x1a
     b90:	fc 01       	movw	r30, r24
     b92:	20 83       	st	Z, r18
		i++;
     b94:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <i.2376>
     b98:	8f 5f       	subi	r24, 0xFF	; 255
     b9a:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <i.2376>
     b9e:	d2 c0       	rjmp	.+420    	; 0xd44 <verifica+0x420>
	}else if(estado_atual == L2){
     ba0:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <estado_atual.2374>
     ba4:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <L2>
     ba8:	98 17       	cp	r25, r24
     baa:	09 f0       	breq	.+2      	; 0xbae <verifica+0x28a>
     bac:	44 c0       	rjmp	.+136    	; 0xc36 <verifica+0x312>
		if(recebido == ':'){
     bae:	8a 8d       	ldd	r24, Y+26	; 0x1a
     bb0:	8a 33       	cpi	r24, 0x3A	; 58
     bb2:	29 f4       	brne	.+10     	; 0xbbe <verifica+0x29a>
			proximo_estado = ponto_ponto;
     bb4:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <ponto_ponto>
     bb8:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <proximo_estado.2375>
     bbc:	04 c0       	rjmp	.+8      	; 0xbc6 <verifica+0x2a2>
		}else{
			proximo_estado = erro;
     bbe:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <erro>
     bc2:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <proximo_estado.2375>
		}
		comunicar[i] = ' ';
     bc6:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <i.2376>
     bca:	88 2f       	mov	r24, r24
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	28 8d       	ldd	r18, Y+24	; 0x18
     bd0:	39 8d       	ldd	r19, Y+25	; 0x19
     bd2:	82 0f       	add	r24, r18
     bd4:	93 1f       	adc	r25, r19
     bd6:	20 e2       	ldi	r18, 0x20	; 32
     bd8:	fc 01       	movw	r30, r24
     bda:	20 83       	st	Z, r18
		
		for(int j = 0;j < 10;j++){
     bdc:	1a 86       	std	Y+10, r1	; 0x0a
     bde:	19 86       	std	Y+9, r1	; 0x09
     be0:	20 c0       	rjmp	.+64     	; 0xc22 <verifica+0x2fe>
			if(recebido == numero[j]){
     be2:	9e 01       	movw	r18, r28
     be4:	23 5f       	subi	r18, 0xF3	; 243
     be6:	3f 4f       	sbci	r19, 0xFF	; 255
     be8:	89 85       	ldd	r24, Y+9	; 0x09
     bea:	9a 85       	ldd	r25, Y+10	; 0x0a
     bec:	82 0f       	add	r24, r18
     bee:	93 1f       	adc	r25, r19
     bf0:	fc 01       	movw	r30, r24
     bf2:	90 81       	ld	r25, Z
     bf4:	8a 8d       	ldd	r24, Y+26	; 0x1a
     bf6:	98 17       	cp	r25, r24
     bf8:	79 f4       	brne	.+30     	; 0xc18 <verifica+0x2f4>
				proximo_estado = L3;
     bfa:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <L3>
     bfe:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <proximo_estado.2375>
				comunicar[i] = recebido;
     c02:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <i.2376>
     c06:	88 2f       	mov	r24, r24
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	28 8d       	ldd	r18, Y+24	; 0x18
     c0c:	39 8d       	ldd	r19, Y+25	; 0x19
     c0e:	82 0f       	add	r24, r18
     c10:	93 1f       	adc	r25, r19
     c12:	2a 8d       	ldd	r18, Y+26	; 0x1a
     c14:	fc 01       	movw	r30, r24
     c16:	20 83       	st	Z, r18
		}else{
			proximo_estado = erro;
		}
		comunicar[i] = ' ';
		
		for(int j = 0;j < 10;j++){
     c18:	89 85       	ldd	r24, Y+9	; 0x09
     c1a:	9a 85       	ldd	r25, Y+10	; 0x0a
     c1c:	01 96       	adiw	r24, 0x01	; 1
     c1e:	9a 87       	std	Y+10, r25	; 0x0a
     c20:	89 87       	std	Y+9, r24	; 0x09
     c22:	89 85       	ldd	r24, Y+9	; 0x09
     c24:	9a 85       	ldd	r25, Y+10	; 0x0a
     c26:	0a 97       	sbiw	r24, 0x0a	; 10
     c28:	e4 f2       	brlt	.-72     	; 0xbe2 <verifica+0x2be>
			if(recebido == numero[j]){
				proximo_estado = L3;
				comunicar[i] = recebido;
			}
		}
		i++;
     c2a:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <i.2376>
     c2e:	8f 5f       	subi	r24, 0xFF	; 255
     c30:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <i.2376>
     c34:	87 c0       	rjmp	.+270    	; 0xd44 <verifica+0x420>
	}else if(estado_atual == L3){
     c36:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <estado_atual.2374>
     c3a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <L3>
     c3e:	98 17       	cp	r25, r24
     c40:	09 f0       	breq	.+2      	; 0xc44 <verifica+0x320>
     c42:	44 c0       	rjmp	.+136    	; 0xccc <verifica+0x3a8>
		if(recebido == ':'){
     c44:	8a 8d       	ldd	r24, Y+26	; 0x1a
     c46:	8a 33       	cpi	r24, 0x3A	; 58
     c48:	29 f4       	brne	.+10     	; 0xc54 <verifica+0x330>
			proximo_estado = ponto_ponto;
     c4a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <ponto_ponto>
     c4e:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <proximo_estado.2375>
     c52:	04 c0       	rjmp	.+8      	; 0xc5c <verifica+0x338>
		}else{
			proximo_estado = erro;
     c54:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <erro>
     c58:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <proximo_estado.2375>
		}
		comunicar[i] = ' ';
     c5c:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <i.2376>
     c60:	88 2f       	mov	r24, r24
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	28 8d       	ldd	r18, Y+24	; 0x18
     c66:	39 8d       	ldd	r19, Y+25	; 0x19
     c68:	82 0f       	add	r24, r18
     c6a:	93 1f       	adc	r25, r19
     c6c:	20 e2       	ldi	r18, 0x20	; 32
     c6e:	fc 01       	movw	r30, r24
     c70:	20 83       	st	Z, r18

		for(int j = 0;j < 10;j++){
     c72:	1c 86       	std	Y+12, r1	; 0x0c
     c74:	1b 86       	std	Y+11, r1	; 0x0b
     c76:	20 c0       	rjmp	.+64     	; 0xcb8 <verifica+0x394>
			if(recebido == numero[j]){
     c78:	9e 01       	movw	r18, r28
     c7a:	23 5f       	subi	r18, 0xF3	; 243
     c7c:	3f 4f       	sbci	r19, 0xFF	; 255
     c7e:	8b 85       	ldd	r24, Y+11	; 0x0b
     c80:	9c 85       	ldd	r25, Y+12	; 0x0c
     c82:	82 0f       	add	r24, r18
     c84:	93 1f       	adc	r25, r19
     c86:	fc 01       	movw	r30, r24
     c88:	90 81       	ld	r25, Z
     c8a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     c8c:	98 17       	cp	r25, r24
     c8e:	79 f4       	brne	.+30     	; 0xcae <verifica+0x38a>
				proximo_estado = ult;
     c90:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <ult>
     c94:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <proximo_estado.2375>
				comunicar[i] = recebido;
     c98:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <i.2376>
     c9c:	88 2f       	mov	r24, r24
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	28 8d       	ldd	r18, Y+24	; 0x18
     ca2:	39 8d       	ldd	r19, Y+25	; 0x19
     ca4:	82 0f       	add	r24, r18
     ca6:	93 1f       	adc	r25, r19
     ca8:	2a 8d       	ldd	r18, Y+26	; 0x1a
     caa:	fc 01       	movw	r30, r24
     cac:	20 83       	st	Z, r18
		}else{
			proximo_estado = erro;
		}
		comunicar[i] = ' ';

		for(int j = 0;j < 10;j++){
     cae:	8b 85       	ldd	r24, Y+11	; 0x0b
     cb0:	9c 85       	ldd	r25, Y+12	; 0x0c
     cb2:	01 96       	adiw	r24, 0x01	; 1
     cb4:	9c 87       	std	Y+12, r25	; 0x0c
     cb6:	8b 87       	std	Y+11, r24	; 0x0b
     cb8:	8b 85       	ldd	r24, Y+11	; 0x0b
     cba:	9c 85       	ldd	r25, Y+12	; 0x0c
     cbc:	0a 97       	sbiw	r24, 0x0a	; 10
     cbe:	e4 f2       	brlt	.-72     	; 0xc78 <verifica+0x354>
			if(recebido == numero[j]){
				proximo_estado = ult;
				comunicar[i] = recebido;
			}
		}
		i++;
     cc0:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <i.2376>
     cc4:	8f 5f       	subi	r24, 0xFF	; 255
     cc6:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <i.2376>
     cca:	3c c0       	rjmp	.+120    	; 0xd44 <verifica+0x420>
	}else if(estado_atual == ult){
     ccc:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <estado_atual.2374>
     cd0:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <ult>
     cd4:	98 17       	cp	r25, r24
     cd6:	69 f4       	brne	.+26     	; 0xcf2 <verifica+0x3ce>
		if(recebido == ':'){
     cd8:	8a 8d       	ldd	r24, Y+26	; 0x1a
     cda:	8a 33       	cpi	r24, 0x3A	; 58
     cdc:	29 f4       	brne	.+10     	; 0xce8 <verifica+0x3c4>
			proximo_estado = ponto_ponto;
     cde:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <ponto_ponto>
     ce2:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <proximo_estado.2375>
     ce6:	2e c0       	rjmp	.+92     	; 0xd44 <verifica+0x420>
		}else{
			proximo_estado = erro;
     ce8:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <erro>
     cec:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <proximo_estado.2375>
     cf0:	29 c0       	rjmp	.+82     	; 0xd44 <verifica+0x420>
		}
	}else if(estado_atual == ponto_ponto){
     cf2:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <estado_atual.2374>
     cf6:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <ponto_ponto>
     cfa:	98 17       	cp	r25, r24
     cfc:	79 f4       	brne	.+30     	; 0xd1c <verifica+0x3f8>
		if(recebido == ';'){
     cfe:	8a 8d       	ldd	r24, Y+26	; 0x1a
     d00:	8b 33       	cpi	r24, 0x3B	; 59
     d02:	29 f4       	brne	.+10     	; 0xd0e <verifica+0x3ea>
			proximo_estado = H1;
     d04:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <H1>
     d08:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <proximo_estado.2375>
     d0c:	04 c0       	rjmp	.+8      	; 0xd16 <verifica+0x3f2>
		}else{
			proximo_estado = erro;
     d0e:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <erro>
     d12:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <proximo_estado.2375>
		}
		i = 0;
     d16:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <i.2376>
     d1a:	14 c0       	rjmp	.+40     	; 0xd44 <verifica+0x420>
	}else if(estado_atual == erro){
     d1c:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <estado_atual.2374>
     d20:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <erro>
     d24:	98 17       	cp	r25, r24
     d26:	71 f4       	brne	.+28     	; 0xd44 <verifica+0x420>
		if(recebido == ';'){
     d28:	8a 8d       	ldd	r24, Y+26	; 0x1a
     d2a:	8b 33       	cpi	r24, 0x3B	; 59
     d2c:	29 f4       	brne	.+10     	; 0xd38 <verifica+0x414>
			proximo_estado = H1;
     d2e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <H1>
     d32:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <proximo_estado.2375>
     d36:	04 c0       	rjmp	.+8      	; 0xd40 <verifica+0x41c>
		}else{
			proximo_estado = erro;
     d38:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <erro>
     d3c:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <proximo_estado.2375>
		}
		i = 0;
     d40:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <i.2376>
	}
	
	return proximo_estado;
     d44:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <proximo_estado.2375>
}
     d48:	6a 96       	adiw	r28, 0x1a	; 26
     d4a:	0f b6       	in	r0, 0x3f	; 63
     d4c:	f8 94       	cli
     d4e:	de bf       	out	0x3e, r29	; 62
     d50:	0f be       	out	0x3f, r0	; 63
     d52:	cd bf       	out	0x3d, r28	; 61
     d54:	df 91       	pop	r29
     d56:	cf 91       	pop	r28
     d58:	08 95       	ret

00000d5a <analise_estado>:

void analise_estado(uint8_t est, char *comunic){
     d5a:	cf 93       	push	r28
     d5c:	df 93       	push	r29
     d5e:	cd b7       	in	r28, 0x3d	; 61
     d60:	de b7       	in	r29, 0x3e	; 62
     d62:	27 97       	sbiw	r28, 0x07	; 7
     d64:	0f b6       	in	r0, 0x3f	; 63
     d66:	f8 94       	cli
     d68:	de bf       	out	0x3e, r29	; 62
     d6a:	0f be       	out	0x3f, r0	; 63
     d6c:	cd bf       	out	0x3d, r28	; 61
     d6e:	8d 83       	std	Y+5, r24	; 0x05
     d70:	7f 83       	std	Y+7, r23	; 0x07
     d72:	6e 83       	std	Y+6, r22	; 0x06
	if(est == erro){
     d74:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <erro>
     d78:	9d 81       	ldd	r25, Y+5	; 0x05
     d7a:	98 17       	cp	r25, r24
     d7c:	11 f5       	brne	.+68     	; 0xdc2 <analise_estado+0x68>
		for(int k = 0; k < 7;k++){
     d7e:	1a 82       	std	Y+2, r1	; 0x02
     d80:	19 82       	std	Y+1, r1	; 0x01
     d82:	1a c0       	rjmp	.+52     	; 0xdb8 <analise_estado+0x5e>
			pressao_arterial[k] = Erro[k];
     d84:	89 81       	ldd	r24, Y+1	; 0x01
     d86:	9a 81       	ldd	r25, Y+2	; 0x02
     d88:	8f 5f       	subi	r24, 0xFF	; 255
     d8a:	9e 4f       	sbci	r25, 0xFE	; 254
     d8c:	fc 01       	movw	r30, r24
     d8e:	20 81       	ld	r18, Z
     d90:	89 81       	ldd	r24, Y+1	; 0x01
     d92:	9a 81       	ldd	r25, Y+2	; 0x02
     d94:	87 5f       	subi	r24, 0xF7	; 247
     d96:	9e 4f       	sbci	r25, 0xFE	; 254
     d98:	fc 01       	movw	r30, r24
     d9a:	20 83       	st	Z, r18
			comunic[k] = ' ';
     d9c:	89 81       	ldd	r24, Y+1	; 0x01
     d9e:	9a 81       	ldd	r25, Y+2	; 0x02
     da0:	2e 81       	ldd	r18, Y+6	; 0x06
     da2:	3f 81       	ldd	r19, Y+7	; 0x07
     da4:	82 0f       	add	r24, r18
     da6:	93 1f       	adc	r25, r19
     da8:	20 e2       	ldi	r18, 0x20	; 32
     daa:	fc 01       	movw	r30, r24
     dac:	20 83       	st	Z, r18
	return proximo_estado;
}

void analise_estado(uint8_t est, char *comunic){
	if(est == erro){
		for(int k = 0; k < 7;k++){
     dae:	89 81       	ldd	r24, Y+1	; 0x01
     db0:	9a 81       	ldd	r25, Y+2	; 0x02
     db2:	01 96       	adiw	r24, 0x01	; 1
     db4:	9a 83       	std	Y+2, r25	; 0x02
     db6:	89 83       	std	Y+1, r24	; 0x01
     db8:	89 81       	ldd	r24, Y+1	; 0x01
     dba:	9a 81       	ldd	r25, Y+2	; 0x02
     dbc:	07 97       	sbiw	r24, 0x07	; 7
     dbe:	14 f3       	brlt	.-60     	; 0xd84 <analise_estado+0x2a>
		for(int k = 0; k < 7;k++){
			pressao_arterial[k] = comunic[k];
			comunic[k] = ' ';
		}
	}
}
     dc0:	28 c0       	rjmp	.+80     	; 0xe12 <analise_estado+0xb8>
	if(est == erro){
		for(int k = 0; k < 7;k++){
			pressao_arterial[k] = Erro[k];
			comunic[k] = ' ';
		}
	}else if(est == ponto_ponto){
     dc2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <ponto_ponto>
     dc6:	9d 81       	ldd	r25, Y+5	; 0x05
     dc8:	98 17       	cp	r25, r24
     dca:	19 f5       	brne	.+70     	; 0xe12 <analise_estado+0xb8>
		for(int k = 0; k < 7;k++){
     dcc:	1c 82       	std	Y+4, r1	; 0x04
     dce:	1b 82       	std	Y+3, r1	; 0x03
     dd0:	1c c0       	rjmp	.+56     	; 0xe0a <analise_estado+0xb0>
			pressao_arterial[k] = comunic[k];
     dd2:	8b 81       	ldd	r24, Y+3	; 0x03
     dd4:	9c 81       	ldd	r25, Y+4	; 0x04
     dd6:	2e 81       	ldd	r18, Y+6	; 0x06
     dd8:	3f 81       	ldd	r19, Y+7	; 0x07
     dda:	82 0f       	add	r24, r18
     ddc:	93 1f       	adc	r25, r19
     dde:	fc 01       	movw	r30, r24
     de0:	20 81       	ld	r18, Z
     de2:	8b 81       	ldd	r24, Y+3	; 0x03
     de4:	9c 81       	ldd	r25, Y+4	; 0x04
     de6:	87 5f       	subi	r24, 0xF7	; 247
     de8:	9e 4f       	sbci	r25, 0xFE	; 254
     dea:	fc 01       	movw	r30, r24
     dec:	20 83       	st	Z, r18
			comunic[k] = ' ';
     dee:	8b 81       	ldd	r24, Y+3	; 0x03
     df0:	9c 81       	ldd	r25, Y+4	; 0x04
     df2:	2e 81       	ldd	r18, Y+6	; 0x06
     df4:	3f 81       	ldd	r19, Y+7	; 0x07
     df6:	82 0f       	add	r24, r18
     df8:	93 1f       	adc	r25, r19
     dfa:	20 e2       	ldi	r18, 0x20	; 32
     dfc:	fc 01       	movw	r30, r24
     dfe:	20 83       	st	Z, r18
		for(int k = 0; k < 7;k++){
			pressao_arterial[k] = Erro[k];
			comunic[k] = ' ';
		}
	}else if(est == ponto_ponto){
		for(int k = 0; k < 7;k++){
     e00:	8b 81       	ldd	r24, Y+3	; 0x03
     e02:	9c 81       	ldd	r25, Y+4	; 0x04
     e04:	01 96       	adiw	r24, 0x01	; 1
     e06:	9c 83       	std	Y+4, r25	; 0x04
     e08:	8b 83       	std	Y+3, r24	; 0x03
     e0a:	8b 81       	ldd	r24, Y+3	; 0x03
     e0c:	9c 81       	ldd	r25, Y+4	; 0x04
     e0e:	07 97       	sbiw	r24, 0x07	; 7
     e10:	04 f3       	brlt	.-64     	; 0xdd2 <analise_estado+0x78>
			pressao_arterial[k] = comunic[k];
			comunic[k] = ' ';
		}
	}
}
     e12:	00 00       	nop
     e14:	27 96       	adiw	r28, 0x07	; 7
     e16:	0f b6       	in	r0, 0x3f	; 63
     e18:	f8 94       	cli
     e1a:	de bf       	out	0x3e, r29	; 62
     e1c:	0f be       	out	0x3f, r0	; 63
     e1e:	cd bf       	out	0x3d, r28	; 61
     e20:	df 91       	pop	r29
     e22:	cf 91       	pop	r28
     e24:	08 95       	ret

00000e26 <executa_a_cada_150ms>:

void executa_a_cada_150ms(){
     e26:	cf 93       	push	r28
     e28:	df 93       	push	r29
     e2a:	00 d0       	rcall	.+0      	; 0xe2c <executa_a_cada_150ms+0x6>
     e2c:	00 d0       	rcall	.+0      	; 0xe2e <executa_a_cada_150ms+0x8>
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62

	if(flags_150ms){
     e32:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <flags_150ms>
     e36:	88 23       	and	r24, r24
     e38:	09 f4       	brne	.+2      	; 0xe3c <executa_a_cada_150ms+0x16>
     e3a:	c4 c0       	rjmp	.+392    	; 0xfc4 <executa_a_cada_150ms+0x19e>
		float Vin = 5*(leitura_ADC/1024.);
     e3c:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <leitura_ADC>
     e40:	90 91 84 02 	lds	r25, 0x0284	; 0x800284 <leitura_ADC+0x1>
     e44:	cc 01       	movw	r24, r24
     e46:	a0 e0       	ldi	r26, 0x00	; 0
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	bc 01       	movw	r22, r24
     e4c:	cd 01       	movw	r24, r26
     e4e:	0e 94 82 14 	call	0x2904	; 0x2904 <__floatunsisf>
     e52:	dc 01       	movw	r26, r24
     e54:	cb 01       	movw	r24, r22
     e56:	20 e0       	ldi	r18, 0x00	; 0
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	40 e8       	ldi	r20, 0x80	; 128
     e5c:	54 e4       	ldi	r21, 0x44	; 68
     e5e:	bc 01       	movw	r22, r24
     e60:	cd 01       	movw	r24, r26
     e62:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <__divsf3>
     e66:	dc 01       	movw	r26, r24
     e68:	cb 01       	movw	r24, r22
     e6a:	20 e0       	ldi	r18, 0x00	; 0
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	40 ea       	ldi	r20, 0xA0	; 160
     e70:	50 e4       	ldi	r21, 0x40	; 64
     e72:	bc 01       	movw	r22, r24
     e74:	cd 01       	movw	r24, r26
     e76:	0e 94 39 15 	call	0x2a72	; 0x2a72 <__mulsf3>
     e7a:	dc 01       	movw	r26, r24
     e7c:	cb 01       	movw	r24, r22
     e7e:	89 83       	std	Y+1, r24	; 0x01
     e80:	9a 83       	std	Y+2, r25	; 0x02
     e82:	ab 83       	std	Y+3, r26	; 0x03
     e84:	bc 83       	std	Y+4, r27	; 0x04
		if(ADMUX == 0b01000000){
     e86:	8c e7       	ldi	r24, 0x7C	; 124
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	fc 01       	movw	r30, r24
     e8c:	80 81       	ld	r24, Z
     e8e:	80 34       	cpi	r24, 0x40	; 64
     e90:	09 f0       	breq	.+2      	; 0xe94 <executa_a_cada_150ms+0x6e>
     e92:	67 c0       	rjmp	.+206    	; 0xf62 <executa_a_cada_150ms+0x13c>
			if((Vin>=2) && (Vin<3.5)){
     e94:	20 e0       	ldi	r18, 0x00	; 0
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	40 e0       	ldi	r20, 0x00	; 0
     e9a:	50 e4       	ldi	r21, 0x40	; 64
     e9c:	69 81       	ldd	r22, Y+1	; 0x01
     e9e:	7a 81       	ldd	r23, Y+2	; 0x02
     ea0:	8b 81       	ldd	r24, Y+3	; 0x03
     ea2:	9c 81       	ldd	r25, Y+4	; 0x04
     ea4:	0e 94 34 15 	call	0x2a68	; 0x2a68 <__gesf2>
     ea8:	88 23       	and	r24, r24
     eaa:	5c f1       	brlt	.+86     	; 0xf02 <executa_a_cada_150ms+0xdc>
     eac:	20 e0       	ldi	r18, 0x00	; 0
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	40 e6       	ldi	r20, 0x60	; 96
     eb2:	50 e4       	ldi	r21, 0x40	; 64
     eb4:	69 81       	ldd	r22, Y+1	; 0x01
     eb6:	7a 81       	ldd	r23, Y+2	; 0x02
     eb8:	8b 81       	ldd	r24, Y+3	; 0x03
     eba:	9c 81       	ldd	r25, Y+4	; 0x04
     ebc:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <__cmpsf2>
     ec0:	88 23       	and	r24, r24
     ec2:	fc f4       	brge	.+62     	; 0xf02 <executa_a_cada_150ms+0xdc>
				temperat = 10*Vin + 10;
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	40 e2       	ldi	r20, 0x20	; 32
     eca:	51 e4       	ldi	r21, 0x41	; 65
     ecc:	69 81       	ldd	r22, Y+1	; 0x01
     ece:	7a 81       	ldd	r23, Y+2	; 0x02
     ed0:	8b 81       	ldd	r24, Y+3	; 0x03
     ed2:	9c 81       	ldd	r25, Y+4	; 0x04
     ed4:	0e 94 39 15 	call	0x2a72	; 0x2a72 <__mulsf3>
     ed8:	dc 01       	movw	r26, r24
     eda:	cb 01       	movw	r24, r22
     edc:	20 e0       	ldi	r18, 0x00	; 0
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	40 e2       	ldi	r20, 0x20	; 32
     ee2:	51 e4       	ldi	r21, 0x41	; 65
     ee4:	bc 01       	movw	r22, r24
     ee6:	cd 01       	movw	r24, r26
     ee8:	0e 94 70 13 	call	0x26e0	; 0x26e0 <__addsf3>
     eec:	dc 01       	movw	r26, r24
     eee:	cb 01       	movw	r24, r22
     ef0:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <temperat>
     ef4:	90 93 7e 02 	sts	0x027E, r25	; 0x80027e <temperat+0x1>
     ef8:	a0 93 7f 02 	sts	0x027F, r26	; 0x80027f <temperat+0x2>
     efc:	b0 93 80 02 	sts	0x0280, r27	; 0x800280 <temperat+0x3>
     f00:	25 c0       	rjmp	.+74     	; 0xf4c <executa_a_cada_150ms+0x126>
			}else if(Vin<2){
     f02:	20 e0       	ldi	r18, 0x00	; 0
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	40 e0       	ldi	r20, 0x00	; 0
     f08:	50 e4       	ldi	r21, 0x40	; 64
     f0a:	69 81       	ldd	r22, Y+1	; 0x01
     f0c:	7a 81       	ldd	r23, Y+2	; 0x02
     f0e:	8b 81       	ldd	r24, Y+3	; 0x03
     f10:	9c 81       	ldd	r25, Y+4	; 0x04
     f12:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <__cmpsf2>
     f16:	88 23       	and	r24, r24
     f18:	6c f4       	brge	.+26     	; 0xf34 <executa_a_cada_150ms+0x10e>
				temperat = 30;
     f1a:	80 e0       	ldi	r24, 0x00	; 0
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	a0 ef       	ldi	r26, 0xF0	; 240
     f20:	b1 e4       	ldi	r27, 0x41	; 65
     f22:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <temperat>
     f26:	90 93 7e 02 	sts	0x027E, r25	; 0x80027e <temperat+0x1>
     f2a:	a0 93 7f 02 	sts	0x027F, r26	; 0x80027f <temperat+0x2>
     f2e:	b0 93 80 02 	sts	0x0280, r27	; 0x800280 <temperat+0x3>
     f32:	0c c0       	rjmp	.+24     	; 0xf4c <executa_a_cada_150ms+0x126>
			}else{
				temperat = 45;
     f34:	80 e0       	ldi	r24, 0x00	; 0
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	a4 e3       	ldi	r26, 0x34	; 52
     f3a:	b2 e4       	ldi	r27, 0x42	; 66
     f3c:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <temperat>
     f40:	90 93 7e 02 	sts	0x027E, r25	; 0x80027e <temperat+0x1>
     f44:	a0 93 7f 02 	sts	0x027F, r26	; 0x80027f <temperat+0x2>
     f48:	b0 93 80 02 	sts	0x0280, r27	; 0x800280 <temperat+0x3>
			}
			ADMUX ^= 0b00000001;
     f4c:	8c e7       	ldi	r24, 0x7C	; 124
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	2c e7       	ldi	r18, 0x7C	; 124
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	f9 01       	movw	r30, r18
     f56:	30 81       	ld	r19, Z
     f58:	21 e0       	ldi	r18, 0x01	; 1
     f5a:	23 27       	eor	r18, r19
     f5c:	fc 01       	movw	r30, r24
     f5e:	20 83       	st	Z, r18
     f60:	2f c0       	rjmp	.+94     	; 0xfc0 <executa_a_cada_150ms+0x19a>
			
		}else if(ADMUX == 0b01000001){
     f62:	8c e7       	ldi	r24, 0x7C	; 124
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	fc 01       	movw	r30, r24
     f68:	80 81       	ld	r24, Z
     f6a:	81 34       	cpi	r24, 0x41	; 65
     f6c:	49 f5       	brne	.+82     	; 0xfc0 <executa_a_cada_150ms+0x19a>
			satur = 0.123*leitura_ADC;
     f6e:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <leitura_ADC>
     f72:	90 91 84 02 	lds	r25, 0x0284	; 0x800284 <leitura_ADC+0x1>
     f76:	cc 01       	movw	r24, r24
     f78:	a0 e0       	ldi	r26, 0x00	; 0
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	bc 01       	movw	r22, r24
     f7e:	cd 01       	movw	r24, r26
     f80:	0e 94 82 14 	call	0x2904	; 0x2904 <__floatunsisf>
     f84:	dc 01       	movw	r26, r24
     f86:	cb 01       	movw	r24, r22
     f88:	2d e6       	ldi	r18, 0x6D	; 109
     f8a:	37 ee       	ldi	r19, 0xE7	; 231
     f8c:	4b ef       	ldi	r20, 0xFB	; 251
     f8e:	5d e3       	ldi	r21, 0x3D	; 61
     f90:	bc 01       	movw	r22, r24
     f92:	cd 01       	movw	r24, r26
     f94:	0e 94 39 15 	call	0x2a72	; 0x2a72 <__mulsf3>
     f98:	dc 01       	movw	r26, r24
     f9a:	cb 01       	movw	r24, r22
     f9c:	bc 01       	movw	r22, r24
     f9e:	cd 01       	movw	r24, r26
     fa0:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__fixunssfsi>
     fa4:	dc 01       	movw	r26, r24
     fa6:	cb 01       	movw	r24, r22
     fa8:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <satur>
			ADMUX ^= 0b00000001;
     fac:	8c e7       	ldi	r24, 0x7C	; 124
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	2c e7       	ldi	r18, 0x7C	; 124
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	f9 01       	movw	r30, r18
     fb6:	30 81       	ld	r19, Z
     fb8:	21 e0       	ldi	r18, 0x01	; 1
     fba:	23 27       	eor	r18, r19
     fbc:	fc 01       	movw	r30, r24
     fbe:	20 83       	st	Z, r18
		}
		
		flags_150ms = 0;
     fc0:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <flags_150ms>
	}

}
     fc4:	00 00       	nop
     fc6:	0f 90       	pop	r0
     fc8:	0f 90       	pop	r0
     fca:	0f 90       	pop	r0
     fcc:	0f 90       	pop	r0
     fce:	df 91       	pop	r29
     fd0:	cf 91       	pop	r28
     fd2:	08 95       	ret

00000fd4 <executa_a_cada_200ms>:

void executa_a_cada_200ms(){
     fd4:	cf 92       	push	r12
     fd6:	df 92       	push	r13
     fd8:	ef 92       	push	r14
     fda:	ff 92       	push	r15
     fdc:	cf 93       	push	r28
     fde:	df 93       	push	r29
     fe0:	1f 92       	push	r1
     fe2:	cd b7       	in	r28, 0x3d	; 61
     fe4:	de b7       	in	r29, 0x3e	; 62
	if(flags_200ms){ 
     fe6:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <flags_200ms>
     fea:	88 23       	and	r24, r24
     fec:	09 f4       	brne	.+2      	; 0xff0 <executa_a_cada_200ms+0x1c>
     fee:	d8 c5       	rjmp	.+2992   	; 0x1ba0 <executa_a_cada_200ms+0xbcc>
		uint8_t result = 0;
     ff0:	19 82       	std	Y+1, r1	; 0x01
		rest_temperat = temperat;
     ff2:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <temperat>
     ff6:	90 91 7e 02 	lds	r25, 0x027E	; 0x80027e <temperat+0x1>
     ffa:	a0 91 7f 02 	lds	r26, 0x027F	; 0x80027f <temperat+0x2>
     ffe:	b0 91 80 02 	lds	r27, 0x0280	; 0x800280 <temperat+0x3>
    1002:	bc 01       	movw	r22, r24
    1004:	cd 01       	movw	r24, r26
    1006:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__fixunssfsi>
    100a:	dc 01       	movw	r26, r24
    100c:	cb 01       	movw	r24, r22
    100e:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <rest_temperat>
		result = ((temperat*10)-(rest_temperat*10));
    1012:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <temperat>
    1016:	90 91 7e 02 	lds	r25, 0x027E	; 0x80027e <temperat+0x1>
    101a:	a0 91 7f 02 	lds	r26, 0x027F	; 0x80027f <temperat+0x2>
    101e:	b0 91 80 02 	lds	r27, 0x0280	; 0x800280 <temperat+0x3>
    1022:	20 e0       	ldi	r18, 0x00	; 0
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	40 e2       	ldi	r20, 0x20	; 32
    1028:	51 e4       	ldi	r21, 0x41	; 65
    102a:	bc 01       	movw	r22, r24
    102c:	cd 01       	movw	r24, r26
    102e:	0e 94 39 15 	call	0x2a72	; 0x2a72 <__mulsf3>
    1032:	dc 01       	movw	r26, r24
    1034:	cb 01       	movw	r24, r22
    1036:	6c 01       	movw	r12, r24
    1038:	7d 01       	movw	r14, r26
    103a:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <rest_temperat>
    103e:	88 2f       	mov	r24, r24
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	88 0f       	add	r24, r24
    1044:	99 1f       	adc	r25, r25
    1046:	9c 01       	movw	r18, r24
    1048:	22 0f       	add	r18, r18
    104a:	33 1f       	adc	r19, r19
    104c:	22 0f       	add	r18, r18
    104e:	33 1f       	adc	r19, r19
    1050:	82 0f       	add	r24, r18
    1052:	93 1f       	adc	r25, r19
    1054:	09 2e       	mov	r0, r25
    1056:	00 0c       	add	r0, r0
    1058:	aa 0b       	sbc	r26, r26
    105a:	bb 0b       	sbc	r27, r27
    105c:	bc 01       	movw	r22, r24
    105e:	cd 01       	movw	r24, r26
    1060:	0e 94 84 14 	call	0x2908	; 0x2908 <__floatsisf>
    1064:	dc 01       	movw	r26, r24
    1066:	cb 01       	movw	r24, r22
    1068:	9c 01       	movw	r18, r24
    106a:	ad 01       	movw	r20, r26
    106c:	c7 01       	movw	r24, r14
    106e:	b6 01       	movw	r22, r12
    1070:	0e 94 6f 13 	call	0x26de	; 0x26de <__subsf3>
    1074:	dc 01       	movw	r26, r24
    1076:	cb 01       	movw	r24, r22
    1078:	bc 01       	movw	r22, r24
    107a:	cd 01       	movw	r24, r26
    107c:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__fixunssfsi>
    1080:	dc 01       	movw	r26, r24
    1082:	cb 01       	movw	r24, r22
    1084:	89 83       	std	Y+1, r24	; 0x01
		
		itoa(FreqRespiracao,str1,10);
    1086:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    108a:	88 2f       	mov	r24, r24
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	4a e0       	ldi	r20, 0x0A	; 10
    1090:	50 e0       	ldi	r21, 0x00	; 0
    1092:	65 e5       	ldi	r22, 0x55	; 85
    1094:	72 e0       	ldi	r23, 0x02	; 2
    1096:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <itoa>
		itoa(FreqCard,str2,10);
    109a:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <FreqCard>
    109e:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <FreqCard+0x1>
    10a2:	a0 91 46 02 	lds	r26, 0x0246	; 0x800246 <FreqCard+0x2>
    10a6:	b0 91 47 02 	lds	r27, 0x0247	; 0x800247 <FreqCard+0x3>
    10aa:	4a e0       	ldi	r20, 0x0A	; 10
    10ac:	50 e0       	ldi	r21, 0x00	; 0
    10ae:	68 e5       	ldi	r22, 0x58	; 88
    10b0:	72 e0       	ldi	r23, 0x02	; 2
    10b2:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <itoa>
		itoa(satur,str3,10);
    10b6:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <satur>
    10ba:	88 2f       	mov	r24, r24
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	4a e0       	ldi	r20, 0x0A	; 10
    10c0:	50 e0       	ldi	r21, 0x00	; 0
    10c2:	6c e5       	ldi	r22, 0x5C	; 92
    10c4:	72 e0       	ldi	r23, 0x02	; 2
    10c6:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <itoa>
		itoa(rest_temperat,str4,10);
    10ca:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <rest_temperat>
    10ce:	88 2f       	mov	r24, r24
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	4a e0       	ldi	r20, 0x0A	; 10
    10d4:	50 e0       	ldi	r21, 0x00	; 0
    10d6:	60 e6       	ldi	r22, 0x60	; 96
    10d8:	72 e0       	ldi	r23, 0x02	; 2
    10da:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <itoa>
		itoa(result,str5,10);
    10de:	89 81       	ldd	r24, Y+1	; 0x01
    10e0:	88 2f       	mov	r24, r24
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	4a e0       	ldi	r20, 0x0A	; 10
    10e6:	50 e0       	ldi	r21, 0x00	; 0
    10e8:	64 e6       	ldi	r22, 0x64	; 100
    10ea:	72 e0       	ldi	r23, 0x02	; 2
    10ec:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <itoa>
		itoa(taxa_oxig,str6,10);
    10f0:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <__data_end>
    10f4:	88 2f       	mov	r24, r24
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	4a e0       	ldi	r20, 0x0A	; 10
    10fa:	50 e0       	ldi	r21, 0x00	; 0
    10fc:	67 e6       	ldi	r22, 0x67	; 103
    10fe:	72 e0       	ldi	r23, 0x02	; 2
    1100:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <itoa>
		itoa(volume_ar,str7,10);
    1104:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <volume_ar>
    1108:	88 2f       	mov	r24, r24
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	4a e0       	ldi	r20, 0x0A	; 10
    110e:	50 e0       	ldi	r21, 0x00	; 0
    1110:	6b e6       	ldi	r22, 0x6B	; 107
    1112:	72 e0       	ldi	r23, 0x02	; 2
    1114:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <itoa>
		itoa(peep,str8,10);
    1118:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <peep>
    111c:	88 2f       	mov	r24, r24
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	4a e0       	ldi	r20, 0x0A	; 10
    1122:	50 e0       	ldi	r21, 0x00	; 0
    1124:	6e e6       	ldi	r22, 0x6E	; 110
    1126:	72 e0       	ldi	r23, 0x02	; 2
    1128:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <itoa>
		itoa(dpressao,str9,10);
    112c:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <dpressao>
    1130:	88 2f       	mov	r24, r24
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	4a e0       	ldi	r20, 0x0A	; 10
    1136:	50 e0       	ldi	r21, 0x00	; 0
    1138:	61 e7       	ldi	r22, 0x71	; 113
    113a:	72 e0       	ldi	r23, 0x02	; 2
    113c:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <itoa>
		itoa(bpm_max,str10,10);
    1140:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <bpm_max>
    1144:	88 2f       	mov	r24, r24
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	4a e0       	ldi	r20, 0x0A	; 10
    114a:	50 e0       	ldi	r21, 0x00	; 0
    114c:	64 e7       	ldi	r22, 0x74	; 116
    114e:	72 e0       	ldi	r23, 0x02	; 2
    1150:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <itoa>
		itoa(bpm_min,str11,10);
    1154:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <bpm_min>
    1158:	88 2f       	mov	r24, r24
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	4a e0       	ldi	r20, 0x0A	; 10
    115e:	50 e0       	ldi	r21, 0x00	; 0
    1160:	67 e7       	ldi	r22, 0x77	; 119
    1162:	72 e0       	ldi	r23, 0x02	; 2
    1164:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <itoa>
		itoa(sat_min,str12,10);
    1168:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sat_min>
    116c:	88 2f       	mov	r24, r24
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	4a e0       	ldi	r20, 0x0A	; 10
    1172:	50 e0       	ldi	r21, 0x00	; 0
    1174:	6a e7       	ldi	r22, 0x7A	; 122
    1176:	72 e0       	ldi	r23, 0x02	; 2
    1178:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <itoa>
		
		//De acordo com as flags, irá mudar de tela:
		
		if((flag_t == 0) && (flag_confpcv == 0) && (flag_confvcv == 0)){
    117c:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <flag_t>
    1180:	88 23       	and	r24, r24
    1182:	81 f5       	brne	.+96     	; 0x11e4 <executa_a_cada_200ms+0x210>
    1184:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <flag_confpcv>
    1188:	88 23       	and	r24, r24
    118a:	61 f5       	brne	.+88     	; 0x11e4 <executa_a_cada_200ms+0x210>
    118c:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <flag_confvcv>
    1190:	88 23       	and	r24, r24
    1192:	41 f5       	brne	.+80     	; 0x11e4 <executa_a_cada_200ms+0x210>
			
			nokia_lcd_clear(); //Limpa o LCD
    1194:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <nokia_lcd_clear>
			
			nokia_lcd_set_cursor(0, 0); //Muda o cursos para a posição 0,0
    1198:	60 e0       	ldi	r22, 0x00	; 0
    119a:	80 e0       	ldi	r24, 0x00	; 0
    119c:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("Conf: Modo V.",1);
    11a0:	61 e0       	ldi	r22, 0x01	; 1
    11a2:	85 e3       	ldi	r24, 0x35	; 53
    11a4:	91 e0       	ldi	r25, 0x01	; 1
    11a6:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 8); //Muda o cursos para a posição 0,8
    11aa:	68 e0       	ldi	r22, 0x08	; 8
    11ac:	80 e0       	ldi	r24, 0x00	; 0
    11ae:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("____________",1);
    11b2:	61 e0       	ldi	r22, 0x01	; 1
    11b4:	83 e4       	ldi	r24, 0x43	; 67
    11b6:	91 e0       	ldi	r25, 0x01	; 1
    11b8:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 17); //Muda o cursos para a posição 0,17 ou seja, pula uma linha
    11bc:	61 e1       	ldi	r22, 0x11	; 17
    11be:	80 e0       	ldi	r24, 0x00	; 0
    11c0:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("PCV(conf)*",1); //Escreve um texto do tamanho 1
    11c4:	61 e0       	ldi	r22, 0x01	; 1
    11c6:	80 e5       	ldi	r24, 0x50	; 80
    11c8:	91 e0       	ldi	r25, 0x01	; 1
    11ca:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 26); //Muda o cursos para a posição 0,26 ou seja, pula uma linha
    11ce:	6a e1       	ldi	r22, 0x1A	; 26
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("VCV(conf)",1); //Escreve um texto do tamanho 1
    11d6:	61 e0       	ldi	r22, 0x01	; 1
    11d8:	8b e5       	ldi	r24, 0x5B	; 91
    11da:	91 e0       	ldi	r25, 0x01	; 1
    11dc:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
	
			nokia_lcd_render(); //Atualiza a tela do display com o conteúdo do buffer
    11e0:	0e 94 4d 13 	call	0x269a	; 0x269a <nokia_lcd_render>
		}
		
		if((flag_t == 1) && (flag_confvcv == 0) && (flag_confpcv == 0)){
    11e4:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <flag_t>
    11e8:	81 30       	cpi	r24, 0x01	; 1
    11ea:	81 f5       	brne	.+96     	; 0x124c <executa_a_cada_200ms+0x278>
    11ec:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <flag_confvcv>
    11f0:	88 23       	and	r24, r24
    11f2:	61 f5       	brne	.+88     	; 0x124c <executa_a_cada_200ms+0x278>
    11f4:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <flag_confpcv>
    11f8:	88 23       	and	r24, r24
    11fa:	41 f5       	brne	.+80     	; 0x124c <executa_a_cada_200ms+0x278>
			
			nokia_lcd_clear(); //Limpa o LCD
    11fc:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <nokia_lcd_clear>
			
			nokia_lcd_set_cursor(0, 0); //Muda o cursos para a posição 0,0
    1200:	60 e0       	ldi	r22, 0x00	; 0
    1202:	80 e0       	ldi	r24, 0x00	; 0
    1204:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("Conf: Modo V.",1);
    1208:	61 e0       	ldi	r22, 0x01	; 1
    120a:	85 e3       	ldi	r24, 0x35	; 53
    120c:	91 e0       	ldi	r25, 0x01	; 1
    120e:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 8); //Muda o cursos para a posição 0,8
    1212:	68 e0       	ldi	r22, 0x08	; 8
    1214:	80 e0       	ldi	r24, 0x00	; 0
    1216:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("____________",1);
    121a:	61 e0       	ldi	r22, 0x01	; 1
    121c:	83 e4       	ldi	r24, 0x43	; 67
    121e:	91 e0       	ldi	r25, 0x01	; 1
    1220:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 17); //Muda o cursos para a posição 0,17 ou seja, pula uma linha
    1224:	61 e1       	ldi	r22, 0x11	; 17
    1226:	80 e0       	ldi	r24, 0x00	; 0
    1228:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("PCV(conf)",1); //Escreve um texto do tamanho 1
    122c:	61 e0       	ldi	r22, 0x01	; 1
    122e:	85 e6       	ldi	r24, 0x65	; 101
    1230:	91 e0       	ldi	r25, 0x01	; 1
    1232:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 26); //Muda o cursos para a posição 0,26 ou seja, pula uma linha
    1236:	6a e1       	ldi	r22, 0x1A	; 26
    1238:	80 e0       	ldi	r24, 0x00	; 0
    123a:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("VCV(conf)*",1); //Escreve um texto do tamanho 1
    123e:	61 e0       	ldi	r22, 0x01	; 1
    1240:	8f e6       	ldi	r24, 0x6F	; 111
    1242:	91 e0       	ldi	r25, 0x01	; 1
    1244:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			
			nokia_lcd_render(); //Atualiza a tela do display com o conteúdo do buffer
    1248:	0e 94 4d 13 	call	0x269a	; 0x269a <nokia_lcd_render>
		}
		
		
		if((flag_t == 0) && (flag_confpcv == 1) ){
    124c:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <flag_t>
    1250:	88 23       	and	r24, r24
    1252:	09 f0       	breq	.+2      	; 0x1256 <executa_a_cada_200ms+0x282>
    1254:	63 c0       	rjmp	.+198    	; 0x131c <executa_a_cada_200ms+0x348>
    1256:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <flag_confpcv>
    125a:	81 30       	cpi	r24, 0x01	; 1
    125c:	09 f0       	breq	.+2      	; 0x1260 <executa_a_cada_200ms+0x28c>
    125e:	5e c0       	rjmp	.+188    	; 0x131c <executa_a_cada_200ms+0x348>
			
			nokia_lcd_clear(); //Limpa o LCD
    1260:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <nokia_lcd_clear>
			
			nokia_lcd_set_cursor(0, 0); //Muda o cursos para a posição 0,0
    1264:	60 e0       	ldi	r22, 0x00	; 0
    1266:	80 e0       	ldi	r24, 0x00	; 0
    1268:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("PCV: com M.A.",1);
    126c:	61 e0       	ldi	r22, 0x01	; 1
    126e:	8a e7       	ldi	r24, 0x7A	; 122
    1270:	91 e0       	ldi	r25, 0x01	; 1
    1272:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 8); //Muda o cursos para a posição 0,8
    1276:	68 e0       	ldi	r22, 0x08	; 8
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("__________",1);
    127e:	61 e0       	ldi	r22, 0x01	; 1
    1280:	88 e8       	ldi	r24, 0x88	; 136
    1282:	91 e0       	ldi	r25, 0x01	; 1
    1284:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 17); //Muda o cursos para a posição 0,17
    1288:	61 e1       	ldi	r22, 0x11	; 17
    128a:	80 e0       	ldi	r24, 0x00	; 0
    128c:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(str1,1); //Escreve um texto do tamanho 1
    1290:	61 e0       	ldi	r22, 0x01	; 1
    1292:	85 e5       	ldi	r24, 0x55	; 85
    1294:	92 e0       	ldi	r25, 0x02	; 2
    1296:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(30, 17); //Muda o cursos para a posição 30,17
    129a:	61 e1       	ldi	r22, 0x11	; 17
    129c:	8e e1       	ldi	r24, 0x1E	; 30
    129e:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("* rsp/min",1);//Escreve um texto do tamanho 1
    12a2:	61 e0       	ldi	r22, 0x01	; 1
    12a4:	83 e9       	ldi	r24, 0x93	; 147
    12a6:	91 e0       	ldi	r25, 0x01	; 1
    12a8:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 25); //Muda o cursos para a posição 0,25
    12ac:	69 e1       	ldi	r22, 0x19	; 25
    12ae:	80 e0       	ldi	r24, 0x00	; 0
    12b0:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(str6,1); //Escreve um texto do tamanho 1
    12b4:	61 e0       	ldi	r22, 0x01	; 1
    12b6:	87 e6       	ldi	r24, 0x67	; 103
    12b8:	92 e0       	ldi	r25, 0x02	; 2
    12ba:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(30, 25); //Muda o cursos para a posição 30,25
    12be:	69 e1       	ldi	r22, 0x19	; 25
    12c0:	8e e1       	ldi	r24, 0x1E	; 30
    12c2:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("  FiO2",1);//Escreve um texto do tamanho 1
    12c6:	61 e0       	ldi	r22, 0x01	; 1
    12c8:	8d e9       	ldi	r24, 0x9D	; 157
    12ca:	91 e0       	ldi	r25, 0x01	; 1
    12cc:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 33); //Muda o cursos para a posição 0,33
    12d0:	61 e2       	ldi	r22, 0x21	; 33
    12d2:	80 e0       	ldi	r24, 0x00	; 0
    12d4:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(str8,1); //Escreve um texto do tamanho 1
    12d8:	61 e0       	ldi	r22, 0x01	; 1
    12da:	8e e6       	ldi	r24, 0x6E	; 110
    12dc:	92 e0       	ldi	r25, 0x02	; 2
    12de:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(30, 33); //Muda o cursos para a posição 30,33
    12e2:	61 e2       	ldi	r22, 0x21	; 33
    12e4:	8e e1       	ldi	r24, 0x1E	; 30
    12e6:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("  cmH2O",1);//Escreve um texto do tamanho 1
    12ea:	61 e0       	ldi	r22, 0x01	; 1
    12ec:	84 ea       	ldi	r24, 0xA4	; 164
    12ee:	91 e0       	ldi	r25, 0x01	; 1
    12f0:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 40); //Muda o cursos para a posição 0,40
    12f4:	68 e2       	ldi	r22, 0x28	; 40
    12f6:	80 e0       	ldi	r24, 0x00	; 0
    12f8:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(str9,1); //Escreve um texto do tamanho 1
    12fc:	61 e0       	ldi	r22, 0x01	; 1
    12fe:	81 e7       	ldi	r24, 0x71	; 113
    1300:	92 e0       	ldi	r25, 0x02	; 2
    1302:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(30, 40); //Muda o cursos para a posição 30,40
    1306:	68 e2       	ldi	r22, 0x28	; 40
    1308:	8e e1       	ldi	r24, 0x1E	; 30
    130a:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("  cmH2O",1);//Escreve um texto do tamanho 1
    130e:	61 e0       	ldi	r22, 0x01	; 1
    1310:	84 ea       	ldi	r24, 0xA4	; 164
    1312:	91 e0       	ldi	r25, 0x01	; 1
    1314:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			
			nokia_lcd_render(); //Atualiza a tela do display com o conteúdo do buffer
    1318:	0e 94 4d 13 	call	0x269a	; 0x269a <nokia_lcd_render>
			
		}
		
		if((flag_t == 2) && (flag_confpcv == 1)){
    131c:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <flag_t>
    1320:	82 30       	cpi	r24, 0x02	; 2
    1322:	09 f0       	breq	.+2      	; 0x1326 <executa_a_cada_200ms+0x352>
    1324:	63 c0       	rjmp	.+198    	; 0x13ec <executa_a_cada_200ms+0x418>
    1326:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <flag_confpcv>
    132a:	81 30       	cpi	r24, 0x01	; 1
    132c:	09 f0       	breq	.+2      	; 0x1330 <executa_a_cada_200ms+0x35c>
    132e:	5e c0       	rjmp	.+188    	; 0x13ec <executa_a_cada_200ms+0x418>
			
			nokia_lcd_clear(); //Limpa o LCD
    1330:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <nokia_lcd_clear>
			
			nokia_lcd_set_cursor(0, 0); //Muda o cursos para a posição 0,0
    1334:	60 e0       	ldi	r22, 0x00	; 0
    1336:	80 e0       	ldi	r24, 0x00	; 0
    1338:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("PCV: com M.A.",1);
    133c:	61 e0       	ldi	r22, 0x01	; 1
    133e:	8a e7       	ldi	r24, 0x7A	; 122
    1340:	91 e0       	ldi	r25, 0x01	; 1
    1342:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 8); //Muda o cursos para a posição 0,8
    1346:	68 e0       	ldi	r22, 0x08	; 8
    1348:	80 e0       	ldi	r24, 0x00	; 0
    134a:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("__________",1);
    134e:	61 e0       	ldi	r22, 0x01	; 1
    1350:	88 e8       	ldi	r24, 0x88	; 136
    1352:	91 e0       	ldi	r25, 0x01	; 1
    1354:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 17); //Muda o cursos para a posição 0,17
    1358:	61 e1       	ldi	r22, 0x11	; 17
    135a:	80 e0       	ldi	r24, 0x00	; 0
    135c:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(str1,1); //Escreve um texto do tamanho 1
    1360:	61 e0       	ldi	r22, 0x01	; 1
    1362:	85 e5       	ldi	r24, 0x55	; 85
    1364:	92 e0       	ldi	r25, 0x02	; 2
    1366:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(30, 17); //Muda o cursos para a posição 30,17
    136a:	61 e1       	ldi	r22, 0x11	; 17
    136c:	8e e1       	ldi	r24, 0x1E	; 30
    136e:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("  rsp/min",1);//Escreve um texto do tamanho 1
    1372:	61 e0       	ldi	r22, 0x01	; 1
    1374:	8c ea       	ldi	r24, 0xAC	; 172
    1376:	91 e0       	ldi	r25, 0x01	; 1
    1378:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 25); //Muda o cursos para a posição 0,25
    137c:	69 e1       	ldi	r22, 0x19	; 25
    137e:	80 e0       	ldi	r24, 0x00	; 0
    1380:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(str6,1); //Escreve um texto do tamanho 1
    1384:	61 e0       	ldi	r22, 0x01	; 1
    1386:	87 e6       	ldi	r24, 0x67	; 103
    1388:	92 e0       	ldi	r25, 0x02	; 2
    138a:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(30, 25); //Muda o cursos para a posição 30,25
    138e:	69 e1       	ldi	r22, 0x19	; 25
    1390:	8e e1       	ldi	r24, 0x1E	; 30
    1392:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("* FiO2",1);//Escreve um texto do tamanho 1
    1396:	61 e0       	ldi	r22, 0x01	; 1
    1398:	86 eb       	ldi	r24, 0xB6	; 182
    139a:	91 e0       	ldi	r25, 0x01	; 1
    139c:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 33); //Muda o cursos para a posição 0,33
    13a0:	61 e2       	ldi	r22, 0x21	; 33
    13a2:	80 e0       	ldi	r24, 0x00	; 0
    13a4:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(str8,1); //Escreve um texto do tamanho 1
    13a8:	61 e0       	ldi	r22, 0x01	; 1
    13aa:	8e e6       	ldi	r24, 0x6E	; 110
    13ac:	92 e0       	ldi	r25, 0x02	; 2
    13ae:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(30, 33); //Muda o cursos para a posição 30,33
    13b2:	61 e2       	ldi	r22, 0x21	; 33
    13b4:	8e e1       	ldi	r24, 0x1E	; 30
    13b6:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("  cmH2O",1);//Escreve um texto do tamanho 1
    13ba:	61 e0       	ldi	r22, 0x01	; 1
    13bc:	84 ea       	ldi	r24, 0xA4	; 164
    13be:	91 e0       	ldi	r25, 0x01	; 1
    13c0:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 40); //Muda o cursos para a posição 0,40
    13c4:	68 e2       	ldi	r22, 0x28	; 40
    13c6:	80 e0       	ldi	r24, 0x00	; 0
    13c8:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(str9,1); //Escreve um texto do tamanho 1
    13cc:	61 e0       	ldi	r22, 0x01	; 1
    13ce:	81 e7       	ldi	r24, 0x71	; 113
    13d0:	92 e0       	ldi	r25, 0x02	; 2
    13d2:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(30, 40); //Muda o cursos para a posição 30,40
    13d6:	68 e2       	ldi	r22, 0x28	; 40
    13d8:	8e e1       	ldi	r24, 0x1E	; 30
    13da:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("  cmH2O",1);//Escreve um texto do tamanho 1
    13de:	61 e0       	ldi	r22, 0x01	; 1
    13e0:	84 ea       	ldi	r24, 0xA4	; 164
    13e2:	91 e0       	ldi	r25, 0x01	; 1
    13e4:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			
			nokia_lcd_render(); //Atualiza a tela do display com o conteúdo do buffer
    13e8:	0e 94 4d 13 	call	0x269a	; 0x269a <nokia_lcd_render>
			
		}
		
		if((flag_t == 3) && (flag_confpcv == 1)){
    13ec:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <flag_t>
    13f0:	83 30       	cpi	r24, 0x03	; 3
    13f2:	09 f0       	breq	.+2      	; 0x13f6 <executa_a_cada_200ms+0x422>
    13f4:	63 c0       	rjmp	.+198    	; 0x14bc <executa_a_cada_200ms+0x4e8>
    13f6:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <flag_confpcv>
    13fa:	81 30       	cpi	r24, 0x01	; 1
    13fc:	09 f0       	breq	.+2      	; 0x1400 <executa_a_cada_200ms+0x42c>
    13fe:	5e c0       	rjmp	.+188    	; 0x14bc <executa_a_cada_200ms+0x4e8>
			
			nokia_lcd_clear(); //Limpa o LCD
    1400:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <nokia_lcd_clear>
			
			nokia_lcd_set_cursor(0, 0); //Muda o cursos para a posição 0,0
    1404:	60 e0       	ldi	r22, 0x00	; 0
    1406:	80 e0       	ldi	r24, 0x00	; 0
    1408:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("PCV: com M.A.",1);
    140c:	61 e0       	ldi	r22, 0x01	; 1
    140e:	8a e7       	ldi	r24, 0x7A	; 122
    1410:	91 e0       	ldi	r25, 0x01	; 1
    1412:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 8); //Muda o cursos para a posição 0,8
    1416:	68 e0       	ldi	r22, 0x08	; 8
    1418:	80 e0       	ldi	r24, 0x00	; 0
    141a:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("__________",1);
    141e:	61 e0       	ldi	r22, 0x01	; 1
    1420:	88 e8       	ldi	r24, 0x88	; 136
    1422:	91 e0       	ldi	r25, 0x01	; 1
    1424:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 17); //Muda o cursos para a posição 0,17
    1428:	61 e1       	ldi	r22, 0x11	; 17
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(str1,1); //Escreve um texto do tamanho 1
    1430:	61 e0       	ldi	r22, 0x01	; 1
    1432:	85 e5       	ldi	r24, 0x55	; 85
    1434:	92 e0       	ldi	r25, 0x02	; 2
    1436:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(30, 17); //Muda o cursos para a posição 30,17
    143a:	61 e1       	ldi	r22, 0x11	; 17
    143c:	8e e1       	ldi	r24, 0x1E	; 30
    143e:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("  rsp/min",1);//Escreve um texto do tamanho 1
    1442:	61 e0       	ldi	r22, 0x01	; 1
    1444:	8c ea       	ldi	r24, 0xAC	; 172
    1446:	91 e0       	ldi	r25, 0x01	; 1
    1448:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 25); //Muda o cursos para a posição 0,25
    144c:	69 e1       	ldi	r22, 0x19	; 25
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(str6,1); //Escreve um texto do tamanho 1
    1454:	61 e0       	ldi	r22, 0x01	; 1
    1456:	87 e6       	ldi	r24, 0x67	; 103
    1458:	92 e0       	ldi	r25, 0x02	; 2
    145a:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(30, 25); //Muda o cursos para a posição 30,25
    145e:	69 e1       	ldi	r22, 0x19	; 25
    1460:	8e e1       	ldi	r24, 0x1E	; 30
    1462:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("  FiO2",1);//Escreve um texto do tamanho 1
    1466:	61 e0       	ldi	r22, 0x01	; 1
    1468:	8d e9       	ldi	r24, 0x9D	; 157
    146a:	91 e0       	ldi	r25, 0x01	; 1
    146c:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 33); //Muda o cursos para a posição 0,33
    1470:	61 e2       	ldi	r22, 0x21	; 33
    1472:	80 e0       	ldi	r24, 0x00	; 0
    1474:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(str8,1); //Escreve um texto do tamanho 1
    1478:	61 e0       	ldi	r22, 0x01	; 1
    147a:	8e e6       	ldi	r24, 0x6E	; 110
    147c:	92 e0       	ldi	r25, 0x02	; 2
    147e:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(30, 33); //Muda o cursos para a posição 30,33
    1482:	61 e2       	ldi	r22, 0x21	; 33
    1484:	8e e1       	ldi	r24, 0x1E	; 30
    1486:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("* cmH2O",1);//Escreve um texto do tamanho 1
    148a:	61 e0       	ldi	r22, 0x01	; 1
    148c:	8d eb       	ldi	r24, 0xBD	; 189
    148e:	91 e0       	ldi	r25, 0x01	; 1
    1490:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 40); //Muda o cursos para a posição 0,40
    1494:	68 e2       	ldi	r22, 0x28	; 40
    1496:	80 e0       	ldi	r24, 0x00	; 0
    1498:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(str9,1); //Escreve um texto do tamanho 1
    149c:	61 e0       	ldi	r22, 0x01	; 1
    149e:	81 e7       	ldi	r24, 0x71	; 113
    14a0:	92 e0       	ldi	r25, 0x02	; 2
    14a2:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(30, 40); //Muda o cursos para a posição 30,40
    14a6:	68 e2       	ldi	r22, 0x28	; 40
    14a8:	8e e1       	ldi	r24, 0x1E	; 30
    14aa:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("  cmH2O",1);//Escreve um texto do tamanho 1
    14ae:	61 e0       	ldi	r22, 0x01	; 1
    14b0:	84 ea       	ldi	r24, 0xA4	; 164
    14b2:	91 e0       	ldi	r25, 0x01	; 1
    14b4:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			
			nokia_lcd_render(); //Atualiza a tela do display com o conteúdo do buffer
    14b8:	0e 94 4d 13 	call	0x269a	; 0x269a <nokia_lcd_render>
			
		}
		
		if((flag_t == 4) && (flag_confpcv == 1)){
    14bc:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <flag_t>
    14c0:	84 30       	cpi	r24, 0x04	; 4
    14c2:	09 f0       	breq	.+2      	; 0x14c6 <executa_a_cada_200ms+0x4f2>
    14c4:	63 c0       	rjmp	.+198    	; 0x158c <executa_a_cada_200ms+0x5b8>
    14c6:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <flag_confpcv>
    14ca:	81 30       	cpi	r24, 0x01	; 1
    14cc:	09 f0       	breq	.+2      	; 0x14d0 <executa_a_cada_200ms+0x4fc>
    14ce:	5e c0       	rjmp	.+188    	; 0x158c <executa_a_cada_200ms+0x5b8>
			
			nokia_lcd_clear(); //Limpa o LCD
    14d0:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <nokia_lcd_clear>
			
			nokia_lcd_set_cursor(0, 0); //Muda o cursos para a posição 0,0
    14d4:	60 e0       	ldi	r22, 0x00	; 0
    14d6:	80 e0       	ldi	r24, 0x00	; 0
    14d8:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("PCV: com M.A.",1);
    14dc:	61 e0       	ldi	r22, 0x01	; 1
    14de:	8a e7       	ldi	r24, 0x7A	; 122
    14e0:	91 e0       	ldi	r25, 0x01	; 1
    14e2:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 8); //Muda o cursos para a posição 0,8
    14e6:	68 e0       	ldi	r22, 0x08	; 8
    14e8:	80 e0       	ldi	r24, 0x00	; 0
    14ea:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("__________",1);
    14ee:	61 e0       	ldi	r22, 0x01	; 1
    14f0:	88 e8       	ldi	r24, 0x88	; 136
    14f2:	91 e0       	ldi	r25, 0x01	; 1
    14f4:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 17); //Muda o cursos para a posição 0,17
    14f8:	61 e1       	ldi	r22, 0x11	; 17
    14fa:	80 e0       	ldi	r24, 0x00	; 0
    14fc:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(str1,1); //Escreve um texto do tamanho 1
    1500:	61 e0       	ldi	r22, 0x01	; 1
    1502:	85 e5       	ldi	r24, 0x55	; 85
    1504:	92 e0       	ldi	r25, 0x02	; 2
    1506:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(30, 17); //Muda o cursos para a posição 30,17
    150a:	61 e1       	ldi	r22, 0x11	; 17
    150c:	8e e1       	ldi	r24, 0x1E	; 30
    150e:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("  rsp/min",1);//Escreve um texto do tamanho 1
    1512:	61 e0       	ldi	r22, 0x01	; 1
    1514:	8c ea       	ldi	r24, 0xAC	; 172
    1516:	91 e0       	ldi	r25, 0x01	; 1
    1518:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 25); //Muda o cursos para a posição 0,25
    151c:	69 e1       	ldi	r22, 0x19	; 25
    151e:	80 e0       	ldi	r24, 0x00	; 0
    1520:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(str6,1); //Escreve um texto do tamanho 1
    1524:	61 e0       	ldi	r22, 0x01	; 1
    1526:	87 e6       	ldi	r24, 0x67	; 103
    1528:	92 e0       	ldi	r25, 0x02	; 2
    152a:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(30, 25); //Muda o cursos para a posição 30,25
    152e:	69 e1       	ldi	r22, 0x19	; 25
    1530:	8e e1       	ldi	r24, 0x1E	; 30
    1532:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("  FiO2",1);//Escreve um texto do tamanho 1
    1536:	61 e0       	ldi	r22, 0x01	; 1
    1538:	8d e9       	ldi	r24, 0x9D	; 157
    153a:	91 e0       	ldi	r25, 0x01	; 1
    153c:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 33); //Muda o cursos para a posição 0,33
    1540:	61 e2       	ldi	r22, 0x21	; 33
    1542:	80 e0       	ldi	r24, 0x00	; 0
    1544:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(str8,1); //Escreve um texto do tamanho 1
    1548:	61 e0       	ldi	r22, 0x01	; 1
    154a:	8e e6       	ldi	r24, 0x6E	; 110
    154c:	92 e0       	ldi	r25, 0x02	; 2
    154e:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(30, 33); //Muda o cursos para a posição 30,33
    1552:	61 e2       	ldi	r22, 0x21	; 33
    1554:	8e e1       	ldi	r24, 0x1E	; 30
    1556:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("  cmH2O",1);//Escreve um texto do tamanho 1
    155a:	61 e0       	ldi	r22, 0x01	; 1
    155c:	84 ea       	ldi	r24, 0xA4	; 164
    155e:	91 e0       	ldi	r25, 0x01	; 1
    1560:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 40); //Muda o cursos para a posição 0,40
    1564:	68 e2       	ldi	r22, 0x28	; 40
    1566:	80 e0       	ldi	r24, 0x00	; 0
    1568:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(str9,1); //Escreve um texto do tamanho 1
    156c:	61 e0       	ldi	r22, 0x01	; 1
    156e:	81 e7       	ldi	r24, 0x71	; 113
    1570:	92 e0       	ldi	r25, 0x02	; 2
    1572:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(30, 40); //Muda o cursos para a posição 30,40
    1576:	68 e2       	ldi	r22, 0x28	; 40
    1578:	8e e1       	ldi	r24, 0x1E	; 30
    157a:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("* cmH2O",1);//Escreve um texto do tamanho 1
    157e:	61 e0       	ldi	r22, 0x01	; 1
    1580:	8d eb       	ldi	r24, 0xBD	; 189
    1582:	91 e0       	ldi	r25, 0x01	; 1
    1584:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			
			nokia_lcd_render(); //Atualiza a tela do display com o conteúdo do buffer
    1588:	0e 94 4d 13 	call	0x269a	; 0x269a <nokia_lcd_render>
			
		}
		
		if((flag_t == 1) && (flag_confvcv == 1)){
    158c:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <flag_t>
    1590:	81 30       	cpi	r24, 0x01	; 1
    1592:	09 f0       	breq	.+2      	; 0x1596 <executa_a_cada_200ms+0x5c2>
    1594:	63 c0       	rjmp	.+198    	; 0x165c <executa_a_cada_200ms+0x688>
    1596:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <flag_confvcv>
    159a:	81 30       	cpi	r24, 0x01	; 1
    159c:	09 f0       	breq	.+2      	; 0x15a0 <executa_a_cada_200ms+0x5cc>
    159e:	5e c0       	rjmp	.+188    	; 0x165c <executa_a_cada_200ms+0x688>
			
			nokia_lcd_clear(); //Limpa o LCD
    15a0:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <nokia_lcd_clear>
			
			nokia_lcd_set_cursor(0, 0); //Muda o cursos para a posição 0,0
    15a4:	60 e0       	ldi	r22, 0x00	; 0
    15a6:	80 e0       	ldi	r24, 0x00	; 0
    15a8:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("VCV:",1);
    15ac:	61 e0       	ldi	r22, 0x01	; 1
    15ae:	85 ec       	ldi	r24, 0xC5	; 197
    15b0:	91 e0       	ldi	r25, 0x01	; 1
    15b2:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 8); //Muda o cursos para a posição 0,8
    15b6:	68 e0       	ldi	r22, 0x08	; 8
    15b8:	80 e0       	ldi	r24, 0x00	; 0
    15ba:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("__________",1);
    15be:	61 e0       	ldi	r22, 0x01	; 1
    15c0:	88 e8       	ldi	r24, 0x88	; 136
    15c2:	91 e0       	ldi	r25, 0x01	; 1
    15c4:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 17); //Muda o cursos para a posição 0,17
    15c8:	61 e1       	ldi	r22, 0x11	; 17
    15ca:	80 e0       	ldi	r24, 0x00	; 0
    15cc:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(str1,1); //Escreve um texto do tamanho 1
    15d0:	61 e0       	ldi	r22, 0x01	; 1
    15d2:	85 e5       	ldi	r24, 0x55	; 85
    15d4:	92 e0       	ldi	r25, 0x02	; 2
    15d6:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(30, 17); //Muda o cursos para a posição 30,17
    15da:	61 e1       	ldi	r22, 0x11	; 17
    15dc:	8e e1       	ldi	r24, 0x1E	; 30
    15de:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("* rsp/min",1);//Escreve um texto do tamanho 1
    15e2:	61 e0       	ldi	r22, 0x01	; 1
    15e4:	83 e9       	ldi	r24, 0x93	; 147
    15e6:	91 e0       	ldi	r25, 0x01	; 1
    15e8:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 25); //Muda o cursos para a posição 0,25
    15ec:	69 e1       	ldi	r22, 0x19	; 25
    15ee:	80 e0       	ldi	r24, 0x00	; 0
    15f0:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(str6,1); //Escreve um texto do tamanho 1
    15f4:	61 e0       	ldi	r22, 0x01	; 1
    15f6:	87 e6       	ldi	r24, 0x67	; 103
    15f8:	92 e0       	ldi	r25, 0x02	; 2
    15fa:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(30, 25); //Muda o cursos para a posição 30,25
    15fe:	69 e1       	ldi	r22, 0x19	; 25
    1600:	8e e1       	ldi	r24, 0x1E	; 30
    1602:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("  FiO2",1);//Escreve um texto do tamanho 1
    1606:	61 e0       	ldi	r22, 0x01	; 1
    1608:	8d e9       	ldi	r24, 0x9D	; 157
    160a:	91 e0       	ldi	r25, 0x01	; 1
    160c:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 33); //Muda o cursos para a posição 0,33
    1610:	61 e2       	ldi	r22, 0x21	; 33
    1612:	80 e0       	ldi	r24, 0x00	; 0
    1614:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(str8,1); //Escreve um texto do tamanho 1
    1618:	61 e0       	ldi	r22, 0x01	; 1
    161a:	8e e6       	ldi	r24, 0x6E	; 110
    161c:	92 e0       	ldi	r25, 0x02	; 2
    161e:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(30, 33); //Muda o cursos para a posição 30,33
    1622:	61 e2       	ldi	r22, 0x21	; 33
    1624:	8e e1       	ldi	r24, 0x1E	; 30
    1626:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("  cmH2O",1);//Escreve um texto do tamanho 1
    162a:	61 e0       	ldi	r22, 0x01	; 1
    162c:	84 ea       	ldi	r24, 0xA4	; 164
    162e:	91 e0       	ldi	r25, 0x01	; 1
    1630:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 40); //Muda o cursos para a posição 0,40
    1634:	68 e2       	ldi	r22, 0x28	; 40
    1636:	80 e0       	ldi	r24, 0x00	; 0
    1638:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(str7,1); //Escreve um texto do tamanho 1
    163c:	61 e0       	ldi	r22, 0x01	; 1
    163e:	8b e6       	ldi	r24, 0x6B	; 107
    1640:	92 e0       	ldi	r25, 0x02	; 2
    1642:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(30, 40); //Muda o cursos para a posição 30,40
    1646:	68 e2       	ldi	r22, 0x28	; 40
    1648:	8e e1       	ldi	r24, 0x1E	; 30
    164a:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("  Vol",1);//Escreve um texto do tamanho 1
    164e:	61 e0       	ldi	r22, 0x01	; 1
    1650:	8a ec       	ldi	r24, 0xCA	; 202
    1652:	91 e0       	ldi	r25, 0x01	; 1
    1654:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			
			nokia_lcd_render(); //Atualiza a tela do display com o conteúdo do buffer
    1658:	0e 94 4d 13 	call	0x269a	; 0x269a <nokia_lcd_render>
			
		}
		
		if((flag_t == 2) && (flag_confvcv == 1) ){
    165c:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <flag_t>
    1660:	82 30       	cpi	r24, 0x02	; 2
    1662:	09 f0       	breq	.+2      	; 0x1666 <executa_a_cada_200ms+0x692>
    1664:	63 c0       	rjmp	.+198    	; 0x172c <executa_a_cada_200ms+0x758>
    1666:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <flag_confvcv>
    166a:	81 30       	cpi	r24, 0x01	; 1
    166c:	09 f0       	breq	.+2      	; 0x1670 <executa_a_cada_200ms+0x69c>
    166e:	5e c0       	rjmp	.+188    	; 0x172c <executa_a_cada_200ms+0x758>
			
			nokia_lcd_clear(); //Limpa o LCD
    1670:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <nokia_lcd_clear>
			
			nokia_lcd_set_cursor(0, 0); //Muda o cursos para a posição 0,0
    1674:	60 e0       	ldi	r22, 0x00	; 0
    1676:	80 e0       	ldi	r24, 0x00	; 0
    1678:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("VCV: ",1);
    167c:	61 e0       	ldi	r22, 0x01	; 1
    167e:	80 ed       	ldi	r24, 0xD0	; 208
    1680:	91 e0       	ldi	r25, 0x01	; 1
    1682:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 8); //Muda o cursos para a posição 0,8
    1686:	68 e0       	ldi	r22, 0x08	; 8
    1688:	80 e0       	ldi	r24, 0x00	; 0
    168a:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("__________",1);
    168e:	61 e0       	ldi	r22, 0x01	; 1
    1690:	88 e8       	ldi	r24, 0x88	; 136
    1692:	91 e0       	ldi	r25, 0x01	; 1
    1694:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 17); //Muda o cursos para a posição 0,17
    1698:	61 e1       	ldi	r22, 0x11	; 17
    169a:	80 e0       	ldi	r24, 0x00	; 0
    169c:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(str1,1); //Escreve um texto do tamanho 1
    16a0:	61 e0       	ldi	r22, 0x01	; 1
    16a2:	85 e5       	ldi	r24, 0x55	; 85
    16a4:	92 e0       	ldi	r25, 0x02	; 2
    16a6:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(30, 17); //Muda o cursos para a posição 30,17
    16aa:	61 e1       	ldi	r22, 0x11	; 17
    16ac:	8e e1       	ldi	r24, 0x1E	; 30
    16ae:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("  rsp/min",1);//Escreve um texto do tamanho 1
    16b2:	61 e0       	ldi	r22, 0x01	; 1
    16b4:	8c ea       	ldi	r24, 0xAC	; 172
    16b6:	91 e0       	ldi	r25, 0x01	; 1
    16b8:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 25); //Muda o cursos para a posição 0,25
    16bc:	69 e1       	ldi	r22, 0x19	; 25
    16be:	80 e0       	ldi	r24, 0x00	; 0
    16c0:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(str6,1); //Escreve um texto do tamanho 1
    16c4:	61 e0       	ldi	r22, 0x01	; 1
    16c6:	87 e6       	ldi	r24, 0x67	; 103
    16c8:	92 e0       	ldi	r25, 0x02	; 2
    16ca:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(30, 25); //Muda o cursos para a posição 30,25
    16ce:	69 e1       	ldi	r22, 0x19	; 25
    16d0:	8e e1       	ldi	r24, 0x1E	; 30
    16d2:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("* FiO2",1);//Escreve um texto do tamanho 1
    16d6:	61 e0       	ldi	r22, 0x01	; 1
    16d8:	86 eb       	ldi	r24, 0xB6	; 182
    16da:	91 e0       	ldi	r25, 0x01	; 1
    16dc:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 33); //Muda o cursos para a posição 0,33
    16e0:	61 e2       	ldi	r22, 0x21	; 33
    16e2:	80 e0       	ldi	r24, 0x00	; 0
    16e4:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(str8,1); //Escreve um texto do tamanho 1
    16e8:	61 e0       	ldi	r22, 0x01	; 1
    16ea:	8e e6       	ldi	r24, 0x6E	; 110
    16ec:	92 e0       	ldi	r25, 0x02	; 2
    16ee:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(30, 33); //Muda o cursos para a posição 30,33
    16f2:	61 e2       	ldi	r22, 0x21	; 33
    16f4:	8e e1       	ldi	r24, 0x1E	; 30
    16f6:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("  cmH2O",1);//Escreve um texto do tamanho 1
    16fa:	61 e0       	ldi	r22, 0x01	; 1
    16fc:	84 ea       	ldi	r24, 0xA4	; 164
    16fe:	91 e0       	ldi	r25, 0x01	; 1
    1700:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 40); //Muda o cursos para a posição 0,40
    1704:	68 e2       	ldi	r22, 0x28	; 40
    1706:	80 e0       	ldi	r24, 0x00	; 0
    1708:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(str7,1); //Escreve um texto do tamanho 1
    170c:	61 e0       	ldi	r22, 0x01	; 1
    170e:	8b e6       	ldi	r24, 0x6B	; 107
    1710:	92 e0       	ldi	r25, 0x02	; 2
    1712:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(30, 40); //Muda o cursos para a posição 30,40
    1716:	68 e2       	ldi	r22, 0x28	; 40
    1718:	8e e1       	ldi	r24, 0x1E	; 30
    171a:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("  Vol",1);//Escreve um texto do tamanho 1
    171e:	61 e0       	ldi	r22, 0x01	; 1
    1720:	8a ec       	ldi	r24, 0xCA	; 202
    1722:	91 e0       	ldi	r25, 0x01	; 1
    1724:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			
			nokia_lcd_render(); //Atualiza a tela do display com o conteúdo do buffer
    1728:	0e 94 4d 13 	call	0x269a	; 0x269a <nokia_lcd_render>
			
		}
		
		if((flag_t == 3) && (flag_confvcv == 1) ){
    172c:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <flag_t>
    1730:	83 30       	cpi	r24, 0x03	; 3
    1732:	09 f0       	breq	.+2      	; 0x1736 <executa_a_cada_200ms+0x762>
    1734:	63 c0       	rjmp	.+198    	; 0x17fc <executa_a_cada_200ms+0x828>
    1736:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <flag_confvcv>
    173a:	81 30       	cpi	r24, 0x01	; 1
    173c:	09 f0       	breq	.+2      	; 0x1740 <executa_a_cada_200ms+0x76c>
    173e:	5e c0       	rjmp	.+188    	; 0x17fc <executa_a_cada_200ms+0x828>
			
			nokia_lcd_clear(); //Limpa o LCD
    1740:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <nokia_lcd_clear>
			
			nokia_lcd_set_cursor(0, 0); //Muda o cursos para a posição 0,0
    1744:	60 e0       	ldi	r22, 0x00	; 0
    1746:	80 e0       	ldi	r24, 0x00	; 0
    1748:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("VCV: ",1);
    174c:	61 e0       	ldi	r22, 0x01	; 1
    174e:	80 ed       	ldi	r24, 0xD0	; 208
    1750:	91 e0       	ldi	r25, 0x01	; 1
    1752:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 8); //Muda o cursos para a posição 0,8
    1756:	68 e0       	ldi	r22, 0x08	; 8
    1758:	80 e0       	ldi	r24, 0x00	; 0
    175a:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("__________",1);
    175e:	61 e0       	ldi	r22, 0x01	; 1
    1760:	88 e8       	ldi	r24, 0x88	; 136
    1762:	91 e0       	ldi	r25, 0x01	; 1
    1764:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 17); //Muda o cursos para a posição 0,17
    1768:	61 e1       	ldi	r22, 0x11	; 17
    176a:	80 e0       	ldi	r24, 0x00	; 0
    176c:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(str1,1); //Escreve um texto do tamanho 1
    1770:	61 e0       	ldi	r22, 0x01	; 1
    1772:	85 e5       	ldi	r24, 0x55	; 85
    1774:	92 e0       	ldi	r25, 0x02	; 2
    1776:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(30, 17); //Muda o cursos para a posição 30,17
    177a:	61 e1       	ldi	r22, 0x11	; 17
    177c:	8e e1       	ldi	r24, 0x1E	; 30
    177e:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("  rsp/min",1);//Escreve um texto do tamanho 1
    1782:	61 e0       	ldi	r22, 0x01	; 1
    1784:	8c ea       	ldi	r24, 0xAC	; 172
    1786:	91 e0       	ldi	r25, 0x01	; 1
    1788:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 25); //Muda o cursos para a posição 0,25
    178c:	69 e1       	ldi	r22, 0x19	; 25
    178e:	80 e0       	ldi	r24, 0x00	; 0
    1790:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(str6,1); //Escreve um texto do tamanho 1
    1794:	61 e0       	ldi	r22, 0x01	; 1
    1796:	87 e6       	ldi	r24, 0x67	; 103
    1798:	92 e0       	ldi	r25, 0x02	; 2
    179a:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(30, 25); //Muda o cursos para a posição 30,25
    179e:	69 e1       	ldi	r22, 0x19	; 25
    17a0:	8e e1       	ldi	r24, 0x1E	; 30
    17a2:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("  FiO2",1);//Escreve um texto do tamanho 1
    17a6:	61 e0       	ldi	r22, 0x01	; 1
    17a8:	8d e9       	ldi	r24, 0x9D	; 157
    17aa:	91 e0       	ldi	r25, 0x01	; 1
    17ac:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 33); //Muda o cursos para a posição 0,33
    17b0:	61 e2       	ldi	r22, 0x21	; 33
    17b2:	80 e0       	ldi	r24, 0x00	; 0
    17b4:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(str8,1); //Escreve um texto do tamanho 1
    17b8:	61 e0       	ldi	r22, 0x01	; 1
    17ba:	8e e6       	ldi	r24, 0x6E	; 110
    17bc:	92 e0       	ldi	r25, 0x02	; 2
    17be:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(30, 33); //Muda o cursos para a posição 30,33
    17c2:	61 e2       	ldi	r22, 0x21	; 33
    17c4:	8e e1       	ldi	r24, 0x1E	; 30
    17c6:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("* cmH2O",1);//Escreve um texto do tamanho 1
    17ca:	61 e0       	ldi	r22, 0x01	; 1
    17cc:	8d eb       	ldi	r24, 0xBD	; 189
    17ce:	91 e0       	ldi	r25, 0x01	; 1
    17d0:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 40); //Muda o cursos para a posição 0,40
    17d4:	68 e2       	ldi	r22, 0x28	; 40
    17d6:	80 e0       	ldi	r24, 0x00	; 0
    17d8:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(str7,1); //Escreve um texto do tamanho 1
    17dc:	61 e0       	ldi	r22, 0x01	; 1
    17de:	8b e6       	ldi	r24, 0x6B	; 107
    17e0:	92 e0       	ldi	r25, 0x02	; 2
    17e2:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(30, 40); //Muda o cursos para a posição 30,40
    17e6:	68 e2       	ldi	r22, 0x28	; 40
    17e8:	8e e1       	ldi	r24, 0x1E	; 30
    17ea:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("  Vol",1);//Escreve um texto do tamanho 1
    17ee:	61 e0       	ldi	r22, 0x01	; 1
    17f0:	8a ec       	ldi	r24, 0xCA	; 202
    17f2:	91 e0       	ldi	r25, 0x01	; 1
    17f4:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			
			nokia_lcd_render(); //Atualiza a tela do display com o conteúdo do buffer
    17f8:	0e 94 4d 13 	call	0x269a	; 0x269a <nokia_lcd_render>
			
		}
		
		if((flag_t == 4) && (flag_confvcv == 1)){
    17fc:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <flag_t>
    1800:	84 30       	cpi	r24, 0x04	; 4
    1802:	09 f0       	breq	.+2      	; 0x1806 <executa_a_cada_200ms+0x832>
    1804:	63 c0       	rjmp	.+198    	; 0x18cc <executa_a_cada_200ms+0x8f8>
    1806:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <flag_confvcv>
    180a:	81 30       	cpi	r24, 0x01	; 1
    180c:	09 f0       	breq	.+2      	; 0x1810 <executa_a_cada_200ms+0x83c>
    180e:	5e c0       	rjmp	.+188    	; 0x18cc <executa_a_cada_200ms+0x8f8>
			
			nokia_lcd_clear(); //Limpa o LCD
    1810:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <nokia_lcd_clear>
			
			nokia_lcd_set_cursor(0, 0); //Muda o cursos para a posição 0,0
    1814:	60 e0       	ldi	r22, 0x00	; 0
    1816:	80 e0       	ldi	r24, 0x00	; 0
    1818:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("VCV: ",1);
    181c:	61 e0       	ldi	r22, 0x01	; 1
    181e:	80 ed       	ldi	r24, 0xD0	; 208
    1820:	91 e0       	ldi	r25, 0x01	; 1
    1822:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 8); //Muda o cursos para a posição 0,8
    1826:	68 e0       	ldi	r22, 0x08	; 8
    1828:	80 e0       	ldi	r24, 0x00	; 0
    182a:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("__________",1);
    182e:	61 e0       	ldi	r22, 0x01	; 1
    1830:	88 e8       	ldi	r24, 0x88	; 136
    1832:	91 e0       	ldi	r25, 0x01	; 1
    1834:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 17); //Muda o cursos para a posição 0,17
    1838:	61 e1       	ldi	r22, 0x11	; 17
    183a:	80 e0       	ldi	r24, 0x00	; 0
    183c:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(str1,1); //Escreve um texto do tamanho 1
    1840:	61 e0       	ldi	r22, 0x01	; 1
    1842:	85 e5       	ldi	r24, 0x55	; 85
    1844:	92 e0       	ldi	r25, 0x02	; 2
    1846:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(30, 17); //Muda o cursos para a posição 30,17
    184a:	61 e1       	ldi	r22, 0x11	; 17
    184c:	8e e1       	ldi	r24, 0x1E	; 30
    184e:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("  rsp/min",1);//Escreve um texto do tamanho 1
    1852:	61 e0       	ldi	r22, 0x01	; 1
    1854:	8c ea       	ldi	r24, 0xAC	; 172
    1856:	91 e0       	ldi	r25, 0x01	; 1
    1858:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 25); //Muda o cursos para a posição 0,25
    185c:	69 e1       	ldi	r22, 0x19	; 25
    185e:	80 e0       	ldi	r24, 0x00	; 0
    1860:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(str6,1); //Escreve um texto do tamanho 1
    1864:	61 e0       	ldi	r22, 0x01	; 1
    1866:	87 e6       	ldi	r24, 0x67	; 103
    1868:	92 e0       	ldi	r25, 0x02	; 2
    186a:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(30, 25); //Muda o cursos para a posição 30,25
    186e:	69 e1       	ldi	r22, 0x19	; 25
    1870:	8e e1       	ldi	r24, 0x1E	; 30
    1872:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("  FiO2",1);//Escreve um texto do tamanho 1
    1876:	61 e0       	ldi	r22, 0x01	; 1
    1878:	8d e9       	ldi	r24, 0x9D	; 157
    187a:	91 e0       	ldi	r25, 0x01	; 1
    187c:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 33); //Muda o cursos para a posição 0,33
    1880:	61 e2       	ldi	r22, 0x21	; 33
    1882:	80 e0       	ldi	r24, 0x00	; 0
    1884:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(str8,1); //Escreve um texto do tamanho 1
    1888:	61 e0       	ldi	r22, 0x01	; 1
    188a:	8e e6       	ldi	r24, 0x6E	; 110
    188c:	92 e0       	ldi	r25, 0x02	; 2
    188e:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(30, 33); //Muda o cursos para a posição 30,33
    1892:	61 e2       	ldi	r22, 0x21	; 33
    1894:	8e e1       	ldi	r24, 0x1E	; 30
    1896:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("  cmH2O",1);//Escreve um texto do tamanho 1
    189a:	61 e0       	ldi	r22, 0x01	; 1
    189c:	84 ea       	ldi	r24, 0xA4	; 164
    189e:	91 e0       	ldi	r25, 0x01	; 1
    18a0:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 40); //Muda o cursos para a posição 0,40
    18a4:	68 e2       	ldi	r22, 0x28	; 40
    18a6:	80 e0       	ldi	r24, 0x00	; 0
    18a8:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(str7,1); //Escreve um texto do tamanho 1
    18ac:	61 e0       	ldi	r22, 0x01	; 1
    18ae:	8b e6       	ldi	r24, 0x6B	; 107
    18b0:	92 e0       	ldi	r25, 0x02	; 2
    18b2:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(30, 40); //Muda o cursos para a posição 30,40
    18b6:	68 e2       	ldi	r22, 0x28	; 40
    18b8:	8e e1       	ldi	r24, 0x1E	; 30
    18ba:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("* Vol",1);//Escreve um texto do tamanho 1
    18be:	61 e0       	ldi	r22, 0x01	; 1
    18c0:	86 ed       	ldi	r24, 0xD6	; 214
    18c2:	91 e0       	ldi	r25, 0x01	; 1
    18c4:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			
			nokia_lcd_render(); //Atualiza a tela do display com o conteúdo do buffer
    18c8:	0e 94 4d 13 	call	0x269a	; 0x269a <nokia_lcd_render>
			
		}
		
		if(flag_t == 5){
    18cc:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <flag_t>
    18d0:	85 30       	cpi	r24, 0x05	; 5
    18d2:	09 f0       	breq	.+2      	; 0x18d6 <executa_a_cada_200ms+0x902>
    18d4:	4c c0       	rjmp	.+152    	; 0x196e <executa_a_cada_200ms+0x99a>
			nokia_lcd_clear(); //Limpa o LCD
    18d6:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <nokia_lcd_clear>
			
			nokia_lcd_set_cursor(0, 0); //Muda o cursos para a posição 0,0
    18da:	60 e0       	ldi	r22, 0x00	; 0
    18dc:	80 e0       	ldi	r24, 0x00	; 0
    18de:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("Conf. Alerta",1);
    18e2:	61 e0       	ldi	r22, 0x01	; 1
    18e4:	8c ed       	ldi	r24, 0xDC	; 220
    18e6:	91 e0       	ldi	r25, 0x01	; 1
    18e8:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 8); //Muda o cursos para a posição 0,8
    18ec:	68 e0       	ldi	r22, 0x08	; 8
    18ee:	80 e0       	ldi	r24, 0x00	; 0
    18f0:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("____________",1);
    18f4:	61 e0       	ldi	r22, 0x01	; 1
    18f6:	83 e4       	ldi	r24, 0x43	; 67
    18f8:	91 e0       	ldi	r25, 0x01	; 1
    18fa:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 17); //Muda o cursos para a posição 0,17 ou seja, pula uma linha
    18fe:	61 e1       	ldi	r22, 0x11	; 17
    1900:	80 e0       	ldi	r24, 0x00	; 0
    1902:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(str10,1); //Escreve um texto do tamanho 1
    1906:	61 e0       	ldi	r22, 0x01	; 1
    1908:	84 e7       	ldi	r24, 0x74	; 116
    190a:	92 e0       	ldi	r25, 0x02	; 2
    190c:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(30, 17); //Muda o cursos para a posição 30,17
    1910:	61 e1       	ldi	r22, 0x11	; 17
    1912:	8e e1       	ldi	r24, 0x1E	; 30
    1914:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("*bpm_max",1);//Escreve um texto do tamanho 1
    1918:	61 e0       	ldi	r22, 0x01	; 1
    191a:	89 ee       	ldi	r24, 0xE9	; 233
    191c:	91 e0       	ldi	r25, 0x01	; 1
    191e:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 26); //Muda o cursos para a posição 0,26 ou seja, pula uma linha
    1922:	6a e1       	ldi	r22, 0x1A	; 26
    1924:	80 e0       	ldi	r24, 0x00	; 0
    1926:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(str11,1); //Escreve um texto do tamanho 1
    192a:	61 e0       	ldi	r22, 0x01	; 1
    192c:	87 e7       	ldi	r24, 0x77	; 119
    192e:	92 e0       	ldi	r25, 0x02	; 2
    1930:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(30, 26); //Muda o cursos para a posição 30,26
    1934:	6a e1       	ldi	r22, 0x1A	; 26
    1936:	8e e1       	ldi	r24, 0x1E	; 30
    1938:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(" bpm_min",1);//Escreve um texto do tamanho 1
    193c:	61 e0       	ldi	r22, 0x01	; 1
    193e:	82 ef       	ldi	r24, 0xF2	; 242
    1940:	91 e0       	ldi	r25, 0x01	; 1
    1942:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 36); //Muda o cursos para a posição 0,26 ou seja, pula uma linha
    1946:	64 e2       	ldi	r22, 0x24	; 36
    1948:	80 e0       	ldi	r24, 0x00	; 0
    194a:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(str12,1); //Escreve um texto do tamanho 1
    194e:	61 e0       	ldi	r22, 0x01	; 1
    1950:	8a e7       	ldi	r24, 0x7A	; 122
    1952:	92 e0       	ldi	r25, 0x02	; 2
    1954:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(30, 36); //Muda o cursos para a posição 30,36
    1958:	64 e2       	ldi	r22, 0x24	; 36
    195a:	8e e1       	ldi	r24, 0x1E	; 30
    195c:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(" %SpO2",1);//Escreve um texto do tamanho 1
    1960:	61 e0       	ldi	r22, 0x01	; 1
    1962:	8b ef       	ldi	r24, 0xFB	; 251
    1964:	91 e0       	ldi	r25, 0x01	; 1
    1966:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			
			
			nokia_lcd_render(); //Atualiza a tela do display com o conteúdo do buffer
    196a:	0e 94 4d 13 	call	0x269a	; 0x269a <nokia_lcd_render>
		}
		if(flag_t == 6){
    196e:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <flag_t>
    1972:	86 30       	cpi	r24, 0x06	; 6
    1974:	09 f0       	breq	.+2      	; 0x1978 <executa_a_cada_200ms+0x9a4>
    1976:	4c c0       	rjmp	.+152    	; 0x1a10 <executa_a_cada_200ms+0xa3c>
			nokia_lcd_clear(); //Limpa o LCD
    1978:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <nokia_lcd_clear>
			
			nokia_lcd_set_cursor(0, 0); //Muda o cursos para a posição 0,0
    197c:	60 e0       	ldi	r22, 0x00	; 0
    197e:	80 e0       	ldi	r24, 0x00	; 0
    1980:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("Conf. Alerta",1);
    1984:	61 e0       	ldi	r22, 0x01	; 1
    1986:	8c ed       	ldi	r24, 0xDC	; 220
    1988:	91 e0       	ldi	r25, 0x01	; 1
    198a:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 8); //Muda o cursos para a posição 0,8
    198e:	68 e0       	ldi	r22, 0x08	; 8
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("____________",1);
    1996:	61 e0       	ldi	r22, 0x01	; 1
    1998:	83 e4       	ldi	r24, 0x43	; 67
    199a:	91 e0       	ldi	r25, 0x01	; 1
    199c:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 17); //Muda o cursos para a posição 0,17 ou seja, pula uma linha
    19a0:	61 e1       	ldi	r22, 0x11	; 17
    19a2:	80 e0       	ldi	r24, 0x00	; 0
    19a4:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(str10,1); //Escreve um texto do tamanho 1
    19a8:	61 e0       	ldi	r22, 0x01	; 1
    19aa:	84 e7       	ldi	r24, 0x74	; 116
    19ac:	92 e0       	ldi	r25, 0x02	; 2
    19ae:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(30, 17); //Muda o cursos para a posição 30,17
    19b2:	61 e1       	ldi	r22, 0x11	; 17
    19b4:	8e e1       	ldi	r24, 0x1E	; 30
    19b6:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(" bpm_max",1);//Escreve um texto do tamanho 1
    19ba:	61 e0       	ldi	r22, 0x01	; 1
    19bc:	82 e0       	ldi	r24, 0x02	; 2
    19be:	92 e0       	ldi	r25, 0x02	; 2
    19c0:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 26); //Muda o cursos para a posição 0,26 ou seja, pula uma linha
    19c4:	6a e1       	ldi	r22, 0x1A	; 26
    19c6:	80 e0       	ldi	r24, 0x00	; 0
    19c8:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(str11,1); //Escreve um texto do tamanho 1
    19cc:	61 e0       	ldi	r22, 0x01	; 1
    19ce:	87 e7       	ldi	r24, 0x77	; 119
    19d0:	92 e0       	ldi	r25, 0x02	; 2
    19d2:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(30, 26); //Muda o cursos para a posição 30,26
    19d6:	6a e1       	ldi	r22, 0x1A	; 26
    19d8:	8e e1       	ldi	r24, 0x1E	; 30
    19da:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("*bpm_min",1);//Escreve um texto do tamanho 1
    19de:	61 e0       	ldi	r22, 0x01	; 1
    19e0:	8b e0       	ldi	r24, 0x0B	; 11
    19e2:	92 e0       	ldi	r25, 0x02	; 2
    19e4:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 36); //Muda o cursos para a posição 0,36 ou seja, pula uma linha
    19e8:	64 e2       	ldi	r22, 0x24	; 36
    19ea:	80 e0       	ldi	r24, 0x00	; 0
    19ec:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(str12,1); //Escreve um texto do tamanho 1
    19f0:	61 e0       	ldi	r22, 0x01	; 1
    19f2:	8a e7       	ldi	r24, 0x7A	; 122
    19f4:	92 e0       	ldi	r25, 0x02	; 2
    19f6:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(30, 36); //Muda o cursos para a posição 30,36
    19fa:	64 e2       	ldi	r22, 0x24	; 36
    19fc:	8e e1       	ldi	r24, 0x1E	; 30
    19fe:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(" %SpO2",1);//Escreve um texto do tamanho 1
    1a02:	61 e0       	ldi	r22, 0x01	; 1
    1a04:	8b ef       	ldi	r24, 0xFB	; 251
    1a06:	91 e0       	ldi	r25, 0x01	; 1
    1a08:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			
			
			nokia_lcd_render(); //Atualiza a tela do display com o conteúdo do buffer
    1a0c:	0e 94 4d 13 	call	0x269a	; 0x269a <nokia_lcd_render>
		}
		if(flag_t == 7){
    1a10:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <flag_t>
    1a14:	87 30       	cpi	r24, 0x07	; 7
    1a16:	09 f0       	breq	.+2      	; 0x1a1a <executa_a_cada_200ms+0xa46>
    1a18:	4c c0       	rjmp	.+152    	; 0x1ab2 <executa_a_cada_200ms+0xade>
			nokia_lcd_clear(); //Limpa o LCD
    1a1a:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <nokia_lcd_clear>
			
			nokia_lcd_set_cursor(0, 0); //Muda o cursos para a posição 0,0
    1a1e:	60 e0       	ldi	r22, 0x00	; 0
    1a20:	80 e0       	ldi	r24, 0x00	; 0
    1a22:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("Conf. Alerta",1);
    1a26:	61 e0       	ldi	r22, 0x01	; 1
    1a28:	8c ed       	ldi	r24, 0xDC	; 220
    1a2a:	91 e0       	ldi	r25, 0x01	; 1
    1a2c:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 8); //Muda o cursos para a posição 0,8
    1a30:	68 e0       	ldi	r22, 0x08	; 8
    1a32:	80 e0       	ldi	r24, 0x00	; 0
    1a34:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("____________",1);
    1a38:	61 e0       	ldi	r22, 0x01	; 1
    1a3a:	83 e4       	ldi	r24, 0x43	; 67
    1a3c:	91 e0       	ldi	r25, 0x01	; 1
    1a3e:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 17); //Muda o cursos para a posição 0,17 ou seja, pula uma linha
    1a42:	61 e1       	ldi	r22, 0x11	; 17
    1a44:	80 e0       	ldi	r24, 0x00	; 0
    1a46:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(str10,1); //Escreve um texto do tamanho 1
    1a4a:	61 e0       	ldi	r22, 0x01	; 1
    1a4c:	84 e7       	ldi	r24, 0x74	; 116
    1a4e:	92 e0       	ldi	r25, 0x02	; 2
    1a50:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(30, 17); //Muda o cursos para a posição 30,17
    1a54:	61 e1       	ldi	r22, 0x11	; 17
    1a56:	8e e1       	ldi	r24, 0x1E	; 30
    1a58:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(" bpm_max",1);//Escreve um texto do tamanho 1
    1a5c:	61 e0       	ldi	r22, 0x01	; 1
    1a5e:	82 e0       	ldi	r24, 0x02	; 2
    1a60:	92 e0       	ldi	r25, 0x02	; 2
    1a62:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 26); //Muda o cursos para a posição 0,26 ou seja, pula uma linha
    1a66:	6a e1       	ldi	r22, 0x1A	; 26
    1a68:	80 e0       	ldi	r24, 0x00	; 0
    1a6a:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(str11,1); //Escreve um texto do tamanho 1
    1a6e:	61 e0       	ldi	r22, 0x01	; 1
    1a70:	87 e7       	ldi	r24, 0x77	; 119
    1a72:	92 e0       	ldi	r25, 0x02	; 2
    1a74:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(30, 26); //Muda o cursos para a posição 30,26
    1a78:	6a e1       	ldi	r22, 0x1A	; 26
    1a7a:	8e e1       	ldi	r24, 0x1E	; 30
    1a7c:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(" bpm_min",1);//Escreve um texto do tamanho 1
    1a80:	61 e0       	ldi	r22, 0x01	; 1
    1a82:	82 ef       	ldi	r24, 0xF2	; 242
    1a84:	91 e0       	ldi	r25, 0x01	; 1
    1a86:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 36); //Muda o cursos para a posição 0,36 ou seja, pula uma linha
    1a8a:	64 e2       	ldi	r22, 0x24	; 36
    1a8c:	80 e0       	ldi	r24, 0x00	; 0
    1a8e:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(str12,1); //Escreve um texto do tamanho 1
    1a92:	61 e0       	ldi	r22, 0x01	; 1
    1a94:	8a e7       	ldi	r24, 0x7A	; 122
    1a96:	92 e0       	ldi	r25, 0x02	; 2
    1a98:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(30, 36); //Muda o cursos para a posição 30,36
    1a9c:	64 e2       	ldi	r22, 0x24	; 36
    1a9e:	8e e1       	ldi	r24, 0x1E	; 30
    1aa0:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("*%SpO2",1);//Escreve um texto do tamanho 1
    1aa4:	61 e0       	ldi	r22, 0x01	; 1
    1aa6:	84 e1       	ldi	r24, 0x14	; 20
    1aa8:	92 e0       	ldi	r25, 0x02	; 2
    1aaa:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			
			
			nokia_lcd_render(); //Atualiza a tela do display com o conteúdo do buffer
    1aae:	0e 94 4d 13 	call	0x269a	; 0x269a <nokia_lcd_render>
		}
		
		if(flag_t == 8){
    1ab2:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <flag_t>
    1ab6:	88 30       	cpi	r24, 0x08	; 8
    1ab8:	09 f0       	breq	.+2      	; 0x1abc <executa_a_cada_200ms+0xae8>
    1aba:	70 c0       	rjmp	.+224    	; 0x1b9c <executa_a_cada_200ms+0xbc8>
			
			nokia_lcd_clear(); //Limpa o LCD
    1abc:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <nokia_lcd_clear>
			
			nokia_lcd_set_cursor(0, 0); //Muda o cursos para a posição 0,0
    1ac0:	60 e0       	ldi	r22, 0x00	; 0
    1ac2:	80 e0       	ldi	r24, 0x00	; 0
    1ac4:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("Sinais Vitais",1);
    1ac8:	61 e0       	ldi	r22, 0x01	; 1
    1aca:	8b e1       	ldi	r24, 0x1B	; 27
    1acc:	92 e0       	ldi	r25, 0x02	; 2
    1ace:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 8); //Muda o cursos para a posição 0,8
    1ad2:	68 e0       	ldi	r22, 0x08	; 8
    1ad4:	80 e0       	ldi	r24, 0x00	; 0
    1ad6:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("____________",1);
    1ada:	61 e0       	ldi	r22, 0x01	; 1
    1adc:	83 e4       	ldi	r24, 0x43	; 67
    1ade:	91 e0       	ldi	r25, 0x01	; 1
    1ae0:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 17); //Muda o cursos para a posição 0,17 ou seja, pula uma linha
    1ae4:	61 e1       	ldi	r22, 0x11	; 17
    1ae6:	80 e0       	ldi	r24, 0x00	; 0
    1ae8:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(str2,1); //Escreve um texto do tamanho 1
    1aec:	61 e0       	ldi	r22, 0x01	; 1
    1aee:	88 e5       	ldi	r24, 0x58	; 88
    1af0:	92 e0       	ldi	r25, 0x02	; 2
    1af2:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(44, 17); //Muda o cursos para a posição 44,15
    1af6:	61 e1       	ldi	r22, 0x11	; 17
    1af8:	8c e2       	ldi	r24, 0x2C	; 44
    1afa:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("bpm",1);//Escreve um texto do tamanho 1
    1afe:	61 e0       	ldi	r22, 0x01	; 1
    1b00:	89 e2       	ldi	r24, 0x29	; 41
    1b02:	92 e0       	ldi	r25, 0x02	; 2
    1b04:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 26); //Muda o cursos para a posição 0,26 ou seja, pula uma linha
    1b08:	6a e1       	ldi	r22, 0x1A	; 26
    1b0a:	80 e0       	ldi	r24, 0x00	; 0
    1b0c:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(str3,1); //Escreve um texto do tamanho 1
    1b10:	61 e0       	ldi	r22, 0x01	; 1
    1b12:	8c e5       	ldi	r24, 0x5C	; 92
    1b14:	92 e0       	ldi	r25, 0x02	; 2
    1b16:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(44, 26); //Muda o cursos para a posição 44,26
    1b1a:	6a e1       	ldi	r22, 0x1A	; 26
    1b1c:	8c e2       	ldi	r24, 0x2C	; 44
    1b1e:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("%SpO2",1);//Escreve um texto do tamanho 1
    1b22:	61 e0       	ldi	r22, 0x01	; 1
    1b24:	8d e2       	ldi	r24, 0x2D	; 45
    1b26:	92 e0       	ldi	r25, 0x02	; 2
    1b28:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 33); //Muda o cursos para a posição 0,33 ou seja, pula uma linha
    1b2c:	61 e2       	ldi	r22, 0x21	; 33
    1b2e:	80 e0       	ldi	r24, 0x00	; 0
    1b30:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(str4,1); //Escreve um texto do tamanho 1
    1b34:	61 e0       	ldi	r22, 0x01	; 1
    1b36:	80 e6       	ldi	r24, 0x60	; 96
    1b38:	92 e0       	ldi	r25, 0x02	; 2
    1b3a:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(15, 33); //Muda o cursos para a posição 15,33 ou seja, pula uma linha
    1b3e:	61 e2       	ldi	r22, 0x21	; 33
    1b40:	8f e0       	ldi	r24, 0x0F	; 15
    1b42:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(",",1);//Escreve um texto do tamanho 1
    1b46:	61 e0       	ldi	r22, 0x01	; 1
    1b48:	83 e3       	ldi	r24, 0x33	; 51
    1b4a:	92 e0       	ldi	r25, 0x02	; 2
    1b4c:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(20, 33); //Muda o cursos para a posição 20,33 ou seja, pula uma linha
    1b50:	61 e2       	ldi	r22, 0x21	; 33
    1b52:	84 e1       	ldi	r24, 0x14	; 20
    1b54:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(str5,1); //Escreve um texto do tamanho 1
    1b58:	61 e0       	ldi	r22, 0x01	; 1
    1b5a:	84 e6       	ldi	r24, 0x64	; 100
    1b5c:	92 e0       	ldi	r25, 0x02	; 2
    1b5e:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(44, 33); //Muda o cursos para a posição 44,33
    1b62:	61 e2       	ldi	r22, 0x21	; 33
    1b64:	8c e2       	ldi	r24, 0x2C	; 44
    1b66:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("°C",1);//Escreve um texto do tamanho 1
    1b6a:	61 e0       	ldi	r22, 0x01	; 1
    1b6c:	85 e3       	ldi	r24, 0x35	; 53
    1b6e:	92 e0       	ldi	r25, 0x02	; 2
    1b70:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 40); //Muda o cursos para a posição 0,40
    1b74:	68 e2       	ldi	r22, 0x28	; 40
    1b76:	80 e0       	ldi	r24, 0x00	; 0
    1b78:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string(pressao_arterial,1); //Escreve um texto do tamanho 1
    1b7c:	61 e0       	ldi	r22, 0x01	; 1
    1b7e:	89 e0       	ldi	r24, 0x09	; 9
    1b80:	91 e0       	ldi	r25, 0x01	; 1
    1b82:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			nokia_lcd_set_cursor(44, 40); //Muda o cursos para a posição 44,40
    1b86:	68 e2       	ldi	r22, 0x28	; 40
    1b88:	8c e2       	ldi	r24, 0x2C	; 44
    1b8a:	0e 94 3a 13 	call	0x2674	; 0x2674 <nokia_lcd_set_cursor>
			nokia_lcd_write_string("mmHg",1);//Escreve um texto do tamanho 1
    1b8e:	61 e0       	ldi	r22, 0x01	; 1
    1b90:	88 e3       	ldi	r24, 0x38	; 56
    1b92:	92 e0       	ldi	r25, 0x02	; 2
    1b94:	0e 94 17 13 	call	0x262e	; 0x262e <nokia_lcd_write_string>
			
			nokia_lcd_render(); //Atualiza a tela do display com o conteúdo do buffer
    1b98:	0e 94 4d 13 	call	0x269a	; 0x269a <nokia_lcd_render>
		}
		
		flags_200ms = 0;
    1b9c:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <flags_200ms>
	}
}
    1ba0:	00 00       	nop
    1ba2:	0f 90       	pop	r0
    1ba4:	df 91       	pop	r29
    1ba6:	cf 91       	pop	r28
    1ba8:	ff 90       	pop	r15
    1baa:	ef 90       	pop	r14
    1bac:	df 90       	pop	r13
    1bae:	cf 90       	pop	r12
    1bb0:	08 95       	ret

00001bb2 <USART_init>:

void USART_init(unsigned int ubrr){
    1bb2:	cf 93       	push	r28
    1bb4:	df 93       	push	r29
    1bb6:	00 d0       	rcall	.+0      	; 0x1bb8 <USART_init+0x6>
    1bb8:	cd b7       	in	r28, 0x3d	; 61
    1bba:	de b7       	in	r29, 0x3e	; 62
    1bbc:	9a 83       	std	Y+2, r25	; 0x02
    1bbe:	89 83       	std	Y+1, r24	; 0x01
	UBRR0H = (unsigned char)(ubrr>>8); //Ajusta a taxa de transmissão
    1bc0:	85 ec       	ldi	r24, 0xC5	; 197
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	29 81       	ldd	r18, Y+1	; 0x01
    1bc6:	3a 81       	ldd	r19, Y+2	; 0x02
    1bc8:	23 2f       	mov	r18, r19
    1bca:	33 27       	eor	r19, r19
    1bcc:	fc 01       	movw	r30, r24
    1bce:	20 83       	st	Z, r18
	UBRR0L = (unsigned char)ubrr;
    1bd0:	84 ec       	ldi	r24, 0xC4	; 196
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	29 81       	ldd	r18, Y+1	; 0x01
    1bd6:	fc 01       	movw	r30, r24
    1bd8:	20 83       	st	Z, r18
	UCSR0B = 0b10011000;  //Habilita o transmissor e o receptor
    1bda:	81 ec       	ldi	r24, 0xC1	; 193
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	28 e9       	ldi	r18, 0x98	; 152
    1be0:	fc 01       	movw	r30, r24
    1be2:	20 83       	st	Z, r18
	UCSR0C = 0b00000110;  //Sem paridade, 1 bit de parada, 8 bits de dado
    1be4:	82 ec       	ldi	r24, 0xC2	; 194
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	26 e0       	ldi	r18, 0x06	; 6
    1bea:	fc 01       	movw	r30, r24
    1bec:	20 83       	st	Z, r18
}
    1bee:	00 00       	nop
    1bf0:	0f 90       	pop	r0
    1bf2:	0f 90       	pop	r0
    1bf4:	df 91       	pop	r29
    1bf6:	cf 91       	pop	r28
    1bf8:	08 95       	ret

00001bfa <main>:

int main(void)
{
    1bfa:	cf 93       	push	r28
    1bfc:	df 93       	push	r29
    1bfe:	cd b7       	in	r28, 0x3d	; 61
    1c00:	de b7       	in	r29, 0x3e	; 62
    //Registradores de Direção:
	
	DDRB = 0b10111111; //Habilitados quase todos os pinos B como saída, só B6 como entrada
    1c02:	84 e2       	ldi	r24, 0x24	; 36
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	2f eb       	ldi	r18, 0xBF	; 191
    1c08:	fc 01       	movw	r30, r24
    1c0a:	20 83       	st	Z, r18
	DDRC = 0b11111100; //Habilita os pinos C0 e C1 como entradas e o resto como saídas
    1c0c:	87 e2       	ldi	r24, 0x27	; 39
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	2c ef       	ldi	r18, 0xFC	; 252
    1c12:	fc 01       	movw	r30, r24
    1c14:	20 83       	st	Z, r18
	DDRD = 0b10100011; //Habilita os pinos D3, D2, D4 e D6 como entrada. 
    1c16:	8a e2       	ldi	r24, 0x2A	; 42
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	23 ea       	ldi	r18, 0xA3	; 163
    1c1c:	fc 01       	movw	r30, r24
    1c1e:	20 83       	st	Z, r18
	PORTD = 0b01011100; //Aciona o pull-up interno dos pinos D3, D2 e D4, D6
    1c20:	8b e2       	ldi	r24, 0x2B	; 43
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	2c e5       	ldi	r18, 0x5C	; 92
    1c26:	fc 01       	movw	r30, r24
    1c28:	20 83       	st	Z, r18
	PORTC = 0b00000000; //Aciona o pull-up internos dos pinos C0 e C1
    1c2a:	88 e2       	ldi	r24, 0x28	; 40
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	fc 01       	movw	r30, r24
    1c30:	10 82       	st	Z, r1
	PORTB = 0b01111000; //Habilitando o pull-up do pino B6,B5,B4,B3.
    1c32:	85 e2       	ldi	r24, 0x25	; 37
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	28 e7       	ldi	r18, 0x78	; 120
    1c38:	fc 01       	movw	r30, r24
    1c3a:	20 83       	st	Z, r18
	
	
	//Configuração de interrupção:
	
	TCCR0A = 0b00000010;//TC0 operando em modo CTC
    1c3c:	84 e4       	ldi	r24, 0x44	; 68
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	22 e0       	ldi	r18, 0x02	; 2
    1c42:	fc 01       	movw	r30, r24
    1c44:	20 83       	st	Z, r18
	TCCR0B = 0b00000011;//Liga TC0 com prescaler = 64
    1c46:	85 e4       	ldi	r24, 0x45	; 69
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	23 e0       	ldi	r18, 0x03	; 3
    1c4c:	fc 01       	movw	r30, r24
    1c4e:	20 83       	st	Z, r18
	OCR0A  = 249;		//TC0 conta até 249
    1c50:	87 e4       	ldi	r24, 0x47	; 71
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	29 ef       	ldi	r18, 0xF9	; 249
    1c56:	fc 01       	movw	r30, r24
    1c58:	20 83       	st	Z, r18
	TIMSK0 = 0b00000010;//Habilita interrupção por comparação com OCR0A. A interrupção ocorerá a cada 1ms = (64*(249+1))/16MHz
    1c5a:	8e e6       	ldi	r24, 0x6E	; 110
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	22 e0       	ldi	r18, 0x02	; 2
    1c60:	fc 01       	movw	r30, r24
    1c62:	20 83       	st	Z, r18
	
	
	EICRA = 0b00001010; //interrupção externa INT0 e INT1 na borda de descida
    1c64:	89 e6       	ldi	r24, 0x69	; 105
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	2a e0       	ldi	r18, 0x0A	; 10
    1c6a:	fc 01       	movw	r30, r24
    1c6c:	20 83       	st	Z, r18
	EIMSK = 0b00000011; //Habilitada as interrupção externas INT0 e INT1;
    1c6e:	8d e3       	ldi	r24, 0x3D	; 61
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	23 e0       	ldi	r18, 0x03	; 3
    1c74:	fc 01       	movw	r30, r24
    1c76:	20 83       	st	Z, r18
	PCICR = 0b00000101;
    1c78:	88 e6       	ldi	r24, 0x68	; 104
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	25 e0       	ldi	r18, 0x05	; 5
    1c7e:	fc 01       	movw	r30, r24
    1c80:	20 83       	st	Z, r18
	PCMSK2 = 0b01010000;
    1c82:	8d e6       	ldi	r24, 0x6D	; 109
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	20 e5       	ldi	r18, 0x50	; 80
    1c88:	fc 01       	movw	r30, r24
    1c8a:	20 83       	st	Z, r18
	PCMSK0 = 0b01000000;
    1c8c:	8b e6       	ldi	r24, 0x6B	; 107
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	20 e4       	ldi	r18, 0x40	; 64
    1c92:	fc 01       	movw	r30, r24
    1c94:	20 83       	st	Z, r18

	
	//Configuração AD
	ADMUX = 0b01000001; //Tensão Vcc, canal 0;
    1c96:	8c e7       	ldi	r24, 0x7C	; 124
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	21 e4       	ldi	r18, 0x41	; 65
    1c9c:	fc 01       	movw	r30, r24
    1c9e:	20 83       	st	Z, r18
	//ADCSRA = 0b00000111;
	ADCSRA = 0b11101111;//Habilita o AD, a interrupção, modo de conversão contínua, prescaler - 128
    1ca0:	8a e7       	ldi	r24, 0x7A	; 122
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	2f ee       	ldi	r18, 0xEF	; 239
    1ca6:	fc 01       	movw	r30, r24
    1ca8:	20 83       	st	Z, r18
	ADCSRB = 0b00000000;//modo de conversão contínua
    1caa:	8b e7       	ldi	r24, 0x7B	; 123
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	fc 01       	movw	r30, r24
    1cb0:	10 82       	st	Z, r1
	DIDR0 = 0b00111100; //habilita C0 como entrada do ADC
    1cb2:	8e e7       	ldi	r24, 0x7E	; 126
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	2c e3       	ldi	r18, 0x3C	; 60
    1cb8:	fc 01       	movw	r30, r24
    1cba:	20 83       	st	Z, r18
	
	// Configuração PWM
	//TIMER TC1 - modo PWM rápido via ICR1, prescaler = 8
	//TOP = (F_CPU/(Pre*F_PWM)) - 1, com Pre = 8 e F_PWM = 50Hz , TOP = 39999;
	ICR1 = 39999; // Configura o período do PWM (20ms)
    1cbc:	86 e8       	ldi	r24, 0x86	; 134
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	2f e3       	ldi	r18, 0x3F	; 63
    1cc2:	3c e9       	ldi	r19, 0x9C	; 156
    1cc4:	fc 01       	movw	r30, r24
    1cc6:	31 83       	std	Z+1, r19	; 0x01
    1cc8:	20 83       	st	Z, r18
	TCCR1A = 0b10100010; // modo PWN rápido via ICR1, ativa o PWN no OC1B n-invert e o OC1A
    1cca:	80 e8       	ldi	r24, 0x80	; 128
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	22 ea       	ldi	r18, 0xA2	; 162
    1cd0:	fc 01       	movw	r30, r24
    1cd2:	20 83       	st	Z, r18
	TCCR1B = 0b00011010; //prescaler = 8;
    1cd4:	81 e8       	ldi	r24, 0x81	; 129
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	2a e1       	ldi	r18, 0x1A	; 26
    1cda:	fc 01       	movw	r30, r24
    1cdc:	20 83       	st	Z, r18
	
	OCR1A = 2000; //1ms
    1cde:	88 e8       	ldi	r24, 0x88	; 136
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	20 ed       	ldi	r18, 0xD0	; 208
    1ce4:	37 e0       	ldi	r19, 0x07	; 7
    1ce6:	fc 01       	movw	r30, r24
    1ce8:	31 83       	std	Z+1, r19	; 0x01
    1cea:	20 83       	st	Z, r18
	OCR1B = 2000; //1ms
    1cec:	8a e8       	ldi	r24, 0x8A	; 138
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	20 ed       	ldi	r18, 0xD0	; 208
    1cf2:	37 e0       	ldi	r19, 0x07	; 7
    1cf4:	fc 01       	movw	r30, r24
    1cf6:	31 83       	std	Z+1, r19	; 0x01
    1cf8:	20 83       	st	Z, r18
	
	// Configuração USART
	USART_init(MYUNRR);
    1cfa:	87 e6       	ldi	r24, 0x67	; 103
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <USART_init>
	sei(); // habilita interrupções globais, ativando o bit I do SREG
    1d02:	78 94       	sei
	
	nokia_lcd_init(); //Inicia o LCD
    1d04:	0e 94 64 10 	call	0x20c8	; 0x20c8 <nokia_lcd_init>
	
	
    while (1) 
    {
		FreqRespiracao = (FreqRespiracao <= 4) ? 5 : FreqRespiracao;
    1d08:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1d0c:	85 30       	cpi	r24, 0x05	; 5
    1d0e:	08 f4       	brcc	.+2      	; 0x1d12 <main+0x118>
    1d10:	85 e0       	ldi	r24, 0x05	; 5
    1d12:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		FreqRespiracao = (FreqRespiracao >= 31) ? 30 : FreqRespiracao;
    1d16:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1d1a:	8f 31       	cpi	r24, 0x1F	; 31
    1d1c:	08 f0       	brcs	.+2      	; 0x1d20 <main+0x126>
    1d1e:	8e e1       	ldi	r24, 0x1E	; 30
    1d20:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		peep = (peep <= 1) ? 1 : peep;
    1d24:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <peep>
    1d28:	88 23       	and	r24, r24
    1d2a:	09 f4       	brne	.+2      	; 0x1d2e <main+0x134>
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <peep>
		peep = (peep >= 5) ? 5 : peep;
    1d32:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <peep>
    1d36:	86 30       	cpi	r24, 0x06	; 6
    1d38:	08 f0       	brcs	.+2      	; 0x1d3c <main+0x142>
    1d3a:	85 e0       	ldi	r24, 0x05	; 5
    1d3c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <peep>
		dpressao = (dpressao < 1) ? 0 : dpressao;
    1d40:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <dpressao>
    1d44:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <dpressao>
		dpressao = (dpressao > 50) ? 50 : dpressao;
    1d48:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <dpressao>
    1d4c:	83 33       	cpi	r24, 0x33	; 51
    1d4e:	08 f0       	brcs	.+2      	; 0x1d52 <main+0x158>
    1d50:	82 e3       	ldi	r24, 0x32	; 50
    1d52:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <dpressao>
		
		executa_a_cada_150ms();
    1d56:	0e 94 13 07 	call	0xe26	; 0xe26 <executa_a_cada_150ms>
		executa_a_cada_200ms();
    1d5a:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <executa_a_cada_200ms>
		alarme();
    1d5e:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <alarme>
		acend_led();
    1d62:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <acend_led>
    }
    1d66:	d0 cf       	rjmp	.-96     	; 0x1d08 <main+0x10e>

00001d68 <animar_motor>:
}

void animar_motor(uint8_t FreqRespiracao){
    1d68:	cf 93       	push	r28
    1d6a:	df 93       	push	r29
    1d6c:	1f 92       	push	r1
    1d6e:	cd b7       	in	r28, 0x3d	; 61
    1d70:	de b7       	in	r29, 0x3e	; 62
    1d72:	89 83       	std	Y+1, r24	; 0x01
	static uint8_t contador = 0;
	if(contador < volume_ar){
    1d74:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <contador.2430>
    1d78:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <volume_ar>
    1d7c:	98 17       	cp	r25, r24
    1d7e:	80 f4       	brcc	.+32     	; 0x1da0 <animar_motor+0x38>
		valor_motor = valor_motor + 250;
    1d80:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <valor_motor>
    1d84:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <valor_motor+0x1>
    1d88:	86 50       	subi	r24, 0x06	; 6
    1d8a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d8c:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <valor_motor+0x1>
    1d90:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <valor_motor>
		contador++;
    1d94:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <contador.2430>
    1d98:	8f 5f       	subi	r24, 0xFF	; 255
    1d9a:	80 93 8f 02 	sts	0x028F, r24	; 0x80028f <contador.2430>
    1d9e:	13 c0       	rjmp	.+38     	; 0x1dc6 <animar_motor+0x5e>
	}else{
		valor_motor = valor_motor - 250;
    1da0:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <valor_motor>
    1da4:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <valor_motor+0x1>
    1da8:	8a 5f       	subi	r24, 0xFA	; 250
    1daa:	91 09       	sbc	r25, r1
    1dac:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <valor_motor+0x1>
    1db0:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <valor_motor>
		if(valor_motor == 2000){
    1db4:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <valor_motor>
    1db8:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <valor_motor+0x1>
    1dbc:	80 3d       	cpi	r24, 0xD0	; 208
    1dbe:	97 40       	sbci	r25, 0x07	; 7
    1dc0:	11 f4       	brne	.+4      	; 0x1dc6 <animar_motor+0x5e>
			contador = 0;
    1dc2:	10 92 8f 02 	sts	0x028F, r1	; 0x80028f <contador.2430>
		}
	}
	OCR1A = valor_motor;
    1dc6:	88 e8       	ldi	r24, 0x88	; 136
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <valor_motor>
    1dce:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <valor_motor+0x1>
    1dd2:	fc 01       	movw	r30, r24
    1dd4:	31 83       	std	Z+1, r19	; 0x01
    1dd6:	20 83       	st	Z, r18
}
    1dd8:	00 00       	nop
    1dda:	0f 90       	pop	r0
    1ddc:	df 91       	pop	r29
    1dde:	cf 91       	pop	r28
    1de0:	08 95       	ret

00001de2 <animar_oxig>:

void animar_oxig(uint8_t toxig){
    1de2:	cf 93       	push	r28
    1de4:	df 93       	push	r29
    1de6:	1f 92       	push	r1
    1de8:	cd b7       	in	r28, 0x3d	; 61
    1dea:	de b7       	in	r29, 0x3e	; 62
    1dec:	89 83       	std	Y+1, r24	; 0x01
	OCR1B = (20*toxig)+2000;
    1dee:	8a e8       	ldi	r24, 0x8A	; 138
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	29 81       	ldd	r18, Y+1	; 0x01
    1df4:	42 2f       	mov	r20, r18
    1df6:	50 e0       	ldi	r21, 0x00	; 0
    1df8:	64 e1       	ldi	r22, 0x14	; 20
    1dfa:	64 9f       	mul	r22, r20
    1dfc:	90 01       	movw	r18, r0
    1dfe:	65 9f       	mul	r22, r21
    1e00:	30 0d       	add	r19, r0
    1e02:	11 24       	eor	r1, r1
    1e04:	20 53       	subi	r18, 0x30	; 48
    1e06:	38 4f       	sbci	r19, 0xF8	; 248
    1e08:	fc 01       	movw	r30, r24
    1e0a:	31 83       	std	Z+1, r19	; 0x01
    1e0c:	20 83       	st	Z, r18
}
    1e0e:	00 00       	nop
    1e10:	0f 90       	pop	r0
    1e12:	df 91       	pop	r29
    1e14:	cf 91       	pop	r28
    1e16:	08 95       	ret

00001e18 <alarme>:

void alarme(){ // Função para descrever o que acontecerá se acontecer alguma anormalidade
    1e18:	cf 93       	push	r28
    1e1a:	df 93       	push	r29
    1e1c:	cd b7       	in	r28, 0x3d	; 61
    1e1e:	de b7       	in	r29, 0x3e	; 62
	if(flag_t > 7){
    1e20:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <flag_t>
    1e24:	88 30       	cpi	r24, 0x08	; 8
    1e26:	08 f4       	brcc	.+2      	; 0x1e2a <alarme+0x12>
    1e28:	77 c0       	rjmp	.+238    	; 0x1f18 <alarme+0x100>
		if((temperat < 35) || (temperat > 41) ||(satur < sat_min) || (FreqCard < bpm_min) || (FreqCard > bpm_max)){
    1e2a:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <temperat>
    1e2e:	90 91 7e 02 	lds	r25, 0x027E	; 0x80027e <temperat+0x1>
    1e32:	a0 91 7f 02 	lds	r26, 0x027F	; 0x80027f <temperat+0x2>
    1e36:	b0 91 80 02 	lds	r27, 0x0280	; 0x800280 <temperat+0x3>
    1e3a:	20 e0       	ldi	r18, 0x00	; 0
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	4c e0       	ldi	r20, 0x0C	; 12
    1e40:	52 e4       	ldi	r21, 0x42	; 66
    1e42:	bc 01       	movw	r22, r24
    1e44:	cd 01       	movw	r24, r26
    1e46:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <__cmpsf2>
    1e4a:	88 23       	and	r24, r24
    1e4c:	0c f4       	brge	.+2      	; 0x1e50 <alarme+0x38>
    1e4e:	3e c0       	rjmp	.+124    	; 0x1ecc <alarme+0xb4>
    1e50:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <temperat>
    1e54:	90 91 7e 02 	lds	r25, 0x027E	; 0x80027e <temperat+0x1>
    1e58:	a0 91 7f 02 	lds	r26, 0x027F	; 0x80027f <temperat+0x2>
    1e5c:	b0 91 80 02 	lds	r27, 0x0280	; 0x800280 <temperat+0x3>
    1e60:	20 e0       	ldi	r18, 0x00	; 0
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	44 e2       	ldi	r20, 0x24	; 36
    1e66:	52 e4       	ldi	r21, 0x42	; 66
    1e68:	bc 01       	movw	r22, r24
    1e6a:	cd 01       	movw	r24, r26
    1e6c:	0e 94 34 15 	call	0x2a68	; 0x2a68 <__gesf2>
    1e70:	18 16       	cp	r1, r24
    1e72:	64 f1       	brlt	.+88     	; 0x1ecc <alarme+0xb4>
    1e74:	90 91 82 02 	lds	r25, 0x0282	; 0x800282 <satur>
    1e78:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sat_min>
    1e7c:	98 17       	cp	r25, r24
    1e7e:	30 f1       	brcs	.+76     	; 0x1ecc <alarme+0xb4>
    1e80:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <bpm_min>
    1e84:	28 2f       	mov	r18, r24
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	40 e0       	ldi	r20, 0x00	; 0
    1e8a:	50 e0       	ldi	r21, 0x00	; 0
    1e8c:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <FreqCard>
    1e90:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <FreqCard+0x1>
    1e94:	a0 91 46 02 	lds	r26, 0x0246	; 0x800246 <FreqCard+0x2>
    1e98:	b0 91 47 02 	lds	r27, 0x0247	; 0x800247 <FreqCard+0x3>
    1e9c:	82 17       	cp	r24, r18
    1e9e:	93 07       	cpc	r25, r19
    1ea0:	a4 07       	cpc	r26, r20
    1ea2:	b5 07       	cpc	r27, r21
    1ea4:	98 f0       	brcs	.+38     	; 0x1ecc <alarme+0xb4>
    1ea6:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <bpm_max>
    1eaa:	28 2f       	mov	r18, r24
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	40 e0       	ldi	r20, 0x00	; 0
    1eb0:	50 e0       	ldi	r21, 0x00	; 0
    1eb2:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <FreqCard>
    1eb6:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <FreqCard+0x1>
    1eba:	a0 91 46 02 	lds	r26, 0x0246	; 0x800246 <FreqCard+0x2>
    1ebe:	b0 91 47 02 	lds	r27, 0x0247	; 0x800247 <FreqCard+0x3>
    1ec2:	28 17       	cp	r18, r24
    1ec4:	39 07       	cpc	r19, r25
    1ec6:	4a 07       	cpc	r20, r26
    1ec8:	5b 07       	cpc	r21, r27
    1eca:	98 f4       	brcc	.+38     	; 0x1ef2 <alarme+0xda>
			PORTD |= 0b10000000;
    1ecc:	8b e2       	ldi	r24, 0x2B	; 43
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	2b e2       	ldi	r18, 0x2B	; 43
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	f9 01       	movw	r30, r18
    1ed6:	20 81       	ld	r18, Z
    1ed8:	20 68       	ori	r18, 0x80	; 128
    1eda:	fc 01       	movw	r30, r24
    1edc:	20 83       	st	Z, r18
			PORTB &= 0b11110111; //Não tem tensão no pino
    1ede:	85 e2       	ldi	r24, 0x25	; 37
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	25 e2       	ldi	r18, 0x25	; 37
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	f9 01       	movw	r30, r18
    1ee8:	20 81       	ld	r18, Z
    1eea:	27 7f       	andi	r18, 0xF7	; 247
    1eec:	fc 01       	movw	r30, r24
    1eee:	20 83       	st	Z, r18
			PORTB |= 0b00001000;
		}
	}else{
		PORTB |= 0b00001000;
	}
}
    1ef0:	1c c0       	rjmp	.+56     	; 0x1f2a <alarme+0x112>
	if(flag_t > 7){
		if((temperat < 35) || (temperat > 41) ||(satur < sat_min) || (FreqCard < bpm_min) || (FreqCard > bpm_max)){
			PORTD |= 0b10000000;
			PORTB &= 0b11110111; //Não tem tensão no pino
		}else{
			PORTD &= 0b01111111;
    1ef2:	8b e2       	ldi	r24, 0x2B	; 43
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	2b e2       	ldi	r18, 0x2B	; 43
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	f9 01       	movw	r30, r18
    1efc:	20 81       	ld	r18, Z
    1efe:	2f 77       	andi	r18, 0x7F	; 127
    1f00:	fc 01       	movw	r30, r24
    1f02:	20 83       	st	Z, r18
			PORTB |= 0b00001000;
    1f04:	85 e2       	ldi	r24, 0x25	; 37
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	25 e2       	ldi	r18, 0x25	; 37
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	f9 01       	movw	r30, r18
    1f0e:	20 81       	ld	r18, Z
    1f10:	28 60       	ori	r18, 0x08	; 8
    1f12:	fc 01       	movw	r30, r24
    1f14:	20 83       	st	Z, r18
		}
	}else{
		PORTB |= 0b00001000;
	}
}
    1f16:	09 c0       	rjmp	.+18     	; 0x1f2a <alarme+0x112>
		}else{
			PORTD &= 0b01111111;
			PORTB |= 0b00001000;
		}
	}else{
		PORTB |= 0b00001000;
    1f18:	85 e2       	ldi	r24, 0x25	; 37
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	25 e2       	ldi	r18, 0x25	; 37
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	f9 01       	movw	r30, r18
    1f22:	20 81       	ld	r18, Z
    1f24:	28 60       	ori	r18, 0x08	; 8
    1f26:	fc 01       	movw	r30, r24
    1f28:	20 83       	st	Z, r18
	}
}
    1f2a:	00 00       	nop
    1f2c:	df 91       	pop	r29
    1f2e:	cf 91       	pop	r28
    1f30:	08 95       	ret

00001f32 <acend_led>:

void acend_led(){ // Função Para indicar o modo ventilatório
    1f32:	cf 93       	push	r28
    1f34:	df 93       	push	r29
    1f36:	cd b7       	in	r28, 0x3d	; 61
    1f38:	de b7       	in	r29, 0x3e	; 62
	if(flag_confpcv == 1){
    1f3a:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <flag_confpcv>
    1f3e:	81 30       	cpi	r24, 0x01	; 1
    1f40:	51 f4       	brne	.+20     	; 0x1f56 <acend_led+0x24>
		PORTB |= 0b00010000; //B4
    1f42:	85 e2       	ldi	r24, 0x25	; 37
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	25 e2       	ldi	r18, 0x25	; 37
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	f9 01       	movw	r30, r18
    1f4c:	20 81       	ld	r18, Z
    1f4e:	20 61       	ori	r18, 0x10	; 16
    1f50:	fc 01       	movw	r30, r24
    1f52:	20 83       	st	Z, r18
    1f54:	09 c0       	rjmp	.+18     	; 0x1f68 <acend_led+0x36>
	}else{
		PORTB &= 0b11101111;
    1f56:	85 e2       	ldi	r24, 0x25	; 37
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	25 e2       	ldi	r18, 0x25	; 37
    1f5c:	30 e0       	ldi	r19, 0x00	; 0
    1f5e:	f9 01       	movw	r30, r18
    1f60:	20 81       	ld	r18, Z
    1f62:	2f 7e       	andi	r18, 0xEF	; 239
    1f64:	fc 01       	movw	r30, r24
    1f66:	20 83       	st	Z, r18
	}
	if(flag_confvcv == 1){
    1f68:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <flag_confvcv>
    1f6c:	81 30       	cpi	r24, 0x01	; 1
    1f6e:	51 f4       	brne	.+20     	; 0x1f84 <acend_led+0x52>
		PORTB |= 0b00100000;//B5
    1f70:	85 e2       	ldi	r24, 0x25	; 37
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	25 e2       	ldi	r18, 0x25	; 37
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	f9 01       	movw	r30, r18
    1f7a:	20 81       	ld	r18, Z
    1f7c:	20 62       	ori	r18, 0x20	; 32
    1f7e:	fc 01       	movw	r30, r24
    1f80:	20 83       	st	Z, r18
	}else{
		PORTB &= 0b11011111;
	}
}
    1f82:	09 c0       	rjmp	.+18     	; 0x1f96 <acend_led+0x64>
		PORTB &= 0b11101111;
	}
	if(flag_confvcv == 1){
		PORTB |= 0b00100000;//B5
	}else{
		PORTB &= 0b11011111;
    1f84:	85 e2       	ldi	r24, 0x25	; 37
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	25 e2       	ldi	r18, 0x25	; 37
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	f9 01       	movw	r30, r18
    1f8e:	20 81       	ld	r18, Z
    1f90:	2f 7d       	andi	r18, 0xDF	; 223
    1f92:	fc 01       	movw	r30, r24
    1f94:	20 83       	st	Z, r18
	}
}
    1f96:	00 00       	nop
    1f98:	df 91       	pop	r29
    1f9a:	cf 91       	pop	r28
    1f9c:	08 95       	ret

00001f9e <write>:
}

void nokia_lcd_power(uint8_t on)
{
	write_cmd(on ? 0x20 : 0x24);
}
    1f9e:	1f 93       	push	r17
    1fa0:	cf 93       	push	r28
    1fa2:	df 93       	push	r29
    1fa4:	00 d0       	rcall	.+0      	; 0x1fa6 <write+0x8>
    1fa6:	cd b7       	in	r28, 0x3d	; 61
    1fa8:	de b7       	in	r29, 0x3e	; 62
    1faa:	89 83       	std	Y+1, r24	; 0x01
    1fac:	6a 83       	std	Y+2, r22	; 0x02
    1fae:	88 e2       	ldi	r24, 0x28	; 40
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	28 e2       	ldi	r18, 0x28	; 40
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	f9 01       	movw	r30, r18
    1fb8:	20 81       	ld	r18, Z
    1fba:	2d 7f       	andi	r18, 0xFD	; 253
    1fbc:	fc 01       	movw	r30, r24
    1fbe:	20 83       	st	Z, r18
    1fc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc2:	88 23       	and	r24, r24
    1fc4:	51 f0       	breq	.+20     	; 0x1fda <write+0x3c>
    1fc6:	88 e2       	ldi	r24, 0x28	; 40
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	28 e2       	ldi	r18, 0x28	; 40
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	f9 01       	movw	r30, r18
    1fd0:	20 81       	ld	r18, Z
    1fd2:	28 60       	ori	r18, 0x08	; 8
    1fd4:	fc 01       	movw	r30, r24
    1fd6:	20 83       	st	Z, r18
    1fd8:	09 c0       	rjmp	.+18     	; 0x1fec <write+0x4e>
    1fda:	88 e2       	ldi	r24, 0x28	; 40
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	28 e2       	ldi	r18, 0x28	; 40
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	f9 01       	movw	r30, r18
    1fe4:	20 81       	ld	r18, Z
    1fe6:	27 7f       	andi	r18, 0xF7	; 247
    1fe8:	fc 01       	movw	r30, r24
    1fea:	20 83       	st	Z, r18
    1fec:	10 e0       	ldi	r17, 0x00	; 0
    1fee:	3c c0       	rjmp	.+120    	; 0x2068 <write+0xca>
    1ff0:	89 81       	ldd	r24, Y+1	; 0x01
    1ff2:	88 2f       	mov	r24, r24
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	21 2f       	mov	r18, r17
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	47 e0       	ldi	r20, 0x07	; 7
    1ffc:	50 e0       	ldi	r21, 0x00	; 0
    1ffe:	ba 01       	movw	r22, r20
    2000:	62 1b       	sub	r22, r18
    2002:	73 0b       	sbc	r23, r19
    2004:	9b 01       	movw	r18, r22
    2006:	02 c0       	rjmp	.+4      	; 0x200c <write+0x6e>
    2008:	95 95       	asr	r25
    200a:	87 95       	ror	r24
    200c:	2a 95       	dec	r18
    200e:	e2 f7       	brpl	.-8      	; 0x2008 <write+0x6a>
    2010:	81 70       	andi	r24, 0x01	; 1
    2012:	99 27       	eor	r25, r25
    2014:	89 2b       	or	r24, r25
    2016:	51 f0       	breq	.+20     	; 0x202c <write+0x8e>
    2018:	88 e2       	ldi	r24, 0x28	; 40
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	28 e2       	ldi	r18, 0x28	; 40
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	f9 01       	movw	r30, r18
    2022:	20 81       	ld	r18, Z
    2024:	20 61       	ori	r18, 0x10	; 16
    2026:	fc 01       	movw	r30, r24
    2028:	20 83       	st	Z, r18
    202a:	09 c0       	rjmp	.+18     	; 0x203e <write+0xa0>
    202c:	88 e2       	ldi	r24, 0x28	; 40
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	28 e2       	ldi	r18, 0x28	; 40
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	f9 01       	movw	r30, r18
    2036:	20 81       	ld	r18, Z
    2038:	2f 7e       	andi	r18, 0xEF	; 239
    203a:	fc 01       	movw	r30, r24
    203c:	20 83       	st	Z, r18
    203e:	88 e2       	ldi	r24, 0x28	; 40
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	28 e2       	ldi	r18, 0x28	; 40
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	f9 01       	movw	r30, r18
    2048:	20 81       	ld	r18, Z
    204a:	20 62       	ori	r18, 0x20	; 32
    204c:	fc 01       	movw	r30, r24
    204e:	20 83       	st	Z, r18
    2050:	88 e2       	ldi	r24, 0x28	; 40
    2052:	90 e0       	ldi	r25, 0x00	; 0
    2054:	28 e2       	ldi	r18, 0x28	; 40
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	f9 01       	movw	r30, r18
    205a:	20 81       	ld	r18, Z
    205c:	2f 7d       	andi	r18, 0xDF	; 223
    205e:	fc 01       	movw	r30, r24
    2060:	20 83       	st	Z, r18
    2062:	81 2f       	mov	r24, r17
    2064:	11 e0       	ldi	r17, 0x01	; 1
    2066:	18 0f       	add	r17, r24
    2068:	18 30       	cpi	r17, 0x08	; 8
    206a:	10 f2       	brcs	.-124    	; 0x1ff0 <write+0x52>
    206c:	88 e2       	ldi	r24, 0x28	; 40
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	28 e2       	ldi	r18, 0x28	; 40
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	f9 01       	movw	r30, r18
    2076:	20 81       	ld	r18, Z
    2078:	22 60       	ori	r18, 0x02	; 2
    207a:	fc 01       	movw	r30, r24
    207c:	20 83       	st	Z, r18
    207e:	00 00       	nop
    2080:	0f 90       	pop	r0
    2082:	0f 90       	pop	r0
    2084:	df 91       	pop	r29
    2086:	cf 91       	pop	r28
    2088:	1f 91       	pop	r17
    208a:	08 95       	ret

0000208c <write_cmd>:
    208c:	cf 93       	push	r28
    208e:	df 93       	push	r29
    2090:	1f 92       	push	r1
    2092:	cd b7       	in	r28, 0x3d	; 61
    2094:	de b7       	in	r29, 0x3e	; 62
    2096:	89 83       	std	Y+1, r24	; 0x01
    2098:	60 e0       	ldi	r22, 0x00	; 0
    209a:	89 81       	ldd	r24, Y+1	; 0x01
    209c:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <write>
    20a0:	00 00       	nop
    20a2:	0f 90       	pop	r0
    20a4:	df 91       	pop	r29
    20a6:	cf 91       	pop	r28
    20a8:	08 95       	ret

000020aa <write_data>:
    20aa:	cf 93       	push	r28
    20ac:	df 93       	push	r29
    20ae:	1f 92       	push	r1
    20b0:	cd b7       	in	r28, 0x3d	; 61
    20b2:	de b7       	in	r29, 0x3e	; 62
    20b4:	89 83       	std	Y+1, r24	; 0x01
    20b6:	61 e0       	ldi	r22, 0x01	; 1
    20b8:	89 81       	ldd	r24, Y+1	; 0x01
    20ba:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <write>
    20be:	00 00       	nop
    20c0:	0f 90       	pop	r0
    20c2:	df 91       	pop	r29
    20c4:	cf 91       	pop	r28
    20c6:	08 95       	ret

000020c8 <nokia_lcd_init>:
    20c8:	0f 93       	push	r16
    20ca:	1f 93       	push	r17
    20cc:	cf 93       	push	r28
    20ce:	df 93       	push	r29
    20d0:	cd b7       	in	r28, 0x3d	; 61
    20d2:	de b7       	in	r29, 0x3e	; 62
    20d4:	6c 97       	sbiw	r28, 0x1c	; 28
    20d6:	0f b6       	in	r0, 0x3f	; 63
    20d8:	f8 94       	cli
    20da:	de bf       	out	0x3e, r29	; 62
    20dc:	0f be       	out	0x3f, r0	; 63
    20de:	cd bf       	out	0x3d, r28	; 61
    20e0:	87 e2       	ldi	r24, 0x27	; 39
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	27 e2       	ldi	r18, 0x27	; 39
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	f9 01       	movw	r30, r18
    20ea:	20 81       	ld	r18, Z
    20ec:	22 60       	ori	r18, 0x02	; 2
    20ee:	fc 01       	movw	r30, r24
    20f0:	20 83       	st	Z, r18
    20f2:	87 e2       	ldi	r24, 0x27	; 39
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	27 e2       	ldi	r18, 0x27	; 39
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	f9 01       	movw	r30, r18
    20fc:	20 81       	ld	r18, Z
    20fe:	24 60       	ori	r18, 0x04	; 4
    2100:	fc 01       	movw	r30, r24
    2102:	20 83       	st	Z, r18
    2104:	87 e2       	ldi	r24, 0x27	; 39
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	27 e2       	ldi	r18, 0x27	; 39
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	f9 01       	movw	r30, r18
    210e:	20 81       	ld	r18, Z
    2110:	28 60       	ori	r18, 0x08	; 8
    2112:	fc 01       	movw	r30, r24
    2114:	20 83       	st	Z, r18
    2116:	87 e2       	ldi	r24, 0x27	; 39
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	27 e2       	ldi	r18, 0x27	; 39
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	f9 01       	movw	r30, r18
    2120:	20 81       	ld	r18, Z
    2122:	20 61       	ori	r18, 0x10	; 16
    2124:	fc 01       	movw	r30, r24
    2126:	20 83       	st	Z, r18
    2128:	87 e2       	ldi	r24, 0x27	; 39
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	27 e2       	ldi	r18, 0x27	; 39
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	f9 01       	movw	r30, r18
    2132:	20 81       	ld	r18, Z
    2134:	20 62       	ori	r18, 0x20	; 32
    2136:	fc 01       	movw	r30, r24
    2138:	20 83       	st	Z, r18
    213a:	88 e2       	ldi	r24, 0x28	; 40
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	28 e2       	ldi	r18, 0x28	; 40
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	f9 01       	movw	r30, r18
    2144:	20 81       	ld	r18, Z
    2146:	24 60       	ori	r18, 0x04	; 4
    2148:	fc 01       	movw	r30, r24
    214a:	20 83       	st	Z, r18
    214c:	88 e2       	ldi	r24, 0x28	; 40
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	28 e2       	ldi	r18, 0x28	; 40
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	f9 01       	movw	r30, r18
    2156:	20 81       	ld	r18, Z
    2158:	22 60       	ori	r18, 0x02	; 2
    215a:	fc 01       	movw	r30, r24
    215c:	20 83       	st	Z, r18
    215e:	80 e0       	ldi	r24, 0x00	; 0
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	a0 e2       	ldi	r26, 0x20	; 32
    2164:	b1 e4       	ldi	r27, 0x41	; 65
    2166:	89 83       	std	Y+1, r24	; 0x01
    2168:	9a 83       	std	Y+2, r25	; 0x02
    216a:	ab 83       	std	Y+3, r26	; 0x03
    216c:	bc 83       	std	Y+4, r27	; 0x04
    216e:	20 e0       	ldi	r18, 0x00	; 0
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	4a e7       	ldi	r20, 0x7A	; 122
    2174:	53 e4       	ldi	r21, 0x43	; 67
    2176:	69 81       	ldd	r22, Y+1	; 0x01
    2178:	7a 81       	ldd	r23, Y+2	; 0x02
    217a:	8b 81       	ldd	r24, Y+3	; 0x03
    217c:	9c 81       	ldd	r25, Y+4	; 0x04
    217e:	0e 94 39 15 	call	0x2a72	; 0x2a72 <__mulsf3>
    2182:	dc 01       	movw	r26, r24
    2184:	cb 01       	movw	r24, r22
    2186:	8b 8b       	std	Y+19, r24	; 0x13
    2188:	9c 8b       	std	Y+20, r25	; 0x14
    218a:	ad 8b       	std	Y+21, r26	; 0x15
    218c:	be 8b       	std	Y+22, r27	; 0x16
    218e:	20 e0       	ldi	r18, 0x00	; 0
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	40 e8       	ldi	r20, 0x80	; 128
    2194:	5f e3       	ldi	r21, 0x3F	; 63
    2196:	6b 89       	ldd	r22, Y+19	; 0x13
    2198:	7c 89       	ldd	r23, Y+20	; 0x14
    219a:	8d 89       	ldd	r24, Y+21	; 0x15
    219c:	9e 89       	ldd	r25, Y+22	; 0x16
    219e:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <__cmpsf2>
    21a2:	88 23       	and	r24, r24
    21a4:	2c f4       	brge	.+10     	; 0x21b0 <nokia_lcd_init+0xe8>
    21a6:	81 e0       	ldi	r24, 0x01	; 1
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	98 8f       	std	Y+24, r25	; 0x18
    21ac:	8f 8b       	std	Y+23, r24	; 0x17
    21ae:	3f c0       	rjmp	.+126    	; 0x222e <nokia_lcd_init+0x166>
    21b0:	20 e0       	ldi	r18, 0x00	; 0
    21b2:	3f ef       	ldi	r19, 0xFF	; 255
    21b4:	4f e7       	ldi	r20, 0x7F	; 127
    21b6:	57 e4       	ldi	r21, 0x47	; 71
    21b8:	6b 89       	ldd	r22, Y+19	; 0x13
    21ba:	7c 89       	ldd	r23, Y+20	; 0x14
    21bc:	8d 89       	ldd	r24, Y+21	; 0x15
    21be:	9e 89       	ldd	r25, Y+22	; 0x16
    21c0:	0e 94 34 15 	call	0x2a68	; 0x2a68 <__gesf2>
    21c4:	18 16       	cp	r1, r24
    21c6:	4c f5       	brge	.+82     	; 0x221a <nokia_lcd_init+0x152>
    21c8:	20 e0       	ldi	r18, 0x00	; 0
    21ca:	30 e0       	ldi	r19, 0x00	; 0
    21cc:	40 e2       	ldi	r20, 0x20	; 32
    21ce:	51 e4       	ldi	r21, 0x41	; 65
    21d0:	69 81       	ldd	r22, Y+1	; 0x01
    21d2:	7a 81       	ldd	r23, Y+2	; 0x02
    21d4:	8b 81       	ldd	r24, Y+3	; 0x03
    21d6:	9c 81       	ldd	r25, Y+4	; 0x04
    21d8:	0e 94 39 15 	call	0x2a72	; 0x2a72 <__mulsf3>
    21dc:	dc 01       	movw	r26, r24
    21de:	cb 01       	movw	r24, r22
    21e0:	bc 01       	movw	r22, r24
    21e2:	cd 01       	movw	r24, r26
    21e4:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__fixunssfsi>
    21e8:	dc 01       	movw	r26, r24
    21ea:	cb 01       	movw	r24, r22
    21ec:	98 8f       	std	Y+24, r25	; 0x18
    21ee:	8f 8b       	std	Y+23, r24	; 0x17
    21f0:	0f c0       	rjmp	.+30     	; 0x2210 <nokia_lcd_init+0x148>
    21f2:	89 e1       	ldi	r24, 0x19	; 25
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	9a 8f       	std	Y+26, r25	; 0x1a
    21f8:	89 8f       	std	Y+25, r24	; 0x19
    21fa:	89 8d       	ldd	r24, Y+25	; 0x19
    21fc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    21fe:	01 97       	sbiw	r24, 0x01	; 1
    2200:	f1 f7       	brne	.-4      	; 0x21fe <nokia_lcd_init+0x136>
    2202:	9a 8f       	std	Y+26, r25	; 0x1a
    2204:	89 8f       	std	Y+25, r24	; 0x19
    2206:	8f 89       	ldd	r24, Y+23	; 0x17
    2208:	98 8d       	ldd	r25, Y+24	; 0x18
    220a:	01 97       	sbiw	r24, 0x01	; 1
    220c:	98 8f       	std	Y+24, r25	; 0x18
    220e:	8f 8b       	std	Y+23, r24	; 0x17
    2210:	8f 89       	ldd	r24, Y+23	; 0x17
    2212:	98 8d       	ldd	r25, Y+24	; 0x18
    2214:	89 2b       	or	r24, r25
    2216:	69 f7       	brne	.-38     	; 0x21f2 <nokia_lcd_init+0x12a>
    2218:	14 c0       	rjmp	.+40     	; 0x2242 <nokia_lcd_init+0x17a>
    221a:	6b 89       	ldd	r22, Y+19	; 0x13
    221c:	7c 89       	ldd	r23, Y+20	; 0x14
    221e:	8d 89       	ldd	r24, Y+21	; 0x15
    2220:	9e 89       	ldd	r25, Y+22	; 0x16
    2222:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__fixunssfsi>
    2226:	dc 01       	movw	r26, r24
    2228:	cb 01       	movw	r24, r22
    222a:	98 8f       	std	Y+24, r25	; 0x18
    222c:	8f 8b       	std	Y+23, r24	; 0x17
    222e:	8f 89       	ldd	r24, Y+23	; 0x17
    2230:	98 8d       	ldd	r25, Y+24	; 0x18
    2232:	9c 8f       	std	Y+28, r25	; 0x1c
    2234:	8b 8f       	std	Y+27, r24	; 0x1b
    2236:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2238:	9c 8d       	ldd	r25, Y+28	; 0x1c
    223a:	01 97       	sbiw	r24, 0x01	; 1
    223c:	f1 f7       	brne	.-4      	; 0x223a <nokia_lcd_init+0x172>
    223e:	9c 8f       	std	Y+28, r25	; 0x1c
    2240:	8b 8f       	std	Y+27, r24	; 0x1b
    2242:	88 e2       	ldi	r24, 0x28	; 40
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	28 e2       	ldi	r18, 0x28	; 40
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	f9 01       	movw	r30, r18
    224c:	20 81       	ld	r18, Z
    224e:	2b 7f       	andi	r18, 0xFB	; 251
    2250:	fc 01       	movw	r30, r24
    2252:	20 83       	st	Z, r18
    2254:	80 e0       	ldi	r24, 0x00	; 0
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	ac e8       	ldi	r26, 0x8C	; 140
    225a:	b2 e4       	ldi	r27, 0x42	; 66
    225c:	8d 83       	std	Y+5, r24	; 0x05
    225e:	9e 83       	std	Y+6, r25	; 0x06
    2260:	af 83       	std	Y+7, r26	; 0x07
    2262:	b8 87       	std	Y+8, r27	; 0x08
    2264:	20 e0       	ldi	r18, 0x00	; 0
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	4a e7       	ldi	r20, 0x7A	; 122
    226a:	53 e4       	ldi	r21, 0x43	; 67
    226c:	6d 81       	ldd	r22, Y+5	; 0x05
    226e:	7e 81       	ldd	r23, Y+6	; 0x06
    2270:	8f 81       	ldd	r24, Y+7	; 0x07
    2272:	98 85       	ldd	r25, Y+8	; 0x08
    2274:	0e 94 39 15 	call	0x2a72	; 0x2a72 <__mulsf3>
    2278:	dc 01       	movw	r26, r24
    227a:	cb 01       	movw	r24, r22
    227c:	89 87       	std	Y+9, r24	; 0x09
    227e:	9a 87       	std	Y+10, r25	; 0x0a
    2280:	ab 87       	std	Y+11, r26	; 0x0b
    2282:	bc 87       	std	Y+12, r27	; 0x0c
    2284:	20 e0       	ldi	r18, 0x00	; 0
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	40 e8       	ldi	r20, 0x80	; 128
    228a:	5f e3       	ldi	r21, 0x3F	; 63
    228c:	69 85       	ldd	r22, Y+9	; 0x09
    228e:	7a 85       	ldd	r23, Y+10	; 0x0a
    2290:	8b 85       	ldd	r24, Y+11	; 0x0b
    2292:	9c 85       	ldd	r25, Y+12	; 0x0c
    2294:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <__cmpsf2>
    2298:	88 23       	and	r24, r24
    229a:	2c f4       	brge	.+10     	; 0x22a6 <nokia_lcd_init+0x1de>
    229c:	81 e0       	ldi	r24, 0x01	; 1
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	9e 87       	std	Y+14, r25	; 0x0e
    22a2:	8d 87       	std	Y+13, r24	; 0x0d
    22a4:	3f c0       	rjmp	.+126    	; 0x2324 <nokia_lcd_init+0x25c>
    22a6:	20 e0       	ldi	r18, 0x00	; 0
    22a8:	3f ef       	ldi	r19, 0xFF	; 255
    22aa:	4f e7       	ldi	r20, 0x7F	; 127
    22ac:	57 e4       	ldi	r21, 0x47	; 71
    22ae:	69 85       	ldd	r22, Y+9	; 0x09
    22b0:	7a 85       	ldd	r23, Y+10	; 0x0a
    22b2:	8b 85       	ldd	r24, Y+11	; 0x0b
    22b4:	9c 85       	ldd	r25, Y+12	; 0x0c
    22b6:	0e 94 34 15 	call	0x2a68	; 0x2a68 <__gesf2>
    22ba:	18 16       	cp	r1, r24
    22bc:	4c f5       	brge	.+82     	; 0x2310 <nokia_lcd_init+0x248>
    22be:	20 e0       	ldi	r18, 0x00	; 0
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	40 e2       	ldi	r20, 0x20	; 32
    22c4:	51 e4       	ldi	r21, 0x41	; 65
    22c6:	6d 81       	ldd	r22, Y+5	; 0x05
    22c8:	7e 81       	ldd	r23, Y+6	; 0x06
    22ca:	8f 81       	ldd	r24, Y+7	; 0x07
    22cc:	98 85       	ldd	r25, Y+8	; 0x08
    22ce:	0e 94 39 15 	call	0x2a72	; 0x2a72 <__mulsf3>
    22d2:	dc 01       	movw	r26, r24
    22d4:	cb 01       	movw	r24, r22
    22d6:	bc 01       	movw	r22, r24
    22d8:	cd 01       	movw	r24, r26
    22da:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__fixunssfsi>
    22de:	dc 01       	movw	r26, r24
    22e0:	cb 01       	movw	r24, r22
    22e2:	9e 87       	std	Y+14, r25	; 0x0e
    22e4:	8d 87       	std	Y+13, r24	; 0x0d
    22e6:	0f c0       	rjmp	.+30     	; 0x2306 <nokia_lcd_init+0x23e>
    22e8:	89 e1       	ldi	r24, 0x19	; 25
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	98 8b       	std	Y+16, r25	; 0x10
    22ee:	8f 87       	std	Y+15, r24	; 0x0f
    22f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    22f2:	98 89       	ldd	r25, Y+16	; 0x10
    22f4:	01 97       	sbiw	r24, 0x01	; 1
    22f6:	f1 f7       	brne	.-4      	; 0x22f4 <nokia_lcd_init+0x22c>
    22f8:	98 8b       	std	Y+16, r25	; 0x10
    22fa:	8f 87       	std	Y+15, r24	; 0x0f
    22fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    22fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2300:	01 97       	sbiw	r24, 0x01	; 1
    2302:	9e 87       	std	Y+14, r25	; 0x0e
    2304:	8d 87       	std	Y+13, r24	; 0x0d
    2306:	8d 85       	ldd	r24, Y+13	; 0x0d
    2308:	9e 85       	ldd	r25, Y+14	; 0x0e
    230a:	89 2b       	or	r24, r25
    230c:	69 f7       	brne	.-38     	; 0x22e8 <nokia_lcd_init+0x220>
    230e:	14 c0       	rjmp	.+40     	; 0x2338 <nokia_lcd_init+0x270>
    2310:	69 85       	ldd	r22, Y+9	; 0x09
    2312:	7a 85       	ldd	r23, Y+10	; 0x0a
    2314:	8b 85       	ldd	r24, Y+11	; 0x0b
    2316:	9c 85       	ldd	r25, Y+12	; 0x0c
    2318:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__fixunssfsi>
    231c:	dc 01       	movw	r26, r24
    231e:	cb 01       	movw	r24, r22
    2320:	9e 87       	std	Y+14, r25	; 0x0e
    2322:	8d 87       	std	Y+13, r24	; 0x0d
    2324:	8d 85       	ldd	r24, Y+13	; 0x0d
    2326:	9e 85       	ldd	r25, Y+14	; 0x0e
    2328:	9a 8b       	std	Y+18, r25	; 0x12
    232a:	89 8b       	std	Y+17, r24	; 0x11
    232c:	89 89       	ldd	r24, Y+17	; 0x11
    232e:	9a 89       	ldd	r25, Y+18	; 0x12
    2330:	01 97       	sbiw	r24, 0x01	; 1
    2332:	f1 f7       	brne	.-4      	; 0x2330 <nokia_lcd_init+0x268>
    2334:	9a 8b       	std	Y+18, r25	; 0x12
    2336:	89 8b       	std	Y+17, r24	; 0x11
    2338:	88 e2       	ldi	r24, 0x28	; 40
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	28 e2       	ldi	r18, 0x28	; 40
    233e:	30 e0       	ldi	r19, 0x00	; 0
    2340:	f9 01       	movw	r30, r18
    2342:	20 81       	ld	r18, Z
    2344:	24 60       	ori	r18, 0x04	; 4
    2346:	fc 01       	movw	r30, r24
    2348:	20 83       	st	Z, r18
    234a:	88 e2       	ldi	r24, 0x28	; 40
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	28 e2       	ldi	r18, 0x28	; 40
    2350:	30 e0       	ldi	r19, 0x00	; 0
    2352:	f9 01       	movw	r30, r18
    2354:	20 81       	ld	r18, Z
    2356:	2d 7f       	andi	r18, 0xFD	; 253
    2358:	fc 01       	movw	r30, r24
    235a:	20 83       	st	Z, r18
    235c:	81 e2       	ldi	r24, 0x21	; 33
    235e:	0e 94 46 10 	call	0x208c	; 0x208c <write_cmd>
    2362:	83 e1       	ldi	r24, 0x13	; 19
    2364:	0e 94 46 10 	call	0x208c	; 0x208c <write_cmd>
    2368:	86 e0       	ldi	r24, 0x06	; 6
    236a:	0e 94 46 10 	call	0x208c	; 0x208c <write_cmd>
    236e:	82 ec       	ldi	r24, 0xC2	; 194
    2370:	0e 94 46 10 	call	0x208c	; 0x208c <write_cmd>
    2374:	80 e2       	ldi	r24, 0x20	; 32
    2376:	0e 94 46 10 	call	0x208c	; 0x208c <write_cmd>
    237a:	89 e0       	ldi	r24, 0x09	; 9
    237c:	0e 94 46 10 	call	0x208c	; 0x208c <write_cmd>
    2380:	80 e8       	ldi	r24, 0x80	; 128
    2382:	0e 94 46 10 	call	0x208c	; 0x208c <write_cmd>
    2386:	80 e4       	ldi	r24, 0x40	; 64
    2388:	0e 94 46 10 	call	0x208c	; 0x208c <write_cmd>
    238c:	00 e0       	ldi	r16, 0x00	; 0
    238e:	10 e0       	ldi	r17, 0x00	; 0
    2390:	05 c0       	rjmp	.+10     	; 0x239c <nokia_lcd_init+0x2d4>
    2392:	80 e0       	ldi	r24, 0x00	; 0
    2394:	0e 94 55 10 	call	0x20aa	; 0x20aa <write_data>
    2398:	0f 5f       	subi	r16, 0xFF	; 255
    239a:	1f 4f       	sbci	r17, 0xFF	; 255
    239c:	08 3f       	cpi	r16, 0xF8	; 248
    239e:	f1 e0       	ldi	r31, 0x01	; 1
    23a0:	1f 07       	cpc	r17, r31
    23a2:	b8 f3       	brcs	.-18     	; 0x2392 <nokia_lcd_init+0x2ca>
    23a4:	88 e0       	ldi	r24, 0x08	; 8
    23a6:	0e 94 46 10 	call	0x208c	; 0x208c <write_cmd>
    23aa:	8c e0       	ldi	r24, 0x0C	; 12
    23ac:	0e 94 46 10 	call	0x208c	; 0x208c <write_cmd>
    23b0:	00 00       	nop
    23b2:	6c 96       	adiw	r28, 0x1c	; 28
    23b4:	0f b6       	in	r0, 0x3f	; 63
    23b6:	f8 94       	cli
    23b8:	de bf       	out	0x3e, r29	; 62
    23ba:	0f be       	out	0x3f, r0	; 63
    23bc:	cd bf       	out	0x3d, r28	; 61
    23be:	df 91       	pop	r29
    23c0:	cf 91       	pop	r28
    23c2:	1f 91       	pop	r17
    23c4:	0f 91       	pop	r16
    23c6:	08 95       	ret

000023c8 <nokia_lcd_clear>:
    23c8:	0f 93       	push	r16
    23ca:	1f 93       	push	r17
    23cc:	cf 93       	push	r28
    23ce:	df 93       	push	r29
    23d0:	cd b7       	in	r28, 0x3d	; 61
    23d2:	de b7       	in	r29, 0x3e	; 62
    23d4:	80 e8       	ldi	r24, 0x80	; 128
    23d6:	0e 94 46 10 	call	0x208c	; 0x208c <write_cmd>
    23da:	80 e4       	ldi	r24, 0x40	; 64
    23dc:	0e 94 46 10 	call	0x208c	; 0x208c <write_cmd>
    23e0:	10 92 88 04 	sts	0x0488, r1	; 0x800488 <nokia_lcd+0x1f8>
    23e4:	10 92 89 04 	sts	0x0489, r1	; 0x800489 <nokia_lcd+0x1f9>
    23e8:	00 e0       	ldi	r16, 0x00	; 0
    23ea:	10 e0       	ldi	r17, 0x00	; 0
    23ec:	07 c0       	rjmp	.+14     	; 0x23fc <nokia_lcd_clear+0x34>
    23ee:	c8 01       	movw	r24, r16
    23f0:	80 57       	subi	r24, 0x70	; 112
    23f2:	9d 4f       	sbci	r25, 0xFD	; 253
    23f4:	fc 01       	movw	r30, r24
    23f6:	10 82       	st	Z, r1
    23f8:	0f 5f       	subi	r16, 0xFF	; 255
    23fa:	1f 4f       	sbci	r17, 0xFF	; 255
    23fc:	08 3f       	cpi	r16, 0xF8	; 248
    23fe:	f1 e0       	ldi	r31, 0x01	; 1
    2400:	1f 07       	cpc	r17, r31
    2402:	a8 f3       	brcs	.-22     	; 0x23ee <nokia_lcd_clear+0x26>
    2404:	00 00       	nop
    2406:	df 91       	pop	r29
    2408:	cf 91       	pop	r28
    240a:	1f 91       	pop	r17
    240c:	0f 91       	pop	r16
    240e:	08 95       	ret

00002410 <nokia_lcd_set_pixel>:

void nokia_lcd_set_pixel(uint8_t x, uint8_t y, uint8_t value)
{
    2410:	cf 93       	push	r28
    2412:	df 93       	push	r29
    2414:	00 d0       	rcall	.+0      	; 0x2416 <nokia_lcd_set_pixel+0x6>
    2416:	00 d0       	rcall	.+0      	; 0x2418 <nokia_lcd_set_pixel+0x8>
    2418:	1f 92       	push	r1
    241a:	cd b7       	in	r28, 0x3d	; 61
    241c:	de b7       	in	r29, 0x3e	; 62
    241e:	8b 83       	std	Y+3, r24	; 0x03
    2420:	6c 83       	std	Y+4, r22	; 0x04
    2422:	4d 83       	std	Y+5, r20	; 0x05
	uint8_t *byte = &nokia_lcd.screen[y/8*84+x];
    2424:	8c 81       	ldd	r24, Y+4	; 0x04
    2426:	86 95       	lsr	r24
    2428:	86 95       	lsr	r24
    242a:	86 95       	lsr	r24
    242c:	88 2f       	mov	r24, r24
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	44 e5       	ldi	r20, 0x54	; 84
    2432:	48 9f       	mul	r20, r24
    2434:	90 01       	movw	r18, r0
    2436:	49 9f       	mul	r20, r25
    2438:	30 0d       	add	r19, r0
    243a:	11 24       	eor	r1, r1
    243c:	8b 81       	ldd	r24, Y+3	; 0x03
    243e:	88 2f       	mov	r24, r24
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	82 0f       	add	r24, r18
    2444:	93 1f       	adc	r25, r19
    2446:	80 57       	subi	r24, 0x70	; 112
    2448:	9d 4f       	sbci	r25, 0xFD	; 253
    244a:	9a 83       	std	Y+2, r25	; 0x02
    244c:	89 83       	std	Y+1, r24	; 0x01
	if (value)
    244e:	8d 81       	ldd	r24, Y+5	; 0x05
    2450:	88 23       	and	r24, r24
    2452:	c9 f0       	breq	.+50     	; 0x2486 <nokia_lcd_set_pixel+0x76>
		*byte |= (1 << (y % 8));
    2454:	89 81       	ldd	r24, Y+1	; 0x01
    2456:	9a 81       	ldd	r25, Y+2	; 0x02
    2458:	fc 01       	movw	r30, r24
    245a:	80 81       	ld	r24, Z
    245c:	48 2f       	mov	r20, r24
    245e:	8c 81       	ldd	r24, Y+4	; 0x04
    2460:	88 2f       	mov	r24, r24
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	9c 01       	movw	r18, r24
    2466:	27 70       	andi	r18, 0x07	; 7
    2468:	33 27       	eor	r19, r19
    246a:	81 e0       	ldi	r24, 0x01	; 1
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	02 c0       	rjmp	.+4      	; 0x2474 <nokia_lcd_set_pixel+0x64>
    2470:	88 0f       	add	r24, r24
    2472:	99 1f       	adc	r25, r25
    2474:	2a 95       	dec	r18
    2476:	e2 f7       	brpl	.-8      	; 0x2470 <nokia_lcd_set_pixel+0x60>
    2478:	84 2b       	or	r24, r20
    247a:	28 2f       	mov	r18, r24
    247c:	89 81       	ldd	r24, Y+1	; 0x01
    247e:	9a 81       	ldd	r25, Y+2	; 0x02
    2480:	fc 01       	movw	r30, r24
    2482:	20 83       	st	Z, r18
	else
		*byte &= ~(1 << (y %8 ));
}
    2484:	19 c0       	rjmp	.+50     	; 0x24b8 <nokia_lcd_set_pixel+0xa8>
{
	uint8_t *byte = &nokia_lcd.screen[y/8*84+x];
	if (value)
		*byte |= (1 << (y % 8));
	else
		*byte &= ~(1 << (y %8 ));
    2486:	89 81       	ldd	r24, Y+1	; 0x01
    2488:	9a 81       	ldd	r25, Y+2	; 0x02
    248a:	fc 01       	movw	r30, r24
    248c:	80 81       	ld	r24, Z
    248e:	48 2f       	mov	r20, r24
    2490:	8c 81       	ldd	r24, Y+4	; 0x04
    2492:	88 2f       	mov	r24, r24
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	9c 01       	movw	r18, r24
    2498:	27 70       	andi	r18, 0x07	; 7
    249a:	33 27       	eor	r19, r19
    249c:	81 e0       	ldi	r24, 0x01	; 1
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	02 c0       	rjmp	.+4      	; 0x24a6 <nokia_lcd_set_pixel+0x96>
    24a2:	88 0f       	add	r24, r24
    24a4:	99 1f       	adc	r25, r25
    24a6:	2a 95       	dec	r18
    24a8:	e2 f7       	brpl	.-8      	; 0x24a2 <nokia_lcd_set_pixel+0x92>
    24aa:	80 95       	com	r24
    24ac:	84 23       	and	r24, r20
    24ae:	28 2f       	mov	r18, r24
    24b0:	89 81       	ldd	r24, Y+1	; 0x01
    24b2:	9a 81       	ldd	r25, Y+2	; 0x02
    24b4:	fc 01       	movw	r30, r24
    24b6:	20 83       	st	Z, r18
}
    24b8:	00 00       	nop
    24ba:	0f 90       	pop	r0
    24bc:	0f 90       	pop	r0
    24be:	0f 90       	pop	r0
    24c0:	0f 90       	pop	r0
    24c2:	0f 90       	pop	r0
    24c4:	df 91       	pop	r29
    24c6:	cf 91       	pop	r28
    24c8:	08 95       	ret

000024ca <nokia_lcd_write_char>:

void nokia_lcd_write_char(char code, uint8_t scale)
{
    24ca:	0f 93       	push	r16
    24cc:	1f 93       	push	r17
    24ce:	cf 93       	push	r28
    24d0:	df 93       	push	r29
    24d2:	00 d0       	rcall	.+0      	; 0x24d4 <nokia_lcd_write_char+0xa>
    24d4:	00 d0       	rcall	.+0      	; 0x24d6 <nokia_lcd_write_char+0xc>
    24d6:	1f 92       	push	r1
    24d8:	cd b7       	in	r28, 0x3d	; 61
    24da:	de b7       	in	r29, 0x3e	; 62
    24dc:	8c 83       	std	Y+4, r24	; 0x04
    24de:	6d 83       	std	Y+5, r22	; 0x05
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
    24e0:	10 e0       	ldi	r17, 0x00	; 0
    24e2:	65 c0       	rjmp	.+202    	; 0x25ae <nokia_lcd_write_char+0xe4>
		for (y = 0; y < 7*scale; y++)
    24e4:	00 e0       	ldi	r16, 0x00	; 0
    24e6:	4e c0       	rjmp	.+156    	; 0x2584 <nokia_lcd_write_char+0xba>
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
    24e8:	8c 81       	ldd	r24, Y+4	; 0x04
    24ea:	88 2f       	mov	r24, r24
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	9c 01       	movw	r18, r24
    24f0:	20 52       	subi	r18, 0x20	; 32
    24f2:	31 09       	sbc	r19, r1
    24f4:	9d 81       	ldd	r25, Y+5	; 0x05
    24f6:	81 2f       	mov	r24, r17
    24f8:	69 2f       	mov	r22, r25
    24fa:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <__udivmodqi4>
    24fe:	48 2f       	mov	r20, r24
    2500:	50 e0       	ldi	r21, 0x00	; 0
    2502:	c9 01       	movw	r24, r18
    2504:	88 0f       	add	r24, r24
    2506:	99 1f       	adc	r25, r25
    2508:	88 0f       	add	r24, r24
    250a:	99 1f       	adc	r25, r25
    250c:	82 0f       	add	r24, r18
    250e:	93 1f       	adc	r25, r19
    2510:	84 0f       	add	r24, r20
    2512:	95 1f       	adc	r25, r21
    2514:	88 59       	subi	r24, 0x98	; 152
    2516:	9f 4f       	sbci	r25, 0xFF	; 255
    2518:	9a 83       	std	Y+2, r25	; 0x02
    251a:	89 83       	std	Y+1, r24	; 0x01
    251c:	89 81       	ldd	r24, Y+1	; 0x01
    251e:	9a 81       	ldd	r25, Y+2	; 0x02
    2520:	fc 01       	movw	r30, r24
    2522:	84 91       	lpm	r24, Z
    2524:	8b 83       	std	Y+3, r24	; 0x03
    2526:	8b 81       	ldd	r24, Y+3	; 0x03
    2528:	28 2f       	mov	r18, r24
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	9d 81       	ldd	r25, Y+5	; 0x05
    252e:	80 2f       	mov	r24, r16
    2530:	69 2f       	mov	r22, r25
    2532:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <__udivmodqi4>
    2536:	88 2f       	mov	r24, r24
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	a9 01       	movw	r20, r18
    253c:	02 c0       	rjmp	.+4      	; 0x2542 <nokia_lcd_write_char+0x78>
    253e:	55 95       	asr	r21
    2540:	47 95       	ror	r20
    2542:	8a 95       	dec	r24
    2544:	e2 f7       	brpl	.-8      	; 0x253e <nokia_lcd_write_char+0x74>
    2546:	ca 01       	movw	r24, r20
    2548:	81 70       	andi	r24, 0x01	; 1
    254a:	99 27       	eor	r25, r25
    254c:	89 2b       	or	r24, r25
    254e:	61 f0       	breq	.+24     	; 0x2568 <nokia_lcd_write_char+0x9e>
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
    2550:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <nokia_lcd+0x1f9>
    2554:	98 2f       	mov	r25, r24
    2556:	90 0f       	add	r25, r16
    2558:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <nokia_lcd+0x1f8>
    255c:	81 0f       	add	r24, r17
    255e:	41 e0       	ldi	r20, 0x01	; 1
    2560:	69 2f       	mov	r22, r25
    2562:	0e 94 08 12 	call	0x2410	; 0x2410 <nokia_lcd_set_pixel>
    2566:	0b c0       	rjmp	.+22     	; 0x257e <nokia_lcd_write_char+0xb4>
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);
    2568:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <nokia_lcd+0x1f9>
    256c:	98 2f       	mov	r25, r24
    256e:	90 0f       	add	r25, r16
    2570:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <nokia_lcd+0x1f8>
    2574:	81 0f       	add	r24, r17
    2576:	40 e0       	ldi	r20, 0x00	; 0
    2578:	69 2f       	mov	r22, r25
    257a:	0e 94 08 12 	call	0x2410	; 0x2410 <nokia_lcd_set_pixel>
void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
		for (y = 0; y < 7*scale; y++)
    257e:	80 2f       	mov	r24, r16
    2580:	01 e0       	ldi	r16, 0x01	; 1
    2582:	08 0f       	add	r16, r24
    2584:	40 2f       	mov	r20, r16
    2586:	50 e0       	ldi	r21, 0x00	; 0
    2588:	8d 81       	ldd	r24, Y+5	; 0x05
    258a:	28 2f       	mov	r18, r24
    258c:	30 e0       	ldi	r19, 0x00	; 0
    258e:	c9 01       	movw	r24, r18
    2590:	88 0f       	add	r24, r24
    2592:	99 1f       	adc	r25, r25
    2594:	88 0f       	add	r24, r24
    2596:	99 1f       	adc	r25, r25
    2598:	88 0f       	add	r24, r24
    259a:	99 1f       	adc	r25, r25
    259c:	82 1b       	sub	r24, r18
    259e:	93 0b       	sbc	r25, r19
    25a0:	48 17       	cp	r20, r24
    25a2:	59 07       	cpc	r21, r25
    25a4:	0c f4       	brge	.+2      	; 0x25a8 <nokia_lcd_write_char+0xde>
    25a6:	a0 cf       	rjmp	.-192    	; 0x24e8 <nokia_lcd_write_char+0x1e>

void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
    25a8:	81 2f       	mov	r24, r17
    25aa:	11 e0       	ldi	r17, 0x01	; 1
    25ac:	18 0f       	add	r17, r24
    25ae:	41 2f       	mov	r20, r17
    25b0:	50 e0       	ldi	r21, 0x00	; 0
    25b2:	8d 81       	ldd	r24, Y+5	; 0x05
    25b4:	28 2f       	mov	r18, r24
    25b6:	30 e0       	ldi	r19, 0x00	; 0
    25b8:	c9 01       	movw	r24, r18
    25ba:	88 0f       	add	r24, r24
    25bc:	99 1f       	adc	r25, r25
    25be:	88 0f       	add	r24, r24
    25c0:	99 1f       	adc	r25, r25
    25c2:	82 0f       	add	r24, r18
    25c4:	93 1f       	adc	r25, r19
    25c6:	48 17       	cp	r20, r24
    25c8:	59 07       	cpc	r21, r25
    25ca:	0c f4       	brge	.+2      	; 0x25ce <nokia_lcd_write_char+0x104>
    25cc:	8b cf       	rjmp	.-234    	; 0x24e4 <nokia_lcd_write_char+0x1a>
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);

	nokia_lcd.cursor_x += 5*scale + 1;
    25ce:	20 91 88 04 	lds	r18, 0x0488	; 0x800488 <nokia_lcd+0x1f8>
    25d2:	9d 81       	ldd	r25, Y+5	; 0x05
    25d4:	89 2f       	mov	r24, r25
    25d6:	88 0f       	add	r24, r24
    25d8:	88 0f       	add	r24, r24
    25da:	89 0f       	add	r24, r25
    25dc:	82 0f       	add	r24, r18
    25de:	8f 5f       	subi	r24, 0xFF	; 255
    25e0:	80 93 88 04 	sts	0x0488, r24	; 0x800488 <nokia_lcd+0x1f8>
	if (nokia_lcd.cursor_x >= 84) {
    25e4:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <nokia_lcd+0x1f8>
    25e8:	84 35       	cpi	r24, 0x54	; 84
    25ea:	70 f0       	brcs	.+28     	; 0x2608 <nokia_lcd_write_char+0x13e>
		nokia_lcd.cursor_x = 0;
    25ec:	10 92 88 04 	sts	0x0488, r1	; 0x800488 <nokia_lcd+0x1f8>
		nokia_lcd.cursor_y += 7*scale + 1;
    25f0:	20 91 89 04 	lds	r18, 0x0489	; 0x800489 <nokia_lcd+0x1f9>
    25f4:	9d 81       	ldd	r25, Y+5	; 0x05
    25f6:	89 2f       	mov	r24, r25
    25f8:	88 0f       	add	r24, r24
    25fa:	88 0f       	add	r24, r24
    25fc:	88 0f       	add	r24, r24
    25fe:	89 1b       	sub	r24, r25
    2600:	82 0f       	add	r24, r18
    2602:	8f 5f       	subi	r24, 0xFF	; 255
    2604:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <nokia_lcd+0x1f9>
	}
	if (nokia_lcd.cursor_y >= 48) {
    2608:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <nokia_lcd+0x1f9>
    260c:	80 33       	cpi	r24, 0x30	; 48
    260e:	20 f0       	brcs	.+8      	; 0x2618 <nokia_lcd_write_char+0x14e>
		nokia_lcd.cursor_x = 0;
    2610:	10 92 88 04 	sts	0x0488, r1	; 0x800488 <nokia_lcd+0x1f8>
		nokia_lcd.cursor_y = 0;
    2614:	10 92 89 04 	sts	0x0489, r1	; 0x800489 <nokia_lcd+0x1f9>
	}
}
    2618:	00 00       	nop
    261a:	0f 90       	pop	r0
    261c:	0f 90       	pop	r0
    261e:	0f 90       	pop	r0
    2620:	0f 90       	pop	r0
    2622:	0f 90       	pop	r0
    2624:	df 91       	pop	r29
    2626:	cf 91       	pop	r28
    2628:	1f 91       	pop	r17
    262a:	0f 91       	pop	r16
    262c:	08 95       	ret

0000262e <nokia_lcd_write_string>:

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
    262e:	cf 93       	push	r28
    2630:	df 93       	push	r29
    2632:	00 d0       	rcall	.+0      	; 0x2634 <nokia_lcd_write_string+0x6>
    2634:	1f 92       	push	r1
    2636:	cd b7       	in	r28, 0x3d	; 61
    2638:	de b7       	in	r29, 0x3e	; 62
    263a:	9a 83       	std	Y+2, r25	; 0x02
    263c:	89 83       	std	Y+1, r24	; 0x01
    263e:	6b 83       	std	Y+3, r22	; 0x03
	while(*str)
    2640:	0c c0       	rjmp	.+24     	; 0x265a <nokia_lcd_write_string+0x2c>
		nokia_lcd_write_char(*str++, scale);
    2642:	89 81       	ldd	r24, Y+1	; 0x01
    2644:	9a 81       	ldd	r25, Y+2	; 0x02
    2646:	9c 01       	movw	r18, r24
    2648:	2f 5f       	subi	r18, 0xFF	; 255
    264a:	3f 4f       	sbci	r19, 0xFF	; 255
    264c:	3a 83       	std	Y+2, r19	; 0x02
    264e:	29 83       	std	Y+1, r18	; 0x01
    2650:	fc 01       	movw	r30, r24
    2652:	80 81       	ld	r24, Z
    2654:	6b 81       	ldd	r22, Y+3	; 0x03
    2656:	0e 94 65 12 	call	0x24ca	; 0x24ca <nokia_lcd_write_char>
	}
}

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
	while(*str)
    265a:	89 81       	ldd	r24, Y+1	; 0x01
    265c:	9a 81       	ldd	r25, Y+2	; 0x02
    265e:	fc 01       	movw	r30, r24
    2660:	80 81       	ld	r24, Z
    2662:	88 23       	and	r24, r24
    2664:	71 f7       	brne	.-36     	; 0x2642 <nokia_lcd_write_string+0x14>
		nokia_lcd_write_char(*str++, scale);
}
    2666:	00 00       	nop
    2668:	0f 90       	pop	r0
    266a:	0f 90       	pop	r0
    266c:	0f 90       	pop	r0
    266e:	df 91       	pop	r29
    2670:	cf 91       	pop	r28
    2672:	08 95       	ret

00002674 <nokia_lcd_set_cursor>:

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
    2674:	cf 93       	push	r28
    2676:	df 93       	push	r29
    2678:	00 d0       	rcall	.+0      	; 0x267a <nokia_lcd_set_cursor+0x6>
    267a:	cd b7       	in	r28, 0x3d	; 61
    267c:	de b7       	in	r29, 0x3e	; 62
    267e:	89 83       	std	Y+1, r24	; 0x01
    2680:	6a 83       	std	Y+2, r22	; 0x02
	nokia_lcd.cursor_x = x;
    2682:	89 81       	ldd	r24, Y+1	; 0x01
    2684:	80 93 88 04 	sts	0x0488, r24	; 0x800488 <nokia_lcd+0x1f8>
	nokia_lcd.cursor_y = y;
    2688:	8a 81       	ldd	r24, Y+2	; 0x02
    268a:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <nokia_lcd+0x1f9>
}
    268e:	00 00       	nop
    2690:	0f 90       	pop	r0
    2692:	0f 90       	pop	r0
    2694:	df 91       	pop	r29
    2696:	cf 91       	pop	r28
    2698:	08 95       	ret

0000269a <nokia_lcd_render>:

void nokia_lcd_render(void)
{
    269a:	0f 93       	push	r16
    269c:	1f 93       	push	r17
    269e:	cf 93       	push	r28
    26a0:	df 93       	push	r29
    26a2:	cd b7       	in	r28, 0x3d	; 61
    26a4:	de b7       	in	r29, 0x3e	; 62
	register unsigned i;
	/* Set column and row to 0 */
	write_cmd(0x80);
    26a6:	80 e8       	ldi	r24, 0x80	; 128
    26a8:	0e 94 46 10 	call	0x208c	; 0x208c <write_cmd>
	write_cmd(0x40);
    26ac:	80 e4       	ldi	r24, 0x40	; 64
    26ae:	0e 94 46 10 	call	0x208c	; 0x208c <write_cmd>

	/* Write screen to display */
	for (i = 0; i < 504; i++)
    26b2:	00 e0       	ldi	r16, 0x00	; 0
    26b4:	10 e0       	ldi	r17, 0x00	; 0
    26b6:	09 c0       	rjmp	.+18     	; 0x26ca <nokia_lcd_render+0x30>
		write_data(nokia_lcd.screen[i]);
    26b8:	c8 01       	movw	r24, r16
    26ba:	80 57       	subi	r24, 0x70	; 112
    26bc:	9d 4f       	sbci	r25, 0xFD	; 253
    26be:	fc 01       	movw	r30, r24
    26c0:	80 81       	ld	r24, Z
    26c2:	0e 94 55 10 	call	0x20aa	; 0x20aa <write_data>
	/* Set column and row to 0 */
	write_cmd(0x80);
	write_cmd(0x40);

	/* Write screen to display */
	for (i = 0; i < 504; i++)
    26c6:	0f 5f       	subi	r16, 0xFF	; 255
    26c8:	1f 4f       	sbci	r17, 0xFF	; 255
    26ca:	08 3f       	cpi	r16, 0xF8	; 248
    26cc:	f1 e0       	ldi	r31, 0x01	; 1
    26ce:	1f 07       	cpc	r17, r31
    26d0:	98 f3       	brcs	.-26     	; 0x26b8 <nokia_lcd_render+0x1e>
		write_data(nokia_lcd.screen[i]);
}
    26d2:	00 00       	nop
    26d4:	df 91       	pop	r29
    26d6:	cf 91       	pop	r28
    26d8:	1f 91       	pop	r17
    26da:	0f 91       	pop	r16
    26dc:	08 95       	ret

000026de <__subsf3>:
    26de:	50 58       	subi	r21, 0x80	; 128

000026e0 <__addsf3>:
    26e0:	bb 27       	eor	r27, r27
    26e2:	aa 27       	eor	r26, r26
    26e4:	0e 94 87 13 	call	0x270e	; 0x270e <__addsf3x>
    26e8:	0c 94 fa 14 	jmp	0x29f4	; 0x29f4 <__fp_round>
    26ec:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <__fp_pscA>
    26f0:	38 f0       	brcs	.+14     	; 0x2700 <__addsf3+0x20>
    26f2:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__fp_pscB>
    26f6:	20 f0       	brcs	.+8      	; 0x2700 <__addsf3+0x20>
    26f8:	39 f4       	brne	.+14     	; 0x2708 <__addsf3+0x28>
    26fa:	9f 3f       	cpi	r25, 0xFF	; 255
    26fc:	19 f4       	brne	.+6      	; 0x2704 <__addsf3+0x24>
    26fe:	26 f4       	brtc	.+8      	; 0x2708 <__addsf3+0x28>
    2700:	0c 94 e9 14 	jmp	0x29d2	; 0x29d2 <__fp_nan>
    2704:	0e f4       	brtc	.+2      	; 0x2708 <__addsf3+0x28>
    2706:	e0 95       	com	r30
    2708:	e7 fb       	bst	r30, 7
    270a:	0c 94 e3 14 	jmp	0x29c6	; 0x29c6 <__fp_inf>

0000270e <__addsf3x>:
    270e:	e9 2f       	mov	r30, r25
    2710:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <__fp_split3>
    2714:	58 f3       	brcs	.-42     	; 0x26ec <__addsf3+0xc>
    2716:	ba 17       	cp	r27, r26
    2718:	62 07       	cpc	r22, r18
    271a:	73 07       	cpc	r23, r19
    271c:	84 07       	cpc	r24, r20
    271e:	95 07       	cpc	r25, r21
    2720:	20 f0       	brcs	.+8      	; 0x272a <__addsf3x+0x1c>
    2722:	79 f4       	brne	.+30     	; 0x2742 <__addsf3x+0x34>
    2724:	a6 f5       	brtc	.+104    	; 0x278e <__addsf3x+0x80>
    2726:	0c 94 2d 15 	jmp	0x2a5a	; 0x2a5a <__fp_zero>
    272a:	0e f4       	brtc	.+2      	; 0x272e <__addsf3x+0x20>
    272c:	e0 95       	com	r30
    272e:	0b 2e       	mov	r0, r27
    2730:	ba 2f       	mov	r27, r26
    2732:	a0 2d       	mov	r26, r0
    2734:	0b 01       	movw	r0, r22
    2736:	b9 01       	movw	r22, r18
    2738:	90 01       	movw	r18, r0
    273a:	0c 01       	movw	r0, r24
    273c:	ca 01       	movw	r24, r20
    273e:	a0 01       	movw	r20, r0
    2740:	11 24       	eor	r1, r1
    2742:	ff 27       	eor	r31, r31
    2744:	59 1b       	sub	r21, r25
    2746:	99 f0       	breq	.+38     	; 0x276e <__addsf3x+0x60>
    2748:	59 3f       	cpi	r21, 0xF9	; 249
    274a:	50 f4       	brcc	.+20     	; 0x2760 <__addsf3x+0x52>
    274c:	50 3e       	cpi	r21, 0xE0	; 224
    274e:	68 f1       	brcs	.+90     	; 0x27aa <__addsf3x+0x9c>
    2750:	1a 16       	cp	r1, r26
    2752:	f0 40       	sbci	r31, 0x00	; 0
    2754:	a2 2f       	mov	r26, r18
    2756:	23 2f       	mov	r18, r19
    2758:	34 2f       	mov	r19, r20
    275a:	44 27       	eor	r20, r20
    275c:	58 5f       	subi	r21, 0xF8	; 248
    275e:	f3 cf       	rjmp	.-26     	; 0x2746 <__addsf3x+0x38>
    2760:	46 95       	lsr	r20
    2762:	37 95       	ror	r19
    2764:	27 95       	ror	r18
    2766:	a7 95       	ror	r26
    2768:	f0 40       	sbci	r31, 0x00	; 0
    276a:	53 95       	inc	r21
    276c:	c9 f7       	brne	.-14     	; 0x2760 <__addsf3x+0x52>
    276e:	7e f4       	brtc	.+30     	; 0x278e <__addsf3x+0x80>
    2770:	1f 16       	cp	r1, r31
    2772:	ba 0b       	sbc	r27, r26
    2774:	62 0b       	sbc	r22, r18
    2776:	73 0b       	sbc	r23, r19
    2778:	84 0b       	sbc	r24, r20
    277a:	ba f0       	brmi	.+46     	; 0x27aa <__addsf3x+0x9c>
    277c:	91 50       	subi	r25, 0x01	; 1
    277e:	a1 f0       	breq	.+40     	; 0x27a8 <__addsf3x+0x9a>
    2780:	ff 0f       	add	r31, r31
    2782:	bb 1f       	adc	r27, r27
    2784:	66 1f       	adc	r22, r22
    2786:	77 1f       	adc	r23, r23
    2788:	88 1f       	adc	r24, r24
    278a:	c2 f7       	brpl	.-16     	; 0x277c <__addsf3x+0x6e>
    278c:	0e c0       	rjmp	.+28     	; 0x27aa <__addsf3x+0x9c>
    278e:	ba 0f       	add	r27, r26
    2790:	62 1f       	adc	r22, r18
    2792:	73 1f       	adc	r23, r19
    2794:	84 1f       	adc	r24, r20
    2796:	48 f4       	brcc	.+18     	; 0x27aa <__addsf3x+0x9c>
    2798:	87 95       	ror	r24
    279a:	77 95       	ror	r23
    279c:	67 95       	ror	r22
    279e:	b7 95       	ror	r27
    27a0:	f7 95       	ror	r31
    27a2:	9e 3f       	cpi	r25, 0xFE	; 254
    27a4:	08 f0       	brcs	.+2      	; 0x27a8 <__addsf3x+0x9a>
    27a6:	b0 cf       	rjmp	.-160    	; 0x2708 <__addsf3+0x28>
    27a8:	93 95       	inc	r25
    27aa:	88 0f       	add	r24, r24
    27ac:	08 f0       	brcs	.+2      	; 0x27b0 <__addsf3x+0xa2>
    27ae:	99 27       	eor	r25, r25
    27b0:	ee 0f       	add	r30, r30
    27b2:	97 95       	ror	r25
    27b4:	87 95       	ror	r24
    27b6:	08 95       	ret

000027b8 <__cmpsf2>:
    27b8:	0e 94 bf 14 	call	0x297e	; 0x297e <__fp_cmp>
    27bc:	08 f4       	brcc	.+2      	; 0x27c0 <__cmpsf2+0x8>
    27be:	81 e0       	ldi	r24, 0x01	; 1
    27c0:	08 95       	ret

000027c2 <__divsf3>:
    27c2:	0e 94 f5 13 	call	0x27ea	; 0x27ea <__divsf3x>
    27c6:	0c 94 fa 14 	jmp	0x29f4	; 0x29f4 <__fp_round>
    27ca:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__fp_pscB>
    27ce:	58 f0       	brcs	.+22     	; 0x27e6 <__divsf3+0x24>
    27d0:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <__fp_pscA>
    27d4:	40 f0       	brcs	.+16     	; 0x27e6 <__divsf3+0x24>
    27d6:	29 f4       	brne	.+10     	; 0x27e2 <__divsf3+0x20>
    27d8:	5f 3f       	cpi	r21, 0xFF	; 255
    27da:	29 f0       	breq	.+10     	; 0x27e6 <__divsf3+0x24>
    27dc:	0c 94 e3 14 	jmp	0x29c6	; 0x29c6 <__fp_inf>
    27e0:	51 11       	cpse	r21, r1
    27e2:	0c 94 2e 15 	jmp	0x2a5c	; 0x2a5c <__fp_szero>
    27e6:	0c 94 e9 14 	jmp	0x29d2	; 0x29d2 <__fp_nan>

000027ea <__divsf3x>:
    27ea:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <__fp_split3>
    27ee:	68 f3       	brcs	.-38     	; 0x27ca <__divsf3+0x8>

000027f0 <__divsf3_pse>:
    27f0:	99 23       	and	r25, r25
    27f2:	b1 f3       	breq	.-20     	; 0x27e0 <__divsf3+0x1e>
    27f4:	55 23       	and	r21, r21
    27f6:	91 f3       	breq	.-28     	; 0x27dc <__divsf3+0x1a>
    27f8:	95 1b       	sub	r25, r21
    27fa:	55 0b       	sbc	r21, r21
    27fc:	bb 27       	eor	r27, r27
    27fe:	aa 27       	eor	r26, r26
    2800:	62 17       	cp	r22, r18
    2802:	73 07       	cpc	r23, r19
    2804:	84 07       	cpc	r24, r20
    2806:	38 f0       	brcs	.+14     	; 0x2816 <__divsf3_pse+0x26>
    2808:	9f 5f       	subi	r25, 0xFF	; 255
    280a:	5f 4f       	sbci	r21, 0xFF	; 255
    280c:	22 0f       	add	r18, r18
    280e:	33 1f       	adc	r19, r19
    2810:	44 1f       	adc	r20, r20
    2812:	aa 1f       	adc	r26, r26
    2814:	a9 f3       	breq	.-22     	; 0x2800 <__divsf3_pse+0x10>
    2816:	35 d0       	rcall	.+106    	; 0x2882 <__divsf3_pse+0x92>
    2818:	0e 2e       	mov	r0, r30
    281a:	3a f0       	brmi	.+14     	; 0x282a <__divsf3_pse+0x3a>
    281c:	e0 e8       	ldi	r30, 0x80	; 128
    281e:	32 d0       	rcall	.+100    	; 0x2884 <__divsf3_pse+0x94>
    2820:	91 50       	subi	r25, 0x01	; 1
    2822:	50 40       	sbci	r21, 0x00	; 0
    2824:	e6 95       	lsr	r30
    2826:	00 1c       	adc	r0, r0
    2828:	ca f7       	brpl	.-14     	; 0x281c <__divsf3_pse+0x2c>
    282a:	2b d0       	rcall	.+86     	; 0x2882 <__divsf3_pse+0x92>
    282c:	fe 2f       	mov	r31, r30
    282e:	29 d0       	rcall	.+82     	; 0x2882 <__divsf3_pse+0x92>
    2830:	66 0f       	add	r22, r22
    2832:	77 1f       	adc	r23, r23
    2834:	88 1f       	adc	r24, r24
    2836:	bb 1f       	adc	r27, r27
    2838:	26 17       	cp	r18, r22
    283a:	37 07       	cpc	r19, r23
    283c:	48 07       	cpc	r20, r24
    283e:	ab 07       	cpc	r26, r27
    2840:	b0 e8       	ldi	r27, 0x80	; 128
    2842:	09 f0       	breq	.+2      	; 0x2846 <__divsf3_pse+0x56>
    2844:	bb 0b       	sbc	r27, r27
    2846:	80 2d       	mov	r24, r0
    2848:	bf 01       	movw	r22, r30
    284a:	ff 27       	eor	r31, r31
    284c:	93 58       	subi	r25, 0x83	; 131
    284e:	5f 4f       	sbci	r21, 0xFF	; 255
    2850:	3a f0       	brmi	.+14     	; 0x2860 <__divsf3_pse+0x70>
    2852:	9e 3f       	cpi	r25, 0xFE	; 254
    2854:	51 05       	cpc	r21, r1
    2856:	78 f0       	brcs	.+30     	; 0x2876 <__divsf3_pse+0x86>
    2858:	0c 94 e3 14 	jmp	0x29c6	; 0x29c6 <__fp_inf>
    285c:	0c 94 2e 15 	jmp	0x2a5c	; 0x2a5c <__fp_szero>
    2860:	5f 3f       	cpi	r21, 0xFF	; 255
    2862:	e4 f3       	brlt	.-8      	; 0x285c <__divsf3_pse+0x6c>
    2864:	98 3e       	cpi	r25, 0xE8	; 232
    2866:	d4 f3       	brlt	.-12     	; 0x285c <__divsf3_pse+0x6c>
    2868:	86 95       	lsr	r24
    286a:	77 95       	ror	r23
    286c:	67 95       	ror	r22
    286e:	b7 95       	ror	r27
    2870:	f7 95       	ror	r31
    2872:	9f 5f       	subi	r25, 0xFF	; 255
    2874:	c9 f7       	brne	.-14     	; 0x2868 <__divsf3_pse+0x78>
    2876:	88 0f       	add	r24, r24
    2878:	91 1d       	adc	r25, r1
    287a:	96 95       	lsr	r25
    287c:	87 95       	ror	r24
    287e:	97 f9       	bld	r25, 7
    2880:	08 95       	ret
    2882:	e1 e0       	ldi	r30, 0x01	; 1
    2884:	66 0f       	add	r22, r22
    2886:	77 1f       	adc	r23, r23
    2888:	88 1f       	adc	r24, r24
    288a:	bb 1f       	adc	r27, r27
    288c:	62 17       	cp	r22, r18
    288e:	73 07       	cpc	r23, r19
    2890:	84 07       	cpc	r24, r20
    2892:	ba 07       	cpc	r27, r26
    2894:	20 f0       	brcs	.+8      	; 0x289e <__divsf3_pse+0xae>
    2896:	62 1b       	sub	r22, r18
    2898:	73 0b       	sbc	r23, r19
    289a:	84 0b       	sbc	r24, r20
    289c:	ba 0b       	sbc	r27, r26
    289e:	ee 1f       	adc	r30, r30
    28a0:	88 f7       	brcc	.-30     	; 0x2884 <__divsf3_pse+0x94>
    28a2:	e0 95       	com	r30
    28a4:	08 95       	ret

000028a6 <__fixunssfsi>:
    28a6:	0e 94 13 15 	call	0x2a26	; 0x2a26 <__fp_splitA>
    28aa:	88 f0       	brcs	.+34     	; 0x28ce <__fixunssfsi+0x28>
    28ac:	9f 57       	subi	r25, 0x7F	; 127
    28ae:	98 f0       	brcs	.+38     	; 0x28d6 <__fixunssfsi+0x30>
    28b0:	b9 2f       	mov	r27, r25
    28b2:	99 27       	eor	r25, r25
    28b4:	b7 51       	subi	r27, 0x17	; 23
    28b6:	b0 f0       	brcs	.+44     	; 0x28e4 <__fixunssfsi+0x3e>
    28b8:	e1 f0       	breq	.+56     	; 0x28f2 <__fixunssfsi+0x4c>
    28ba:	66 0f       	add	r22, r22
    28bc:	77 1f       	adc	r23, r23
    28be:	88 1f       	adc	r24, r24
    28c0:	99 1f       	adc	r25, r25
    28c2:	1a f0       	brmi	.+6      	; 0x28ca <__fixunssfsi+0x24>
    28c4:	ba 95       	dec	r27
    28c6:	c9 f7       	brne	.-14     	; 0x28ba <__fixunssfsi+0x14>
    28c8:	14 c0       	rjmp	.+40     	; 0x28f2 <__fixunssfsi+0x4c>
    28ca:	b1 30       	cpi	r27, 0x01	; 1
    28cc:	91 f0       	breq	.+36     	; 0x28f2 <__fixunssfsi+0x4c>
    28ce:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <__fp_zero>
    28d2:	b1 e0       	ldi	r27, 0x01	; 1
    28d4:	08 95       	ret
    28d6:	0c 94 2d 15 	jmp	0x2a5a	; 0x2a5a <__fp_zero>
    28da:	67 2f       	mov	r22, r23
    28dc:	78 2f       	mov	r23, r24
    28de:	88 27       	eor	r24, r24
    28e0:	b8 5f       	subi	r27, 0xF8	; 248
    28e2:	39 f0       	breq	.+14     	; 0x28f2 <__fixunssfsi+0x4c>
    28e4:	b9 3f       	cpi	r27, 0xF9	; 249
    28e6:	cc f3       	brlt	.-14     	; 0x28da <__fixunssfsi+0x34>
    28e8:	86 95       	lsr	r24
    28ea:	77 95       	ror	r23
    28ec:	67 95       	ror	r22
    28ee:	b3 95       	inc	r27
    28f0:	d9 f7       	brne	.-10     	; 0x28e8 <__fixunssfsi+0x42>
    28f2:	3e f4       	brtc	.+14     	; 0x2902 <__fixunssfsi+0x5c>
    28f4:	90 95       	com	r25
    28f6:	80 95       	com	r24
    28f8:	70 95       	com	r23
    28fa:	61 95       	neg	r22
    28fc:	7f 4f       	sbci	r23, 0xFF	; 255
    28fe:	8f 4f       	sbci	r24, 0xFF	; 255
    2900:	9f 4f       	sbci	r25, 0xFF	; 255
    2902:	08 95       	ret

00002904 <__floatunsisf>:
    2904:	e8 94       	clt
    2906:	09 c0       	rjmp	.+18     	; 0x291a <__floatsisf+0x12>

00002908 <__floatsisf>:
    2908:	97 fb       	bst	r25, 7
    290a:	3e f4       	brtc	.+14     	; 0x291a <__floatsisf+0x12>
    290c:	90 95       	com	r25
    290e:	80 95       	com	r24
    2910:	70 95       	com	r23
    2912:	61 95       	neg	r22
    2914:	7f 4f       	sbci	r23, 0xFF	; 255
    2916:	8f 4f       	sbci	r24, 0xFF	; 255
    2918:	9f 4f       	sbci	r25, 0xFF	; 255
    291a:	99 23       	and	r25, r25
    291c:	a9 f0       	breq	.+42     	; 0x2948 <__floatsisf+0x40>
    291e:	f9 2f       	mov	r31, r25
    2920:	96 e9       	ldi	r25, 0x96	; 150
    2922:	bb 27       	eor	r27, r27
    2924:	93 95       	inc	r25
    2926:	f6 95       	lsr	r31
    2928:	87 95       	ror	r24
    292a:	77 95       	ror	r23
    292c:	67 95       	ror	r22
    292e:	b7 95       	ror	r27
    2930:	f1 11       	cpse	r31, r1
    2932:	f8 cf       	rjmp	.-16     	; 0x2924 <__floatsisf+0x1c>
    2934:	fa f4       	brpl	.+62     	; 0x2974 <__floatsisf+0x6c>
    2936:	bb 0f       	add	r27, r27
    2938:	11 f4       	brne	.+4      	; 0x293e <__floatsisf+0x36>
    293a:	60 ff       	sbrs	r22, 0
    293c:	1b c0       	rjmp	.+54     	; 0x2974 <__floatsisf+0x6c>
    293e:	6f 5f       	subi	r22, 0xFF	; 255
    2940:	7f 4f       	sbci	r23, 0xFF	; 255
    2942:	8f 4f       	sbci	r24, 0xFF	; 255
    2944:	9f 4f       	sbci	r25, 0xFF	; 255
    2946:	16 c0       	rjmp	.+44     	; 0x2974 <__floatsisf+0x6c>
    2948:	88 23       	and	r24, r24
    294a:	11 f0       	breq	.+4      	; 0x2950 <__floatsisf+0x48>
    294c:	96 e9       	ldi	r25, 0x96	; 150
    294e:	11 c0       	rjmp	.+34     	; 0x2972 <__floatsisf+0x6a>
    2950:	77 23       	and	r23, r23
    2952:	21 f0       	breq	.+8      	; 0x295c <__floatsisf+0x54>
    2954:	9e e8       	ldi	r25, 0x8E	; 142
    2956:	87 2f       	mov	r24, r23
    2958:	76 2f       	mov	r23, r22
    295a:	05 c0       	rjmp	.+10     	; 0x2966 <__floatsisf+0x5e>
    295c:	66 23       	and	r22, r22
    295e:	71 f0       	breq	.+28     	; 0x297c <__floatsisf+0x74>
    2960:	96 e8       	ldi	r25, 0x86	; 134
    2962:	86 2f       	mov	r24, r22
    2964:	70 e0       	ldi	r23, 0x00	; 0
    2966:	60 e0       	ldi	r22, 0x00	; 0
    2968:	2a f0       	brmi	.+10     	; 0x2974 <__floatsisf+0x6c>
    296a:	9a 95       	dec	r25
    296c:	66 0f       	add	r22, r22
    296e:	77 1f       	adc	r23, r23
    2970:	88 1f       	adc	r24, r24
    2972:	da f7       	brpl	.-10     	; 0x296a <__floatsisf+0x62>
    2974:	88 0f       	add	r24, r24
    2976:	96 95       	lsr	r25
    2978:	87 95       	ror	r24
    297a:	97 f9       	bld	r25, 7
    297c:	08 95       	ret

0000297e <__fp_cmp>:
    297e:	99 0f       	add	r25, r25
    2980:	00 08       	sbc	r0, r0
    2982:	55 0f       	add	r21, r21
    2984:	aa 0b       	sbc	r26, r26
    2986:	e0 e8       	ldi	r30, 0x80	; 128
    2988:	fe ef       	ldi	r31, 0xFE	; 254
    298a:	16 16       	cp	r1, r22
    298c:	17 06       	cpc	r1, r23
    298e:	e8 07       	cpc	r30, r24
    2990:	f9 07       	cpc	r31, r25
    2992:	c0 f0       	brcs	.+48     	; 0x29c4 <__fp_cmp+0x46>
    2994:	12 16       	cp	r1, r18
    2996:	13 06       	cpc	r1, r19
    2998:	e4 07       	cpc	r30, r20
    299a:	f5 07       	cpc	r31, r21
    299c:	98 f0       	brcs	.+38     	; 0x29c4 <__fp_cmp+0x46>
    299e:	62 1b       	sub	r22, r18
    29a0:	73 0b       	sbc	r23, r19
    29a2:	84 0b       	sbc	r24, r20
    29a4:	95 0b       	sbc	r25, r21
    29a6:	39 f4       	brne	.+14     	; 0x29b6 <__fp_cmp+0x38>
    29a8:	0a 26       	eor	r0, r26
    29aa:	61 f0       	breq	.+24     	; 0x29c4 <__fp_cmp+0x46>
    29ac:	23 2b       	or	r18, r19
    29ae:	24 2b       	or	r18, r20
    29b0:	25 2b       	or	r18, r21
    29b2:	21 f4       	brne	.+8      	; 0x29bc <__fp_cmp+0x3e>
    29b4:	08 95       	ret
    29b6:	0a 26       	eor	r0, r26
    29b8:	09 f4       	brne	.+2      	; 0x29bc <__fp_cmp+0x3e>
    29ba:	a1 40       	sbci	r26, 0x01	; 1
    29bc:	a6 95       	lsr	r26
    29be:	8f ef       	ldi	r24, 0xFF	; 255
    29c0:	81 1d       	adc	r24, r1
    29c2:	81 1d       	adc	r24, r1
    29c4:	08 95       	ret

000029c6 <__fp_inf>:
    29c6:	97 f9       	bld	r25, 7
    29c8:	9f 67       	ori	r25, 0x7F	; 127
    29ca:	80 e8       	ldi	r24, 0x80	; 128
    29cc:	70 e0       	ldi	r23, 0x00	; 0
    29ce:	60 e0       	ldi	r22, 0x00	; 0
    29d0:	08 95       	ret

000029d2 <__fp_nan>:
    29d2:	9f ef       	ldi	r25, 0xFF	; 255
    29d4:	80 ec       	ldi	r24, 0xC0	; 192
    29d6:	08 95       	ret

000029d8 <__fp_pscA>:
    29d8:	00 24       	eor	r0, r0
    29da:	0a 94       	dec	r0
    29dc:	16 16       	cp	r1, r22
    29de:	17 06       	cpc	r1, r23
    29e0:	18 06       	cpc	r1, r24
    29e2:	09 06       	cpc	r0, r25
    29e4:	08 95       	ret

000029e6 <__fp_pscB>:
    29e6:	00 24       	eor	r0, r0
    29e8:	0a 94       	dec	r0
    29ea:	12 16       	cp	r1, r18
    29ec:	13 06       	cpc	r1, r19
    29ee:	14 06       	cpc	r1, r20
    29f0:	05 06       	cpc	r0, r21
    29f2:	08 95       	ret

000029f4 <__fp_round>:
    29f4:	09 2e       	mov	r0, r25
    29f6:	03 94       	inc	r0
    29f8:	00 0c       	add	r0, r0
    29fa:	11 f4       	brne	.+4      	; 0x2a00 <__fp_round+0xc>
    29fc:	88 23       	and	r24, r24
    29fe:	52 f0       	brmi	.+20     	; 0x2a14 <__fp_round+0x20>
    2a00:	bb 0f       	add	r27, r27
    2a02:	40 f4       	brcc	.+16     	; 0x2a14 <__fp_round+0x20>
    2a04:	bf 2b       	or	r27, r31
    2a06:	11 f4       	brne	.+4      	; 0x2a0c <__fp_round+0x18>
    2a08:	60 ff       	sbrs	r22, 0
    2a0a:	04 c0       	rjmp	.+8      	; 0x2a14 <__fp_round+0x20>
    2a0c:	6f 5f       	subi	r22, 0xFF	; 255
    2a0e:	7f 4f       	sbci	r23, 0xFF	; 255
    2a10:	8f 4f       	sbci	r24, 0xFF	; 255
    2a12:	9f 4f       	sbci	r25, 0xFF	; 255
    2a14:	08 95       	ret

00002a16 <__fp_split3>:
    2a16:	57 fd       	sbrc	r21, 7
    2a18:	90 58       	subi	r25, 0x80	; 128
    2a1a:	44 0f       	add	r20, r20
    2a1c:	55 1f       	adc	r21, r21
    2a1e:	59 f0       	breq	.+22     	; 0x2a36 <__fp_splitA+0x10>
    2a20:	5f 3f       	cpi	r21, 0xFF	; 255
    2a22:	71 f0       	breq	.+28     	; 0x2a40 <__fp_splitA+0x1a>
    2a24:	47 95       	ror	r20

00002a26 <__fp_splitA>:
    2a26:	88 0f       	add	r24, r24
    2a28:	97 fb       	bst	r25, 7
    2a2a:	99 1f       	adc	r25, r25
    2a2c:	61 f0       	breq	.+24     	; 0x2a46 <__fp_splitA+0x20>
    2a2e:	9f 3f       	cpi	r25, 0xFF	; 255
    2a30:	79 f0       	breq	.+30     	; 0x2a50 <__fp_splitA+0x2a>
    2a32:	87 95       	ror	r24
    2a34:	08 95       	ret
    2a36:	12 16       	cp	r1, r18
    2a38:	13 06       	cpc	r1, r19
    2a3a:	14 06       	cpc	r1, r20
    2a3c:	55 1f       	adc	r21, r21
    2a3e:	f2 cf       	rjmp	.-28     	; 0x2a24 <__fp_split3+0xe>
    2a40:	46 95       	lsr	r20
    2a42:	f1 df       	rcall	.-30     	; 0x2a26 <__fp_splitA>
    2a44:	08 c0       	rjmp	.+16     	; 0x2a56 <__fp_splitA+0x30>
    2a46:	16 16       	cp	r1, r22
    2a48:	17 06       	cpc	r1, r23
    2a4a:	18 06       	cpc	r1, r24
    2a4c:	99 1f       	adc	r25, r25
    2a4e:	f1 cf       	rjmp	.-30     	; 0x2a32 <__fp_splitA+0xc>
    2a50:	86 95       	lsr	r24
    2a52:	71 05       	cpc	r23, r1
    2a54:	61 05       	cpc	r22, r1
    2a56:	08 94       	sec
    2a58:	08 95       	ret

00002a5a <__fp_zero>:
    2a5a:	e8 94       	clt

00002a5c <__fp_szero>:
    2a5c:	bb 27       	eor	r27, r27
    2a5e:	66 27       	eor	r22, r22
    2a60:	77 27       	eor	r23, r23
    2a62:	cb 01       	movw	r24, r22
    2a64:	97 f9       	bld	r25, 7
    2a66:	08 95       	ret

00002a68 <__gesf2>:
    2a68:	0e 94 bf 14 	call	0x297e	; 0x297e <__fp_cmp>
    2a6c:	08 f4       	brcc	.+2      	; 0x2a70 <__gesf2+0x8>
    2a6e:	8f ef       	ldi	r24, 0xFF	; 255
    2a70:	08 95       	ret

00002a72 <__mulsf3>:
    2a72:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <__mulsf3x>
    2a76:	0c 94 fa 14 	jmp	0x29f4	; 0x29f4 <__fp_round>
    2a7a:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <__fp_pscA>
    2a7e:	38 f0       	brcs	.+14     	; 0x2a8e <__mulsf3+0x1c>
    2a80:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <__fp_pscB>
    2a84:	20 f0       	brcs	.+8      	; 0x2a8e <__mulsf3+0x1c>
    2a86:	95 23       	and	r25, r21
    2a88:	11 f0       	breq	.+4      	; 0x2a8e <__mulsf3+0x1c>
    2a8a:	0c 94 e3 14 	jmp	0x29c6	; 0x29c6 <__fp_inf>
    2a8e:	0c 94 e9 14 	jmp	0x29d2	; 0x29d2 <__fp_nan>
    2a92:	11 24       	eor	r1, r1
    2a94:	0c 94 2e 15 	jmp	0x2a5c	; 0x2a5c <__fp_szero>

00002a98 <__mulsf3x>:
    2a98:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <__fp_split3>
    2a9c:	70 f3       	brcs	.-36     	; 0x2a7a <__mulsf3+0x8>

00002a9e <__mulsf3_pse>:
    2a9e:	95 9f       	mul	r25, r21
    2aa0:	c1 f3       	breq	.-16     	; 0x2a92 <__mulsf3+0x20>
    2aa2:	95 0f       	add	r25, r21
    2aa4:	50 e0       	ldi	r21, 0x00	; 0
    2aa6:	55 1f       	adc	r21, r21
    2aa8:	62 9f       	mul	r22, r18
    2aaa:	f0 01       	movw	r30, r0
    2aac:	72 9f       	mul	r23, r18
    2aae:	bb 27       	eor	r27, r27
    2ab0:	f0 0d       	add	r31, r0
    2ab2:	b1 1d       	adc	r27, r1
    2ab4:	63 9f       	mul	r22, r19
    2ab6:	aa 27       	eor	r26, r26
    2ab8:	f0 0d       	add	r31, r0
    2aba:	b1 1d       	adc	r27, r1
    2abc:	aa 1f       	adc	r26, r26
    2abe:	64 9f       	mul	r22, r20
    2ac0:	66 27       	eor	r22, r22
    2ac2:	b0 0d       	add	r27, r0
    2ac4:	a1 1d       	adc	r26, r1
    2ac6:	66 1f       	adc	r22, r22
    2ac8:	82 9f       	mul	r24, r18
    2aca:	22 27       	eor	r18, r18
    2acc:	b0 0d       	add	r27, r0
    2ace:	a1 1d       	adc	r26, r1
    2ad0:	62 1f       	adc	r22, r18
    2ad2:	73 9f       	mul	r23, r19
    2ad4:	b0 0d       	add	r27, r0
    2ad6:	a1 1d       	adc	r26, r1
    2ad8:	62 1f       	adc	r22, r18
    2ada:	83 9f       	mul	r24, r19
    2adc:	a0 0d       	add	r26, r0
    2ade:	61 1d       	adc	r22, r1
    2ae0:	22 1f       	adc	r18, r18
    2ae2:	74 9f       	mul	r23, r20
    2ae4:	33 27       	eor	r19, r19
    2ae6:	a0 0d       	add	r26, r0
    2ae8:	61 1d       	adc	r22, r1
    2aea:	23 1f       	adc	r18, r19
    2aec:	84 9f       	mul	r24, r20
    2aee:	60 0d       	add	r22, r0
    2af0:	21 1d       	adc	r18, r1
    2af2:	82 2f       	mov	r24, r18
    2af4:	76 2f       	mov	r23, r22
    2af6:	6a 2f       	mov	r22, r26
    2af8:	11 24       	eor	r1, r1
    2afa:	9f 57       	subi	r25, 0x7F	; 127
    2afc:	50 40       	sbci	r21, 0x00	; 0
    2afe:	9a f0       	brmi	.+38     	; 0x2b26 <__mulsf3_pse+0x88>
    2b00:	f1 f0       	breq	.+60     	; 0x2b3e <__mulsf3_pse+0xa0>
    2b02:	88 23       	and	r24, r24
    2b04:	4a f0       	brmi	.+18     	; 0x2b18 <__mulsf3_pse+0x7a>
    2b06:	ee 0f       	add	r30, r30
    2b08:	ff 1f       	adc	r31, r31
    2b0a:	bb 1f       	adc	r27, r27
    2b0c:	66 1f       	adc	r22, r22
    2b0e:	77 1f       	adc	r23, r23
    2b10:	88 1f       	adc	r24, r24
    2b12:	91 50       	subi	r25, 0x01	; 1
    2b14:	50 40       	sbci	r21, 0x00	; 0
    2b16:	a9 f7       	brne	.-22     	; 0x2b02 <__mulsf3_pse+0x64>
    2b18:	9e 3f       	cpi	r25, 0xFE	; 254
    2b1a:	51 05       	cpc	r21, r1
    2b1c:	80 f0       	brcs	.+32     	; 0x2b3e <__mulsf3_pse+0xa0>
    2b1e:	0c 94 e3 14 	jmp	0x29c6	; 0x29c6 <__fp_inf>
    2b22:	0c 94 2e 15 	jmp	0x2a5c	; 0x2a5c <__fp_szero>
    2b26:	5f 3f       	cpi	r21, 0xFF	; 255
    2b28:	e4 f3       	brlt	.-8      	; 0x2b22 <__mulsf3_pse+0x84>
    2b2a:	98 3e       	cpi	r25, 0xE8	; 232
    2b2c:	d4 f3       	brlt	.-12     	; 0x2b22 <__mulsf3_pse+0x84>
    2b2e:	86 95       	lsr	r24
    2b30:	77 95       	ror	r23
    2b32:	67 95       	ror	r22
    2b34:	b7 95       	ror	r27
    2b36:	f7 95       	ror	r31
    2b38:	e7 95       	ror	r30
    2b3a:	9f 5f       	subi	r25, 0xFF	; 255
    2b3c:	c1 f7       	brne	.-16     	; 0x2b2e <__mulsf3_pse+0x90>
    2b3e:	fe 2b       	or	r31, r30
    2b40:	88 0f       	add	r24, r24
    2b42:	91 1d       	adc	r25, r1
    2b44:	96 95       	lsr	r25
    2b46:	87 95       	ror	r24
    2b48:	97 f9       	bld	r25, 7
    2b4a:	08 95       	ret

00002b4c <__udivmodqi4>:
    2b4c:	99 1b       	sub	r25, r25
    2b4e:	79 e0       	ldi	r23, 0x09	; 9
    2b50:	04 c0       	rjmp	.+8      	; 0x2b5a <__udivmodqi4_ep>

00002b52 <__udivmodqi4_loop>:
    2b52:	99 1f       	adc	r25, r25
    2b54:	96 17       	cp	r25, r22
    2b56:	08 f0       	brcs	.+2      	; 0x2b5a <__udivmodqi4_ep>
    2b58:	96 1b       	sub	r25, r22

00002b5a <__udivmodqi4_ep>:
    2b5a:	88 1f       	adc	r24, r24
    2b5c:	7a 95       	dec	r23
    2b5e:	c9 f7       	brne	.-14     	; 0x2b52 <__udivmodqi4_loop>
    2b60:	80 95       	com	r24
    2b62:	08 95       	ret

00002b64 <__udivmodsi4>:
    2b64:	a1 e2       	ldi	r26, 0x21	; 33
    2b66:	1a 2e       	mov	r1, r26
    2b68:	aa 1b       	sub	r26, r26
    2b6a:	bb 1b       	sub	r27, r27
    2b6c:	fd 01       	movw	r30, r26
    2b6e:	0d c0       	rjmp	.+26     	; 0x2b8a <__udivmodsi4_ep>

00002b70 <__udivmodsi4_loop>:
    2b70:	aa 1f       	adc	r26, r26
    2b72:	bb 1f       	adc	r27, r27
    2b74:	ee 1f       	adc	r30, r30
    2b76:	ff 1f       	adc	r31, r31
    2b78:	a2 17       	cp	r26, r18
    2b7a:	b3 07       	cpc	r27, r19
    2b7c:	e4 07       	cpc	r30, r20
    2b7e:	f5 07       	cpc	r31, r21
    2b80:	20 f0       	brcs	.+8      	; 0x2b8a <__udivmodsi4_ep>
    2b82:	a2 1b       	sub	r26, r18
    2b84:	b3 0b       	sbc	r27, r19
    2b86:	e4 0b       	sbc	r30, r20
    2b88:	f5 0b       	sbc	r31, r21

00002b8a <__udivmodsi4_ep>:
    2b8a:	66 1f       	adc	r22, r22
    2b8c:	77 1f       	adc	r23, r23
    2b8e:	88 1f       	adc	r24, r24
    2b90:	99 1f       	adc	r25, r25
    2b92:	1a 94       	dec	r1
    2b94:	69 f7       	brne	.-38     	; 0x2b70 <__udivmodsi4_loop>
    2b96:	60 95       	com	r22
    2b98:	70 95       	com	r23
    2b9a:	80 95       	com	r24
    2b9c:	90 95       	com	r25
    2b9e:	9b 01       	movw	r18, r22
    2ba0:	ac 01       	movw	r20, r24
    2ba2:	bd 01       	movw	r22, r26
    2ba4:	cf 01       	movw	r24, r30
    2ba6:	08 95       	ret

00002ba8 <__divmodsi4>:
    2ba8:	05 2e       	mov	r0, r21
    2baa:	97 fb       	bst	r25, 7
    2bac:	1e f4       	brtc	.+6      	; 0x2bb4 <__divmodsi4+0xc>
    2bae:	00 94       	com	r0
    2bb0:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <__negsi2>
    2bb4:	57 fd       	sbrc	r21, 7
    2bb6:	07 d0       	rcall	.+14     	; 0x2bc6 <__divmodsi4_neg2>
    2bb8:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__udivmodsi4>
    2bbc:	07 fc       	sbrc	r0, 7
    2bbe:	03 d0       	rcall	.+6      	; 0x2bc6 <__divmodsi4_neg2>
    2bc0:	4e f4       	brtc	.+18     	; 0x2bd4 <__divmodsi4_exit>
    2bc2:	0c 94 eb 15 	jmp	0x2bd6	; 0x2bd6 <__negsi2>

00002bc6 <__divmodsi4_neg2>:
    2bc6:	50 95       	com	r21
    2bc8:	40 95       	com	r20
    2bca:	30 95       	com	r19
    2bcc:	21 95       	neg	r18
    2bce:	3f 4f       	sbci	r19, 0xFF	; 255
    2bd0:	4f 4f       	sbci	r20, 0xFF	; 255
    2bd2:	5f 4f       	sbci	r21, 0xFF	; 255

00002bd4 <__divmodsi4_exit>:
    2bd4:	08 95       	ret

00002bd6 <__negsi2>:
    2bd6:	90 95       	com	r25
    2bd8:	80 95       	com	r24
    2bda:	70 95       	com	r23
    2bdc:	61 95       	neg	r22
    2bde:	7f 4f       	sbci	r23, 0xFF	; 255
    2be0:	8f 4f       	sbci	r24, 0xFF	; 255
    2be2:	9f 4f       	sbci	r25, 0xFF	; 255
    2be4:	08 95       	ret

00002be6 <itoa>:
    2be6:	45 32       	cpi	r20, 0x25	; 37
    2be8:	51 05       	cpc	r21, r1
    2bea:	20 f4       	brcc	.+8      	; 0x2bf4 <itoa+0xe>
    2bec:	42 30       	cpi	r20, 0x02	; 2
    2bee:	10 f0       	brcs	.+4      	; 0x2bf4 <itoa+0xe>
    2bf0:	0c 94 fe 15 	jmp	0x2bfc	; 0x2bfc <__itoa_ncheck>
    2bf4:	fb 01       	movw	r30, r22
    2bf6:	10 82       	st	Z, r1
    2bf8:	cb 01       	movw	r24, r22
    2bfa:	08 95       	ret

00002bfc <__itoa_ncheck>:
    2bfc:	bb 27       	eor	r27, r27
    2bfe:	4a 30       	cpi	r20, 0x0A	; 10
    2c00:	31 f4       	brne	.+12     	; 0x2c0e <__itoa_ncheck+0x12>
    2c02:	99 23       	and	r25, r25
    2c04:	22 f4       	brpl	.+8      	; 0x2c0e <__itoa_ncheck+0x12>
    2c06:	bd e2       	ldi	r27, 0x2D	; 45
    2c08:	90 95       	com	r25
    2c0a:	81 95       	neg	r24
    2c0c:	9f 4f       	sbci	r25, 0xFF	; 255
    2c0e:	0c 94 0a 16 	jmp	0x2c14	; 0x2c14 <__utoa_common>

00002c12 <__utoa_ncheck>:
    2c12:	bb 27       	eor	r27, r27

00002c14 <__utoa_common>:
    2c14:	fb 01       	movw	r30, r22
    2c16:	55 27       	eor	r21, r21
    2c18:	aa 27       	eor	r26, r26
    2c1a:	88 0f       	add	r24, r24
    2c1c:	99 1f       	adc	r25, r25
    2c1e:	aa 1f       	adc	r26, r26
    2c20:	a4 17       	cp	r26, r20
    2c22:	10 f0       	brcs	.+4      	; 0x2c28 <__utoa_common+0x14>
    2c24:	a4 1b       	sub	r26, r20
    2c26:	83 95       	inc	r24
    2c28:	50 51       	subi	r21, 0x10	; 16
    2c2a:	b9 f7       	brne	.-18     	; 0x2c1a <__utoa_common+0x6>
    2c2c:	a0 5d       	subi	r26, 0xD0	; 208
    2c2e:	aa 33       	cpi	r26, 0x3A	; 58
    2c30:	08 f0       	brcs	.+2      	; 0x2c34 <__utoa_common+0x20>
    2c32:	a9 5d       	subi	r26, 0xD9	; 217
    2c34:	a1 93       	st	Z+, r26
    2c36:	00 97       	sbiw	r24, 0x00	; 0
    2c38:	79 f7       	brne	.-34     	; 0x2c18 <__utoa_common+0x4>
    2c3a:	b1 11       	cpse	r27, r1
    2c3c:	b1 93       	st	Z+, r27
    2c3e:	11 92       	st	Z+, r1
    2c40:	cb 01       	movw	r24, r22
    2c42:	0c 94 23 16 	jmp	0x2c46	; 0x2c46 <strrev>

00002c46 <strrev>:
    2c46:	dc 01       	movw	r26, r24
    2c48:	fc 01       	movw	r30, r24
    2c4a:	67 2f       	mov	r22, r23
    2c4c:	71 91       	ld	r23, Z+
    2c4e:	77 23       	and	r23, r23
    2c50:	e1 f7       	brne	.-8      	; 0x2c4a <strrev+0x4>
    2c52:	32 97       	sbiw	r30, 0x02	; 2
    2c54:	04 c0       	rjmp	.+8      	; 0x2c5e <strrev+0x18>
    2c56:	7c 91       	ld	r23, X
    2c58:	6d 93       	st	X+, r22
    2c5a:	70 83       	st	Z, r23
    2c5c:	62 91       	ld	r22, -Z
    2c5e:	ae 17       	cp	r26, r30
    2c60:	bf 07       	cpc	r27, r31
    2c62:	c8 f3       	brcs	.-14     	; 0x2c56 <strrev+0x10>
    2c64:	08 95       	ret

00002c66 <_exit>:
    2c66:	f8 94       	cli

00002c68 <__stop_program>:
    2c68:	ff cf       	rjmp	.-2      	; 0x2c68 <__stop_program>
